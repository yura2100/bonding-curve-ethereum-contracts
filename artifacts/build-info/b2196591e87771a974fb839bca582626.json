{"id":"b2196591e87771a974fb839bca582626","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC721Base is IERC721, Context {\n    using ERC721Storage for ERC721Storage.Layout;\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) external virtual {\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) external virtual {\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    function transferFrom(address from, address to, uint256 tokenId) external {\n        ERC721Storage.layout().transferFrom(_msgSender(), from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) external view returns (uint256 balance) {\n        return ERC721Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\n        return ERC721Storage.layout().ownerOf(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) external view returns (address approved) {\n        return ERC721Storage.layout().getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {TokenMetadataStorage} from \"./../../metadata/libraries/TokenMetadataStorage.sol\";\nimport {TokenMetadataBase} from \"./../../metadata/base/TokenMetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\n    using ERC721Storage for ERC721Storage.Layout;\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @inheritdoc IERC721Metadata\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\n        return TokenMetadataBase.name();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\n        return TokenMetadataBase.symbol();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721MintableOnceBase is IERC721Mintable, Context {\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    function mint(address to, uint256 tokenId) external virtual {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().mintOnce(to, tokenId);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().safeMintOnce(_msgSender(), to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().batchMintOnce(to, tokenIds);\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(uint256 tokenId) external view virtual returns (bool tokenWasBurnt) {\n        return ERC721Storage.layout().wasBurnt(tokenId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721Base} from \"./base/ERC721Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721 is ERC721Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\n    constructor() {\n        ERC721Storage.init();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ITokenMetadataResolver} from \"./../metadata/interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../metadata/libraries/TokenMetadataStorage.sol\";\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MetadataBase} from \"./base/ERC721MetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Metadata is ERC721MetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n    /// @param name The name of the token.\n    /// @param symbol The symbol of the token.\n    /// @param metadataResolver The address of the metadata resolver contract.\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\n        ERC721Storage.initERC721Metadata();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MintableOnceBase} from \"./base/ERC721MintableOnceBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721MintableOnce is ERC721MintableOnceBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    constructor() {\n        ERC721Storage.initERC721Mintable();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when trying to approve oneself.\n/// @param account The account trying to approve itself.\nerror ERC721SelfApproval(address account);\n\n/// @notice Thrown when trying to approveForAll oneself.\n/// @param account The account trying to approveForAll itself.\nerror ERC721SelfApprovalForAll(address account);\n\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when transferring a token to the zero address.\nerror ERC721TransferToAddressZero();\n\n/// @notice Thrown when a token does not exist but is required to.\n/// @param tokenId The identifier of the token that was checked.\nerror ERC721NonExistingToken(uint256 tokenId);\n\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when a token is not owned by the expected account.\n/// @param account The account that was expected to own the token.\n/// @param tokenId The identifier of the token.\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\n\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\n/// @param recipient The recipient contract.\n/// @param tokenId The identifier of the token.\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\n\n/// @notice Thrown when querying the balance of the zero address.\nerror ERC721BalanceOfAddressZero();\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when minting a token to the zero address.\nerror ERC721MintToAddressZero();\n\n/// @notice Thrown when minting a token that already exists.\n/// @param tokenId The identifier of the token that already exists.\nerror ERC721ExistingToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n/// @param tokenId The identifier of the token that has been burnt before.\nerror ERC721BurntToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Emitted when a token is transferred.\n/// @param from The previous token owner.\n/// @param to The new token owner.\n/// @param tokenId The transferred token identifier.\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n/// @notice Emitted when a single token approval is set.\n/// @param owner The token owner.\n/// @param approved The approved address.\n/// @param tokenId The approved token identifier.\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n/// @notice Emitted when an approval for all tokens is set or unset.\n/// @param owner The tokens owner.\n/// @param operator The approved address.\n/// @param approved True when then approval is set, false when it is unset.\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\ninterface IERC721BatchTransfer {\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\ninterface IERC721Burnable {\n    /// @notice Burns a token.\n    /// @dev Reverts if `tokenId` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(address from, uint256 tokenId) external;\n\n    /// @notice Burns a batch of tokens.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\ninterface IERC721Deliverable {\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the metadata URI for a token identifier.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier.\n    /// @return uri The metadata URI for the token identifier.\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\ninterface IERC721Mintable {\n    /// @notice Unsafely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(address to, uint256 tokenId) external;\n\n    /// @notice Safely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721Receiver {\n    /// @notice Handles the receipt of an ERC721 token.\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\n    /// @dev Note: The ERC721 contract address is always the message sender.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous token owner.\n    /// @param tokenId The token identifier.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse.\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n// solhint-disable-next-line max-line-length\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \"./../errors/ERC721Errors.sol\";\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \"./../errors/ERC721MintableErrors.sol\";\nimport {ERC721BurntToken} from \"./../errors/ERC721MintableOnceErrors.sol\";\nimport {InconsistentArrayLengths} from \"./../../../CommonErrors.sol\";\nimport {Transfer, Approval, ApprovalForAll} from \"./../events/ERC721Events.sol\";\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {IERC721Burnable} from \"./../interfaces/IERC721Burnable.sol\";\nimport {IERC721Receiver} from \"./../interfaces/IERC721Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC721Storage {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => uint256) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) approvals;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC721.storage\")) - 1);\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n\n    // Single token approval flag\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\n\n    // Burnt token magic value\n    // This magic number is used as the owner's value to indicate that the token has been burnt\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    function initERC721BatchTransfer() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    function initERC721Metadata() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    function initERC721Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    function initERC721Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\n    function initERC721Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param sender The message sender.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        address ownerAddress = _tokenOwner(owner);\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\n        if (to == address(0)) {\n            if (_tokenHasApproval(owner)) {\n                // remove the approval bit if it is present\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\n            }\n        } else {\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\n            if (owner != ownerWithApprovalBit) {\n                // add the approval bit if it is not present\n                s.owners[tokenId] = ownerWithApprovalBit;\n            }\n            s.approvals[tokenId] = to;\n        }\n        emit Approval(ownerAddress, to, tokenId);\n    }\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = uint256(uint160(to));\n        if (from != to) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                --s.balances[from];\n                //  cannot overflow as supply cannot overflow\n                ++s.balances[to];\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, \"\");\n        }\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(from, to, tokenId);\n        }\n\n        if (from != to && length != 0) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                s.balances[from] -= length;\n                // cannot overflow as supply cannot overflow\n                s.balances[to] += length;\n            }\n        }\n    }\n\n    /// @notice Unsafely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mint(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            s.mint(recipients[i], tokenIds[i]);\n        }\n    }\n\n    /// @notice Unsafely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mintOnce(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens once.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients once.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC721MintToAddressZero();\n\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            unchecked {\n                ++s.balances[to];\n            }\n\n            emit Transfer(address(0), to, tokenId);\n        }\n    }\n\n    /// @notice Burns a token by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n\n        unchecked {\n            // cannot underflow as balance is verified through TOKEN ownership\n            --s.balances[from];\n        }\n        emit Transfer(from, address(0), tokenId);\n    }\n\n    /// @notice Burns a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n            emit Transfer(from, address(0), tokenId);\n        }\n\n        if (length != 0) {\n            unchecked {\n                s.balances[from] -= length;\n            }\n        }\n    }\n\n    /// @notice Gets the balance of an address.\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the owner of a token.\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token.\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        return _tokenOwner(owner);\n    }\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenHasApproval(owner)) {\n            return s.approvals[tokenId];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\n        return _tokenWasBurnt(s.owners[tokenId]);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param tokenId Identifier of the token transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\n        return address(uint160(owner));\n    }\n\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\n        return uint160(owner) != 0;\n    }\n\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\n        return owner == BURNT_TOKEN_OWNER_VALUE;\n    }\n\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../libraries/TokenMetadataStorage.sol\";\n\n/// @title TokenMetadataBase (proxiable version).\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\nabstract contract TokenMetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Gets the token name. E.g. \"My Token\".\n    /// @return tokenName The token name.\n    function name() public view virtual returns (string memory tokenName) {\n        return TokenMetadataStorage.layout().name();\n    }\n\n    /// @notice Gets the token symbol. E.g. \"TOK\".\n    /// @return tokenSymbol The token symbol.\n    function symbol() public view virtual returns (string memory tokenSymbol) {\n        return TokenMetadataStorage.layout().symbol();\n    }\n\n    /// @notice Gets the token metadata resolver address.\n    /// @return tokenMetadataResolver The token metadata resolver address.\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return TokenMetadataStorage.layout().metadataResolver();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ITokenMetadataResolver\n/// @notice Interface for Token Metadata Resolvers.\ninterface ITokenMetadataResolver {\n    /// @notice Gets the token metadata URI for a token.\n    /// @param tokenContract The token contract for which to retrieve the token URI.\n    /// @param tokenId The token identifier.\n    /// @return tokenURI The token metadata URI.\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary TokenMetadataStorage {\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        ITokenMetadataResolver tokenMetadataResolver;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.phase\")) - 1);\n\n    /// @notice Initializes the metadata storage (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function constructorInit(\n        Layout storage s,\n        string memory tokenName,\n        string memory tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Initializes the metadata storage (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function proxyInit(\n        Layout storage s,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Gets the name of the token.\n    /// @return tokenName The name of the token contract.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token.\n    /// @return tokenSymbol The symbol of the token contract.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the address of the token metadata resolver.\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return s.tokenMetadataResolver;\n    }\n\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\n    /// @param tokenContract The address of the token contract.\n    /// @param tokenId The ID of the token.\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/BCNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ERC721} from \"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol\";\nimport {ERC721Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\";\nimport {ERC721MintableOnce} from \"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol\";\nimport {ITokenMetadataResolver} from \"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\";\n\ncontract BCNFT is ContractOwnership, ERC721, ERC721Metadata, ERC721MintableOnce {\n    constructor(\n        ITokenMetadataResolver metadataResolver\n    ) ContractOwnership(_msgSender()) ERC721() ERC721Metadata(\"Bonding Curve NFT\", \"BCNFT\", metadataResolver) ERC721MintableOnce() {}\n}\n"},"contracts/BCNFTMinter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {IERC165} from \"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\";\nimport {IERC721Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\";\nimport {ERC721Minter} from \"./lib/minter/ERC721/ERC721Minter.sol\";\nimport {ICurve} from \"./lib/curve/interfaces/ICurve.sol\";\n\ncontract BCNFTMinter is ERC721Minter, Context {\n    using SafeERC20 for IERC20;\n\n    ICurve public curve;\n    IERC20 public feeToken;\n    address public feeReceiver;\n\n    error InvalidCurveContractType(address curveContract);\n\n    error ZeroAddress();\n\n    constructor(ICurve _curve, IERC20 _feeToken, address _feeReceiver, uint256 maxTokenId, IERC721Mintable token) ERC721Minter(maxTokenId, token) {\n        if (!IERC165(address(_curve)).supportsInterface(type(ICurve).interfaceId)) {\n            revert InvalidCurveContractType(address(_curve));\n        }\n        curve = _curve;\n        feeToken = _feeToken;\n        if (_feeReceiver == address(0)) {\n            revert ZeroAddress();\n        }\n        feeReceiver = _feeReceiver;\n    }\n\n    function mint(address to) public override {\n        uint256 price = curve.calculatePrice(currentTokenId(), 1);\n        feeToken.safeTransferFrom(_msgSender(), feeReceiver, price);\n        super.mint(to);\n    }\n}\n"},"contracts/BondingCurve.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {LinearCurve} from \"./lib/curve/LinearCurve.sol\";\n\ncontract BondingCurve is LinearCurve {\n    constructor(uint256 price, uint256 numerator, uint256 denominator) LinearCurve(_msgSender(), price, numerator, denominator) {}\n}\n"},"contracts/lib/curve/base/LinearCurveBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ICurve} from \"../interfaces/ICurve.sol\";\nimport {ILinearCurve} from \"../interfaces/ILinearCurve.sol\";\nimport {LinearCurveStorage} from \"../libraries/LinearCurveStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\n\n/// @title Linear Curve contract for calculating the price of a token.\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract LinearCurveBase is ICurve, ILinearCurve, Context {\n    using LinearCurveStorage for LinearCurveStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc ILinearCurve\n    function setInitialPrice(uint256 price) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        LinearCurveStorage.layout().setInitialPrice(price, operator);\n    }\n\n    /// @inheritdoc ILinearCurve\n    function setSlopeNumerator(uint256 numerator) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        LinearCurveStorage.layout().setSlopeNumerator(numerator, operator);\n    }\n\n    /// @inheritdoc ILinearCurve\n    function setSlopeDenominator(uint256 denominator) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        LinearCurveStorage.layout().setSlopeDenominator(denominator, operator);\n    }\n\n    /// @inheritdoc ICurve\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price) {\n        return LinearCurveStorage.layout().calculatePrice(totalSupply, amount);\n    }\n\n    /// @inheritdoc ILinearCurve\n    function initialPrice() external view returns (uint256 price) {\n        return LinearCurveStorage.layout().initialPrice();\n    }\n\n    /// @inheritdoc ILinearCurve\n    function slopeNumerator() external view returns (uint256 numerator) {\n        return LinearCurveStorage.layout().slopeNumerator();\n    }\n\n    /// @inheritdoc ILinearCurve\n    function slopeDenominator() external view returns (uint256 denominator) {\n        return LinearCurveStorage.layout().slopeDenominator();\n    }\n}\n"},"contracts/lib/curve/errors/LinearCurveErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when the numerator of the linear curve is zero.\nerror LinearCurveZeroNumerator();\n\n/// @notice Thrown when the denominator of the linear curve is zero.\nerror LinearCurveZeroDenominator();\n"},"contracts/lib/curve/events/LinearCurveEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Emitted when the initial price of the curve is set.\n/// @param price The initial price.\n/// @param operator The address setting the initial price.\nevent InitialPriceSet(uint256 indexed price, address indexed operator);\n\n/// @notice Emitted when the slope numerator of the curve is set.\n/// @param numerator The slope numerator.\n/// @param operator The address setting the slope numerator.\nevent SlopeNumeratorSet(uint256 indexed numerator, address indexed operator);\n\n/// @notice Emitted when the slope denominator of the curve is set.\n/// @param denominator The slope denominator.\n/// @param operator The address setting the slope denominator.\nevent SlopeDenominatorSet(uint256 indexed denominator, address indexed operator);\n"},"contracts/lib/curve/interfaces/ICurve.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title Curve interface for calculating the price of a token.\n/// @dev The curve is defined by the price function `calculatePrice`.\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\ninterface ICurve {\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\n    /// @dev The price is calculated based on bonding curve mathematical function.\n    /// @param totalSupply The total supply of the tokens.\n    /// @param amount The amount of tokens to mint.\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\n}\n"},"contracts/lib/curve/interfaces/ILinearCurve.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title Linear Curve interface for calculating the price of a token.\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\ninterface ILinearCurve {\n    /// @notice Returns the initial price of the curve.\n    /// @return price The initial price.\n    function initialPrice() external view returns (uint256 price);\n\n    /// @notice Returns the slope numerator of the curve.\n    /// @return numerator The slope numerator.\n    function slopeNumerator() external view returns (uint256 numerator);\n\n    /// @notice Returns the slope denominator of the curve.\n    /// @return denominator The slope denominator.\n    function slopeDenominator() external view returns (uint256 denominator);\n\n    /// @notice Sets the initial price of the curve.\n    /// @dev Emits a {InitialPriceSet} event.\n    /// @param price The initial price.\n    function setInitialPrice(uint256 price) external;\n\n    /// @notice Sets the slope numerator of the curve.\n    /// @dev Reverts if `numerator` is zero.\n    /// @dev Emits a {SlopeNumeratorSet} event.\n    /// @param numerator The slope numerator.\n    function setSlopeNumerator(uint256 numerator) external;\n\n    /// @notice Sets the slope denominator of the curve.\n    /// @dev Reverts if `denominator` is zero.\n    /// @dev Emits a {SlopeDenominatorSet} event.\n    /// @param denominator The slope denominator.\n    function setSlopeDenominator(uint256 denominator) external;\n}\n"},"contracts/lib/curve/libraries/LinearCurveStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {InterfaceDetectionStorage} from \"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {ProxyInitialization} from \"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\";\nimport {ICurve} from \"../interfaces/ICurve.sol\";\nimport {ILinearCurve} from \"../interfaces/ILinearCurve.sol\";\nimport {InitialPriceSet, SlopeNumeratorSet, SlopeDenominatorSet} from \"../events/LinearCurveEvents.sol\";\nimport {LinearCurveZeroNumerator, LinearCurveZeroDenominator} from \"../errors/LinearCurveErrors.sol\";\n\nlibrary LinearCurveStorage {\n    using LinearCurveStorage for LinearCurveStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        uint256 price;\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"yura2100.curve.LinearCurve.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"yura2100.curve.LinearCurve.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {InitialPriceSet}.\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n    /// @param price The initial price.\n    /// @param numerator The slope numerator.\n    /// @param denominator The slope denominator.\n    /// @param operator The address of the operator performing the initialization.\n    function constructorInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\n        s.setInitialPrice(price, operator);\n        s.setSlopeNumerator(numerator, operator);\n        s.setSlopeDenominator(denominator, operator);\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ICurve).interfaceId, true);\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ILinearCurve).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {InitialPriceSet}.\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n    /// @param price The initial price.\n    /// @param numerator The slope numerator.\n    /// @param denominator The slope denominator.\n    function proxyInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(price, numerator, denominator, operator);\n    }\n\n    /// @notice Sets the initial price of the curve.\n    /// @dev Emits a {InitialPriceSet} event.\n    /// @param price The initial price.\n    /// @param operator The address of the operator performing the operation.\n    function setInitialPrice(Layout storage s, uint256 price, address operator) internal {\n        s.price = price;\n        emit InitialPriceSet(price, operator);\n    }\n\n    /// @notice Sets the slope numerator of the curve.\n    /// @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\n    /// @dev Emits a {SlopeNumeratorSet} event.\n    /// @param numerator The slope numerator.\n    /// @param operator The address of the operator performing the operation.\n    function setSlopeNumerator(Layout storage s, uint256 numerator, address operator) internal {\n        if (numerator == 0) {\n            revert LinearCurveZeroNumerator();\n        }\n\n        s.numerator = numerator;\n        emit SlopeNumeratorSet(numerator, operator);\n    }\n\n    /// @notice Sets the slope denominator of the curve.\n    /// @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\n    /// @dev Emits a {SlopeDenominatorSet} event.\n    /// @param denominator The slope denominator.\n    /// @param operator The address of the operator performing the operation.\n    function setSlopeDenominator(Layout storage s, uint256 denominator, address operator) internal {\n        if (denominator == 0) {\n            revert LinearCurveZeroDenominator();\n        }\n\n        s.denominator = denominator;\n        emit SlopeDenominatorSet(denominator, operator);\n    }\n\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\n    /// @param totalSupply The total supply of the tokens.\n    /// @param amount The amount to mint.\n    /// @return price The price of the token.\n    function calculatePrice(Layout storage s, uint256 totalSupply, uint256 amount) internal view returns (uint256 price) {\n        uint256 newSupply = totalSupply + amount - 1;\n        return s.price + (newSupply * s.numerator) / s.denominator;\n    }\n\n    /// @notice Returns the initial price of the curve.\n    /// @return price The initial price.\n    function initialPrice(Layout storage s) internal view returns (uint256 price) {\n        return s.price;\n    }\n\n    /// @notice Returns the slope numerator of the curve.\n    /// @return numerator The slope numerator.\n    function slopeNumerator(Layout storage s) internal view returns (uint256 numerator) {\n        return s.numerator;\n    }\n\n    /// @notice Returns the slope denominator of the curve.\n    /// @return denominator The slope denominator.\n    function slopeDenominator(Layout storage s) internal view returns (uint256 denominator) {\n        return s.denominator;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"contracts/lib/curve/LinearCurve.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {InterfaceDetection} from \"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {LinearCurveBase} from \"./base/LinearCurveBase.sol\";\nimport {LinearCurveStorage} from \"./libraries/LinearCurveStorage.sol\";\n\n/// @title Linear Curve contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract LinearCurve is LinearCurveBase, InterfaceDetection, ContractOwnership {\n    using LinearCurveStorage for LinearCurveStorage.Layout;\n\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator.\n    /// @notice Initializes the contract ownership with `initialOwner` as the initial contract owner.\n    /// @dev Emits an {InitialPriceSet}.\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n    /// @param initialOwner The address to receive the contract ownership.\n    /// @param price The initial price.\n    /// @param numerator The slope numerator.\n    /// @param denominator The slope denominator.\n    constructor(address initialOwner, uint256 price, uint256 numerator, uint256 denominator) ContractOwnership(initialOwner) {\n        LinearCurveStorage.layout().constructorInit(price, numerator, denominator, _msgSender());\n    }\n}\n"},"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721Minter} from \"../interfaces/IERC721Minter.sol\";\nimport {ERC721MinterStorage} from \"../libraries/ERC721MinterStorage.sol\";\n\n/// @title ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC721MinterBase is IERC721Minter {\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\n\n    /// @inheritdoc IERC721Minter\n    function mint(address to) public virtual {\n        ERC721MinterStorage.layout().mint(to);\n    }\n\n    /// @inheritdoc IERC721Minter\n    function currentTokenId() public view returns (uint256 tokenId) {\n        return ERC721MinterStorage.layout().currentId();\n    }\n\n    /// @inheritdoc IERC721Minter\n    function maxTokenId() public view returns (uint256 tokenId) {\n        return ERC721MinterStorage.layout().maxId();\n    }\n}\n"},"contracts/lib/minter/ERC721/ERC721Minter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {InterfaceDetection} from \"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\";\nimport {IERC721Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\";\nimport {ERC721MinterBase} from \"./base/ERC721MinterBase.sol\";\nimport {ERC721MinterStorage} from \"./libraries/ERC721MinterStorage.sol\";\n\n/// @title ERC721 Minter contract (immutable version).\nabstract contract ERC721Minter is ERC721MinterBase, InterfaceDetection {\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\n\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\n    /// @param maxTokenId The maximum token ID that can be minted.\n    /// @param token The ERC721 token contract.\n    constructor(uint256 maxTokenId, IERC721Mintable token) {\n        ERC721MinterStorage.layout().constructorInit(maxTokenId, token);\n    }\n}\n"},"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Thrown when the token ID is zero.\nerror ERC721MinterZeroMaxTokenId();\n\n/// @notice Thrown when the token address is zero.\nerror ERC721MinterZeroTokenAddress();\n\n/// @notice Thrown when the token contract interface id does not supported.\nerror ERC721MinterUnsupportedContractType(address tokenContract);\n\n/// @notice Thrown when the maximum token ID is exceeded.\nerror ERC721MinterMaxTokenIdExceeded();\n"},"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title ERC721 Minter interface for minting ERC721 tokens.\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\ninterface IERC721Minter {\n    /// @notice Returns the current token ID.\n    /// @return tokenId The current token ID.\n    function currentTokenId() external view returns (uint256 tokenId);\n\n    /// @notice Returns the maximum token ID.\n    /// @return tokenId The maximum token ID.\n    function maxTokenId() external view returns (uint256 tokenId);\n\n    /// @notice Mints a token to the specified address.\n    /// @param to The address to receive the token.\n    function mint(address to) external;\n}\n"},"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n// solhint-disable-next-line max-line-length\nimport {ERC721MinterZeroMaxTokenId, ERC721MinterUnsupportedContractType, ERC721MinterMaxTokenIdExceeded, ERC721MinterZeroTokenAddress} from \"../errors/ERC721MinterErrors.sol\";\nimport {InterfaceDetectionStorage} from \"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {IERC165} from \"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\";\nimport {IERC721Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\";\nimport {ProxyInitialization} from \"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\";\nimport {IERC721Minter} from \"../interfaces/IERC721Minter.sol\";\n\nlibrary ERC721MinterStorage {\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        uint256 currentTokenId;\n        uint256 maxTokenId;\n        IERC721Mintable token;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"yura2100.token.ERC721.ERC721Minter.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"yura2100.token.ERC721.ERC721Minter.phase\")) - 1);\n\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\n    /// @param maxTokenId The maximum token ID that can be minted.\n    /// @param token The ERC721 token contract.\n    function constructorInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\n        if (maxTokenId == 0) {\n            revert ERC721MinterZeroMaxTokenId();\n        }\n        if (address(token) == address(0)) {\n            revert ERC721MinterZeroTokenAddress();\n        }\n\n        if (!IERC165(address(token)).supportsInterface(type(IERC721Mintable).interfaceId)) {\n            revert ERC721MinterUnsupportedContractType(address(token));\n        }\n        s.maxTokenId = maxTokenId;\n        s.token = token;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Minter).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @param maxTokenId The maximum token ID that can be minted.\n    /// @param token The ERC721 token contract.\n    function proxyInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(maxTokenId, token);\n    }\n\n    /// @notice Mints a token to the specified address.\n    /// @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\n    /// @param to The address to which the token will be minted.\n    function mint(Layout storage s, address to) internal {\n        uint256 nextId = s.currentTokenId + 1;\n        if (nextId > s.maxTokenId) {\n            revert ERC721MinterMaxTokenIdExceeded();\n        }\n        s.token.mint(to, nextId);\n        s.currentTokenId = nextId;\n    }\n\n    /// @notice Returns the current token ID.\n    /// @return tokenId The current token ID.\n    function currentId(Layout storage s) internal view returns (uint256 tokenId) {\n        return s.currentTokenId;\n    }\n\n    /// @notice Returns the maximum token ID.\n    /// @return tokenId The maximum token ID.\n    function maxId(Layout storage s) internal view returns (uint256 tokenId) {\n        return s.maxTokenId;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[22],"AccessControlBase":[179],"ContractOwnership":[55]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":180,"src":"58:63:1","symbolAliases":[{"foreign":{"id":13,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"66:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":56,"src":"122:58:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":18,"name":"AccessControlBase","nameLocations":["384:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"384:17:1"},"id":19,"nodeType":"InheritanceSpecifier","src":"384:17:1"},{"baseName":{"id":20,"name":"ContractOwnership","nameLocations":["403:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"403:17:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"403:17:1"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"182:167:1","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":22,"linearizedBaseContracts":[22,55,892,909,227,179,4737,341,325],"name":"AccessControl","nameLocation":"367:13:1","nodeType":"ContractDefinition","nodes":[],"scope":23,"src":"349:74:1","usedErrors":[236,259,897],"usedEvents":[282,291,300]}],"src":"32:392:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[55],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[862],"InterfaceDetection":[892]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":863,"src":"58:82:2","symbolAliases":[{"foreign":{"id":25,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":28,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":228,"src":"141:71:2","symbolAliases":[{"foreign":{"id":27,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":893,"src":"213:77:2","symbolAliases":[{"foreign":{"id":29,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":32,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":227,"src":"549:21:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":34,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"572:18:2"},"id":35,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":55,"linearizedBaseContracts":[55,892,909,227,4737,341],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":39,"libraryName":{"id":36,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"632:31:2"},"referencedDeclaration":635,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":49,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":705,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":54,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":55,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":56,"src":"510:570:2","usedErrors":[259,897],"usedEvents":[300]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[179],"AccessControlStorage":[604],"Context":[4737],"ContractOwnershipStorage":[862],"IAccessControl":[325]},"id":180,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":326,"src":"58:76:3","symbolAliases":[{"foreign":{"id":58,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"66:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":61,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":605,"src":"135:77:3","symbolAliases":[{"foreign":{"id":60,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"143:20:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":63,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":863,"src":"213:85:3","symbolAliases":[{"foreign":{"id":62,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"221:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":4738,"src":"299:66:3","symbolAliases":[{"foreign":{"id":64,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"307:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":67,"name":"IAccessControl","nameLocations":["632:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"632:14:3"},"id":68,"nodeType":"InheritanceSpecifier","src":"632:14:3"},{"baseName":{"id":69,"name":"Context","nameLocations":["648:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"648:7:3"},"id":70,"nodeType":"InheritanceSpecifier","src":"648:7:3"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"367:226:3","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":179,"linearizedBaseContracts":[179,4737,325],"name":"AccessControlBase","nameLocation":"611:17:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":74,"libraryName":{"id":71,"name":"AccessControlStorage","nameLocations":["668:20:3"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"668:20:3"},"nodeType":"UsingForDirective","src":"662:59:3","typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"AccessControlStorage.Layout","nameLocations":["693:20:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"693:27:3"},"referencedDeclaration":369,"src":"693:27:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":78,"libraryName":{"id":75,"name":"ContractOwnershipStorage","nameLocations":["732:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"732:24:3"},"nodeType":"UsingForDirective","src":"726:67:3","typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:3","786:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"761:31:3"},"referencedDeclaration":635,"src":"761:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":109,"nodeType":"Block","src":"1175:198:3","statements":[{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"operator","nameLocation":"1193:8:3","nodeType":"VariableDeclaration","scope":109,"src":"1185:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":90,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1204:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:3"},{"expression":{"arguments":[{"id":96,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1283:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":91,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1226:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1226:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1226:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"ExpressionStatement","src":"1226:66:3"},{"expression":{"arguments":[{"id":104,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1342:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":105,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":106,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1357:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":99,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1302:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1302:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:3","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":420,"src":"1302:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":108,"nodeType":"ExpressionStatement","src":"1302:64:3"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"799:312:3","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":110,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"role","nameLocation":"1143:4:3","nodeType":"VariableDeclaration","scope":110,"src":"1135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":80,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"account","nameLocation":"1157:7:3","nodeType":"VariableDeclaration","scope":110,"src":"1149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1175:0:3"},"scope":179,"src":"1116:257:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":141,"nodeType":"Block","src":"1754:199:3","statements":[{"assignments":[119],"declarations":[{"constant":false,"id":119,"mutability":"mutable","name":"operator","nameLocation":"1772:8:3","nodeType":"VariableDeclaration","scope":141,"src":"1764:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":122,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":120,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1783:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:3"},{"expression":{"arguments":[{"id":128,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1862:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":123,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1805:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1805:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1805:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1805:66:3"},{"expression":{"arguments":[{"id":136,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1922:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":137,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":138,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1937:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":131,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1881:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1881:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:3","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":457,"src":"1881:40:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"1881:65:3"}]},"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"1379:310:3","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":142,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:3","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"role","nameLocation":"1722:4:3","nodeType":"VariableDeclaration","scope":142,"src":"1714:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"1736:7:3","nodeType":"VariableDeclaration","scope":142,"src":"1728:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:3"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"1754:0:3"},"scope":179,"src":"1694:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[314],"body":{"id":158,"nodeType":"Block","src":"2039:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":153,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"2092:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":155,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2106:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":148,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2049:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"2049:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:3","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":492,"src":"2049:42:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"ExpressionStatement","src":"2049:62:3"}]},"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"1959:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":159,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:3","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"role","nameLocation":"2024:4:3","nodeType":"VariableDeclaration","scope":159,"src":"2016:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:3"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2039:0:3"},"scope":179,"src":"1994:124:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[324],"body":{"id":177,"nodeType":"Block","src":"2245:76:3","statements":[{"expression":{"arguments":[{"id":173,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":174,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":169,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2262:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"2262:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:3","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"2262:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":168,"id":176,"nodeType":"Return","src":"2255:59:3"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"2124:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":178,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:3","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"role","nameLocation":"2184:4:3","nodeType":"VariableDeclaration","scope":178,"src":"2176:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"account","nameLocation":"2198:7:3","nodeType":"VariableDeclaration","scope":178,"src":"2190:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:3"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:3","nodeType":"VariableDeclaration","scope":178,"src":"2230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":166,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:3"},"scope":179,"src":"2159:162:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":180,"src":"593:1730:3","usedErrors":[236,259],"usedEvents":[282,291]}],"src":"32:2292:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[4737],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[862],"IERC173":[341]},"id":228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":181,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":342,"src":"58:52:4","symbolAliases":[{"foreign":{"id":182,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"66:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":185,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":863,"src":"111:85:4","symbolAliases":[{"foreign":{"id":184,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"119:24:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":187,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":4738,"src":"197:66:4","symbolAliases":[{"foreign":{"id":186,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"205:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":189,"name":"IERC173","nameLocations":["586:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"586:7:4"},"id":190,"nodeType":"InheritanceSpecifier","src":"586:7:4"},{"baseName":{"id":191,"name":"Context","nameLocations":["595:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"595:7:4"},"id":192,"nodeType":"InheritanceSpecifier","src":"595:7:4"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"265:278:4","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":227,"linearizedBaseContracts":[227,4737,341],"name":"ContractOwnershipBase","nameLocation":"561:21:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":196,"libraryName":{"id":193,"name":"ContractOwnershipStorage","nameLocations":["615:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"615:24:4"},"nodeType":"UsingForDirective","src":"609:67:4","typeName":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:4","669:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"644:31:4"},"referencedDeclaration":635,"src":"644:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[340],"body":{"id":208,"nodeType":"Block","src":"765:65:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":202,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"782:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"782:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":782,"src":"782:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":201,"id":207,"nodeType":"Return","src":"775:48:4"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"682:23:4","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:4","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"724:2:4"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":209,"src":"756:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:4"},"scope":227,"src":"710:120:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[334],"body":{"id":225,"nodeType":"Block","src":"924:92:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"986:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1000:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":215,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"934:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"934:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:4","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":769,"src":"934:51:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"934:75:4"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"836:23:4","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":226,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:4","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:4","nodeType":"VariableDeclaration","scope":226,"src":"891:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:4"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"924:0:4"},"scope":227,"src":"864:152:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":228,"src":"543:475:4","usedErrors":[259],"usedEvents":[300]}],"src":"32:987:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245]},"id":246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":229,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"58:165:5","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":236,"name":"NotRoleHolder","nameLocation":"229:13:5","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"role","nameLocation":"251:4:5","nodeType":"VariableDeclaration","scope":236,"src":"243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"account","nameLocation":"265:7:5","nodeType":"VariableDeclaration","scope":236,"src":"257:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:5"},"src":"223:51:5"},{"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"276:238:5","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":245,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:5","nodeType":"ErrorDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:5","nodeType":"VariableDeclaration","scope":245,"src":"548:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"580:4:5","nodeType":"VariableDeclaration","scope":245,"src":"572:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"account","nameLocation":"594:7:5","nodeType":"VariableDeclaration","scope":245,"src":"586:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:5"},"src":"514:89:5"}],"src":"32:572:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[252]},"id":253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":247,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"58:128:6","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":252,"name":"TargetIsNotAContract","nameLocation":"192:20:6","nodeType":"ErrorDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:6","nodeType":"VariableDeclaration","scope":252,"src":"213:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:6"},"src":"186:51:6"}],"src":"32:206:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[259],"NotPendingContractOwner":[264],"NotTargetContractOwner":[271]},"id":272,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":254,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:7"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"58:130:7","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":259,"name":"NotContractOwner","nameLocation":"194:16:7","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"219:7:7","nodeType":"VariableDeclaration","scope":259,"src":"211:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:7"},"src":"188:40:7"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"230:138:7","text":"@notice Thrown when an account is not the pending contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"61848752","id":264,"name":"NotPendingContractOwner","nameLocation":"374:23:7","nodeType":"ErrorDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"account","nameLocation":"406:7:7","nodeType":"VariableDeclaration","scope":264,"src":"398:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"397:17:7"},"src":"368:47:7"},{"documentation":{"id":265,"nodeType":"StructuredDocumentation","src":"417:194:7","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":271,"name":"NotTargetContractOwner","nameLocation":"617:22:7","nodeType":"ErrorDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"targetContract","nameLocation":"648:14:7","nodeType":"VariableDeclaration","scope":271,"src":"640:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":266,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"account","nameLocation":"672:7:7","nodeType":"VariableDeclaration","scope":271,"src":"664:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:41:7"},"src":"611:70:7"}],"src":"32:650:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","exportedSymbols":{"RoleGranted":[282],"RoleRevoked":[291]},"id":292,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":273,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:8"},{"anonymous":false,"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"58:223:8","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":282,"name":"RoleGranted","nameLocation":"287:11:8","nodeType":"EventDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"307:4:8","nodeType":"VariableDeclaration","scope":282,"src":"299:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"321:7:8","nodeType":"VariableDeclaration","scope":282,"src":"313:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"338:8:8","nodeType":"VariableDeclaration","scope":282,"src":"330:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"298:49:8"},"src":"281:67:8"},{"anonymous":false,"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"350:225:8","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":291,"name":"RoleRevoked","nameLocation":"581:11:8","nodeType":"EventDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"601:4:8","nodeType":"VariableDeclaration","scope":291,"src":"593:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":287,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"615:7:8","nodeType":"VariableDeclaration","scope":291,"src":"607:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":289,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"632:8:8","nodeType":"VariableDeclaration","scope":291,"src":"624:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:49:8"},"src":"575:67:8"}],"src":"32:611:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferPending":[305],"OwnershipTransferred":[300]},"id":306,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":293,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:9"},{"anonymous":false,"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"58:155:9","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":300,"name":"OwnershipTransferred","nameLocation":"219:20:9","nodeType":"EventDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:9","nodeType":"VariableDeclaration","scope":300,"src":"240:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:9","nodeType":"VariableDeclaration","scope":300,"src":"271:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:9"},"src":"213:84:9"},{"anonymous":false,"documentation":{"id":301,"nodeType":"StructuredDocumentation","src":"299:121:9","text":"@notice Emitted when a new contract owner is pending.\n @param pendingOwner the address of the new contract owner."},"eventSelector":"fcf6b9a1f453b7c06ba4f44b1f8c38b02e8b90a7bd35bd0d5c43e2deb547f568","id":305,"name":"OwnershipTransferPending","nameLocation":"426:24:9","nodeType":"EventDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"467:12:9","nodeType":"VariableDeclaration","scope":305,"src":"451:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:30:9"},"src":"420:61:9"}],"src":"32:450:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[325]},"id":326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":307,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"58:59:10","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":325,"linearizedBaseContracts":[325],"name":"IAccessControl","nameLocation":"127:14:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"148:182:10","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"344:12:10","nodeType":"FunctionDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"role","nameLocation":"365:4:10","nodeType":"VariableDeclaration","scope":314,"src":"357:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:14:10"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[],"src":"379:0:10"},"scope":325,"src":"335:45:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"386:173:10","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":324,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"573:7:10","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"role","nameLocation":"589:4:10","nodeType":"VariableDeclaration","scope":324,"src":"581:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"account","nameLocation":"603:7:10","nodeType":"VariableDeclaration","scope":324,"src":"595:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:31:10"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"hasRole_","nameLocation":"640:8:10","nodeType":"VariableDeclaration","scope":324,"src":"635:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":321,"name":"bool","nodeType":"ElementaryTypeName","src":"635:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"634:15:10"},"scope":325,"src":"564:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":326,"src":"117:535:10","usedErrors":[],"usedEvents":[]}],"src":"32:621:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[341]},"id":342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":327,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"58:182:11","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":341,"linearizedBaseContracts":[341],"name":"IERC173","nameLocation":"250:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":329,"nodeType":"StructuredDocumentation","src":"264:342:11","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":334,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:11","nodeType":"FunctionDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:11","nodeType":"VariableDeclaration","scope":334,"src":"638:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:11"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"664:0:11"},"scope":341,"src":"611:54:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":335,"nodeType":"StructuredDocumentation","src":"671:116:11","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":340,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:11","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[],"src":"806:2:11"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:11","nodeType":"VariableDeclaration","scope":340,"src":"832:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:11"},"scope":341,"src":"792:63:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":342,"src":"240:617:11","usedErrors":[],"usedEvents":[]}],"src":"32:826:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[604],"Address":[4707],"IAccessControl":[325],"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245],"RoleGranted":[282],"RoleRevoked":[291],"TargetIsNotAContract":[252]},"id":605,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":343,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":346,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":246,"src":"58:95:12","symbolAliases":[{"foreign":{"id":344,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"66:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":345,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"81:27:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":348,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":253,"src":"154:60:12","symbolAliases":[{"foreign":{"id":347,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"162:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","file":"./../events/AccessControlEvents.sol","id":351,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":292,"src":"215:77:12","symbolAliases":[{"foreign":{"id":349,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"223:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":350,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"236:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":353,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":326,"src":"293:66:12","symbolAliases":[{"foreign":{"id":352,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"301:14:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":355,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":4708,"src":"360:66:12","symbolAliases":[{"foreign":{"id":354,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"368:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":604,"linearizedBaseContracts":[604],"name":"AccessControlStorage","nameLocation":"436:20:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":358,"libraryName":{"id":356,"name":"Address","nameLocations":["469:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"469:7:12"},"nodeType":"UsingForDirective","src":"463:26:12","typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"481:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":362,"libraryName":{"id":359,"name":"AccessControlStorage","nameLocations":["500:20:12"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"500:20:12"},"nodeType":"UsingForDirective","src":"494:59:12","typeName":{"id":361,"nodeType":"UserDefinedTypeName","pathNode":{"id":360,"name":"AccessControlStorage.Layout","nameLocations":["525:20:12","546:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"525:27:12"},"referencedDeclaration":369,"src":"525:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":369,"members":[{"constant":false,"id":368,"mutability":"mutable","name":"roles","nameLocation":"628:5:12","nodeType":"VariableDeclaration","scope":369,"src":"583:50:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":367,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"591:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"583:44:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":366,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"602:24:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":365,"name":"bool","nodeType":"ElementaryTypeName","src":"621:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"566:6:12","nodeType":"StructDefinition","scope":604,"src":"559:81:12","visibility":"public"},{"constant":true,"id":382,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"672:19:12","nodeType":"VariableDeclaration","scope":604,"src":"646:124:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"720:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":375,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"710:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"710:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"702:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:12","typeDescriptions":{}}},"id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"702:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"702:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"694:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"694:7:12","typeDescriptions":{}}},"id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"694:76:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":419,"nodeType":"Block","src":"1246:156:12","statements":[{"condition":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1260:25:12","subExpression":{"arguments":[{"id":397,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1271:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":398,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1277:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":395,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1261:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1263:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1261:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1261:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":418,"nodeType":"IfStatement","src":"1256:140:12","trueBody":{"id":417,"nodeType":"Block","src":"1287:109:12","statements":[{"expression":{"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":401,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1301:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1303:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"1301:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":406,"indexExpression":{"id":403,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1309:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1301:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":407,"indexExpression":{"id":404,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1315:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1301:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1326:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1301:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":410,"nodeType":"ExpressionStatement","src":"1301:29:12"},{"eventCall":{"arguments":[{"id":412,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1361:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":413,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1367:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":414,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"1376:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":411,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1349:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"EmitStatement","src":"1344:41:12"}]}}]},"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"777:369:12","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":420,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1160:9:12","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"s","nameLocation":"1185:1:12","nodeType":"VariableDeclaration","scope":420,"src":"1170:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":385,"nodeType":"UserDefinedTypeName","pathNode":{"id":384,"name":"Layout","nameLocations":["1170:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"1170:6:12"},"referencedDeclaration":369,"src":"1170:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"role","nameLocation":"1196:4:12","nodeType":"VariableDeclaration","scope":420,"src":"1188:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1188:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"account","nameLocation":"1210:7:12","nodeType":"VariableDeclaration","scope":420,"src":"1202:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"operator","nameLocation":"1227:8:12","nodeType":"VariableDeclaration","scope":420,"src":"1219:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"1219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1169:67:12"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[],"src":"1246:0:12"},"scope":604,"src":"1151:251:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":456,"nodeType":"Block","src":"1876:156:12","statements":[{"condition":{"arguments":[{"id":435,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1900:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":436,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1906:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":433,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"1890:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1892:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1890:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":455,"nodeType":"IfStatement","src":"1886:140:12","trueBody":{"id":454,"nodeType":"Block","src":"1916:110:12","statements":[{"expression":{"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":438,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"1930:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1932:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"1930:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":443,"indexExpression":{"id":440,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1938:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1930:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":444,"indexExpression":{"id":441,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1944:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1930:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1955:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1930:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":447,"nodeType":"ExpressionStatement","src":"1930:30:12"},{"eventCall":{"arguments":[{"id":449,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1991:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":450,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1997:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":451,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"2006:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":448,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"1979:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":453,"nodeType":"EmitStatement","src":"1974:41:12"}]}}]},"documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"1408:367:12","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":457,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1789:10:12","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"s","nameLocation":"1815:1:12","nodeType":"VariableDeclaration","scope":457,"src":"1800:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":423,"nodeType":"UserDefinedTypeName","pathNode":{"id":422,"name":"Layout","nameLocations":["1800:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"1800:6:12"},"referencedDeclaration":369,"src":"1800:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"role","nameLocation":"1826:4:12","nodeType":"VariableDeclaration","scope":457,"src":"1818:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1818:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"account","nameLocation":"1840:7:12","nodeType":"VariableDeclaration","scope":457,"src":"1832:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"1832:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"operator","nameLocation":"1857:8:12","nodeType":"VariableDeclaration","scope":457,"src":"1849:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1799:67:12"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"1876:0:12"},"scope":604,"src":"1780:252:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":491,"nodeType":"Block","src":"2367:134:12","statements":[{"expression":{"arguments":[{"id":471,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2394:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":472,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2400:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":468,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2377:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2379:14:12","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"2377:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2377:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"ExpressionStatement","src":"2377:30:12"},{"expression":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":475,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2417:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2419:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"2417:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":480,"indexExpression":{"id":477,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2425:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2417:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":481,"indexExpression":{"id":478,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2431:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2417:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2441:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2417:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":484,"nodeType":"ExpressionStatement","src":"2417:29:12"},{"eventCall":{"arguments":[{"id":486,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2473:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":487,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2479:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":488,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2487:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":485,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"2461:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2461:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"EmitStatement","src":"2456:38:12"}]},"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"2038:245:12","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":492,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2297:12:12","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"s","nameLocation":"2325:1:12","nodeType":"VariableDeclaration","scope":492,"src":"2310:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":460,"nodeType":"UserDefinedTypeName","pathNode":{"id":459,"name":"Layout","nameLocations":["2310:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"2310:6:12"},"referencedDeclaration":369,"src":"2310:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"sender","nameLocation":"2336:6:12","nodeType":"VariableDeclaration","scope":492,"src":"2328:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":462,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"role","nameLocation":"2352:4:12","nodeType":"VariableDeclaration","scope":492,"src":"2344:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2344:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2309:48:12"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[],"src":"2367:0:12"},"scope":604,"src":"2288:213:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":512,"nodeType":"Block","src":"2789:46:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":505,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"2806:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2808:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"2806:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":508,"indexExpression":{"id":507,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"2814:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":510,"indexExpression":{"id":509,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2820:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":504,"id":511,"nodeType":"Return","src":"2799:29:12"}]},"documentation":{"id":493,"nodeType":"StructuredDocumentation","src":"2507:173:12","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":513,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2694:7:12","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"s","nameLocation":"2717:1:12","nodeType":"VariableDeclaration","scope":513,"src":"2702:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"Layout","nameLocations":["2702:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"2702:6:12"},"referencedDeclaration":369,"src":"2702:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"role","nameLocation":"2728:4:12","nodeType":"VariableDeclaration","scope":513,"src":"2720:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2720:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"account","nameLocation":"2742:7:12","nodeType":"VariableDeclaration","scope":513,"src":"2734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2701:49:12"},"returnParameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"hasRole_","nameLocation":"2779:8:12","nodeType":"VariableDeclaration","scope":513,"src":"2774:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":502,"name":"bool","nodeType":"ElementaryTypeName","src":"2774:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2773:15:12"},"scope":604,"src":"2685:150:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":542,"nodeType":"Block","src":"3280:164:12","statements":[{"condition":{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3294:28:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":525,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3295:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3310:10:12","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"3295:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3295:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":533,"nodeType":"IfStatement","src":"3290:77:12","trueBody":{"errorCall":{"arguments":[{"id":530,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3352:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":529,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3331:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3331:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":532,"nodeType":"RevertStatement","src":"3324:43:12"}},{"expression":{"arguments":[{"id":538,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"3423:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":539,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"3429:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":535,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3399:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":534,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"3384:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$325_$","typeString":"type(contract IAccessControl)"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$325","typeString":"contract IAccessControl"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3415:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":324,"src":"3384:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":524,"id":541,"nodeType":"Return","src":"3377:60:12"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"2841:296:12","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":543,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3151:21:12","nodeType":"FunctionDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"targetContract","nameLocation":"3181:14:12","nodeType":"VariableDeclaration","scope":543,"src":"3173:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":515,"name":"address","nodeType":"ElementaryTypeName","src":"3173:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"role","nameLocation":"3205:4:12","nodeType":"VariableDeclaration","scope":543,"src":"3197:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3197:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"account","nameLocation":"3219:7:12","nodeType":"VariableDeclaration","scope":543,"src":"3211:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3172:55:12"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3256:22:12","nodeType":"VariableDeclaration","scope":543,"src":"3251:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":522,"name":"bool","nodeType":"ElementaryTypeName","src":"3251:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3250:29:12"},"scope":604,"src":"3142:302:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":566,"nodeType":"Block","src":"3732:83:12","statements":[{"condition":{"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3746:25:12","subExpression":{"arguments":[{"id":556,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"3757:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":557,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3763:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":554,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"3747:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3749:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"3747:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3747:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":565,"nodeType":"IfStatement","src":"3742:66:12","trueBody":{"errorCall":{"arguments":[{"id":561,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"3794:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":562,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3800:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":560,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"3780:13:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3780:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":564,"nodeType":"RevertStatement","src":"3773:35:12"}}]},"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"3450:190:12","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3654:14:12","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"s","nameLocation":"3684:1:12","nodeType":"VariableDeclaration","scope":567,"src":"3669:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":546,"nodeType":"UserDefinedTypeName","pathNode":{"id":545,"name":"Layout","nameLocations":["3669:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"3669:6:12"},"referencedDeclaration":369,"src":"3669:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"role","nameLocation":"3695:4:12","nodeType":"VariableDeclaration","scope":567,"src":"3687:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":551,"mutability":"mutable","name":"account","nameLocation":"3709:7:12","nodeType":"VariableDeclaration","scope":567,"src":"3701:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3668:49:12"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"3732:0:12"},"scope":604,"src":"3645:170:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":590,"nodeType":"Block","src":"4234:141:12","statements":[{"condition":{"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4248:53:12","subExpression":{"arguments":[{"id":578,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4271:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":579,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4287:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":580,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"4293:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":577,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"4249:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4249:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"4244:124:12","trueBody":{"errorCall":{"arguments":[{"id":584,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4338:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":585,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4354:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":586,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"4360:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":583,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"4310:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4310:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"RevertStatement","src":"4303:65:12"}}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"3821:301:12","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":591,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4136:28:12","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"targetContract","nameLocation":"4173:14:12","nodeType":"VariableDeclaration","scope":591,"src":"4165:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"role","nameLocation":"4197:4:12","nodeType":"VariableDeclaration","scope":591,"src":"4189:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4189:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"account","nameLocation":"4211:7:12","nodeType":"VariableDeclaration","scope":591,"src":"4203:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"4203:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4164:55:12"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"4234:0:12"},"scope":604,"src":"4127:248:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":602,"nodeType":"Block","src":"4440:115:12","statements":[{"assignments":[598],"declarations":[{"constant":false,"id":598,"mutability":"mutable","name":"position","nameLocation":"4458:8:12","nodeType":"VariableDeclaration","scope":602,"src":"4450:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4450:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":600,"initialValue":{"id":599,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"4469:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4450:38:12"},{"AST":{"nativeSrc":"4507:42:12","nodeType":"YulBlock","src":"4507:42:12","statements":[{"nativeSrc":"4521:18:12","nodeType":"YulAssignment","src":"4521:18:12","value":{"name":"position","nativeSrc":"4531:8:12","nodeType":"YulIdentifier","src":"4531:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"4521:6:12","nodeType":"YulIdentifier","src":"4521:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":598,"isOffset":false,"isSlot":false,"src":"4531:8:12","valueSize":1},{"declaration":595,"isOffset":false,"isSlot":true,"src":"4521:6:12","suffix":"slot","valueSize":1}],"id":601,"nodeType":"InlineAssembly","src":"4498:51:12"}]},"id":603,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4390:6:12","nodeType":"FunctionDefinition","parameters":{"id":592,"nodeType":"ParameterList","parameters":[],"src":"4396:2:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"s","nameLocation":"4437:1:12","nodeType":"VariableDeclaration","scope":603,"src":"4422:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":594,"nodeType":"UserDefinedTypeName","pathNode":{"id":593,"name":"Layout","nameLocations":["4422:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"4422:6:12"},"referencedDeclaration":369,"src":"4422:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4421:18:12"},"scope":604,"src":"4381:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":605,"src":"428:4129:12","usedErrors":[],"usedEvents":[]}],"src":"32:4526:12"},"id":12},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[4707],"ContractOwnershipStorage":[862],"IERC173":[341],"InterfaceDetectionStorage":[1010],"NotContractOwner":[259],"NotTargetContractOwner":[271],"OwnershipTransferred":[300],"ProxyInitialization":[1066],"TargetIsNotAContract":[252]},"id":863,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":606,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":272,"src":"58:97:13","symbolAliases":[{"foreign":{"id":607,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"66:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":608,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"84:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":253,"src":"156:60:13","symbolAliases":[{"foreign":{"id":610,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"164:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":306,"src":"217:66:13","symbolAliases":[{"foreign":{"id":612,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"225:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":342,"src":"284:52:13","symbolAliases":[{"foreign":{"id":614,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"292:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":4708,"src":"337:66:13","symbolAliases":[{"foreign":{"id":616,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"345:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":1067,"src":"404:84:13","symbolAliases":[{"foreign":{"id":618,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"412:19:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":1011,"src":"489:104:13","symbolAliases":[{"foreign":{"id":620,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"497:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":862,"linearizedBaseContracts":[862],"name":"ContractOwnershipStorage","nameLocation":"603:24:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":624,"libraryName":{"id":622,"name":"Address","nameLocations":["640:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"640:7:13"},"nodeType":"UsingForDirective","src":"634:26:13","typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":628,"libraryName":{"id":625,"name":"ContractOwnershipStorage","nameLocations":["671:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"671:24:13"},"nodeType":"UsingForDirective","src":"665:67:13","typeName":{"id":627,"nodeType":"UserDefinedTypeName","pathNode":{"id":626,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:13","725:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"700:31:13"},"referencedDeclaration":635,"src":"700:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":632,"libraryName":{"id":629,"name":"InterfaceDetectionStorage","nameLocations":["743:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"743:25:13"},"nodeType":"UsingForDirective","src":"737:69:13","typeName":{"id":631,"nodeType":"UserDefinedTypeName","pathNode":{"id":630,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:13","799:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"773:32:13"},"referencedDeclaration":920,"src":"773:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":635,"members":[{"constant":false,"id":634,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:13","nodeType":"VariableDeclaration","scope":635,"src":"836:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:13","nodeType":"StructDefinition","scope":862,"src":"812:52:13","visibility":"public"},{"constant":true,"id":648,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:13","nodeType":"VariableDeclaration","scope":862,"src":"870:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":641,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:13","typeDescriptions":{}}},"id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:13","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":661,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:13","nodeType":"VariableDeclaration","scope":862,"src":"1004:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":654,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:13","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:13","typeDescriptions":{}}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":704,"nodeType":"Block","src":"1641:267:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":670,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1655:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:13","typeDescriptions":{}}},"id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":691,"nodeType":"IfStatement","src":"1651:152:13","trueBody":{"id":690,"nodeType":"Block","src":"1683:120:13","statements":[{"expression":{"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":676,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"1697:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"1697:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":679,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1715:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":681,"nodeType":"ExpressionStatement","src":"1697:30:13"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:13","typeDescriptions":{}}},"id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":687,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1779:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":682,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"1746:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"EmitStatement","src":"1741:51:13"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":698,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1874:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}],"id":697,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$341","typeString":"type(contract IERC173)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":692,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"1812:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"1812:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:13","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"1812:56:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":703,"nodeType":"ExpressionStatement","src":"1812:89:13"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"1139:423:13","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":705,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:13","nodeType":"FunctionDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"s","nameLocation":"1607:1:13","nodeType":"VariableDeclaration","scope":705,"src":"1592:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":664,"nodeType":"UserDefinedTypeName","pathNode":{"id":663,"name":"Layout","nameLocations":["1592:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"1592:6:13"},"referencedDeclaration":635,"src":"1592:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:13","nodeType":"VariableDeclaration","scope":705,"src":"1610:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:13"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[],"src":"1641:0:13"},"scope":862,"src":"1567:341:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":727,"nodeType":"Block","src":"2573:112:13","statements":[{"expression":{"arguments":[{"id":717,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"2612:21:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":714,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"2583:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1066_$","typeString":"type(library ProxyInitialization)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:13","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1065,"src":"2583:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":720,"nodeType":"ExpressionStatement","src":"2583:54:13"},{"expression":{"arguments":[{"id":724,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"2665:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":721,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"2647:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:13","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":705,"src":"2647:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":726,"nodeType":"ExpressionStatement","src":"2647:31:13"}]},"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"1914:586:13","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":728,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:13","nodeType":"FunctionDefinition","parameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"s","nameLocation":"2539:1:13","nodeType":"VariableDeclaration","scope":728,"src":"2524:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":708,"nodeType":"UserDefinedTypeName","pathNode":{"id":707,"name":"Layout","nameLocations":["2524:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"2524:6:13"},"referencedDeclaration":635,"src":"2524:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:13","nodeType":"VariableDeclaration","scope":728,"src":"2542:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:13"},"returnParameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"2573:0:13"},"scope":862,"src":"2505:180:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"3148:281:13","statements":[{"assignments":[740],"declarations":[{"constant":false,"id":740,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:13","nodeType":"VariableDeclaration","scope":768,"src":"3158:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":743,"initialValue":{"expression":{"id":741,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3182:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3182:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3211:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":745,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3221:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"3207:60:13","trueBody":{"errorCall":{"arguments":[{"id":748,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3260:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":747,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"3243:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":750,"nodeType":"RevertStatement","src":"3236:31:13"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3281:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":753,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3298:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":767,"nodeType":"IfStatement","src":"3277:146:13","trueBody":{"id":766,"nodeType":"Block","src":"3308:115:13","statements":[{"expression":{"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":755,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3322:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3322:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":758,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3340:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":760,"nodeType":"ExpressionStatement","src":"3322:26:13"},{"eventCall":{"arguments":[{"id":762,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3388:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3403:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":761,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"3367:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"EmitStatement","src":"3362:50:13"}]}}]},"documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"2691:364:13","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:13","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"s","nameLocation":"3102:1:13","nodeType":"VariableDeclaration","scope":769,"src":"3087:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":731,"nodeType":"UserDefinedTypeName","pathNode":{"id":730,"name":"Layout","nameLocations":["3087:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"3087:6:13"},"referencedDeclaration":635,"src":"3087:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"3113:6:13","nodeType":"VariableDeclaration","scope":769,"src":"3105:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:13","nodeType":"VariableDeclaration","scope":769,"src":"3121:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:13"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[],"src":"3148:0:13"},"scope":862,"src":"3060:369:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":781,"nodeType":"Block","src":"3635:39:13","statements":[{"expression":{"expression":{"id":778,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3652:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3652:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":777,"id":780,"nodeType":"Return","src":"3645:22:13"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"3435:116:13","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":782,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:13","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"s","nameLocation":"3586:1:13","nodeType":"VariableDeclaration","scope":782,"src":"3571:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":772,"nodeType":"UserDefinedTypeName","pathNode":{"id":771,"name":"Layout","nameLocations":["3571:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"3571:6:13"},"referencedDeclaration":635,"src":"3571:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:13"},"returnParameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:13","nodeType":"VariableDeclaration","scope":782,"src":"3612:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:13"},"scope":862,"src":"3556:118:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":809,"nodeType":"Block","src":"4070:153:13","statements":[{"condition":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:13","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":792,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4085:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:13","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"4085:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":800,"nodeType":"IfStatement","src":"4080:77:13","trueBody":{"errorCall":{"arguments":[{"id":797,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4142:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":796,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4121:20:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"RevertStatement","src":"4114:43:13"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":802,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4182:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":801,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4174:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$341","typeString":"contract IERC173"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:13","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":340,"src":"4174:29:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":806,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"4209:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":791,"id":808,"nodeType":"Return","src":"4167:49:13"}]},"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"3680:261:13","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":810,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:13","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:13","nodeType":"VariableDeclaration","scope":810,"src":"3977:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"account","nameLocation":"4009:7:13","nodeType":"VariableDeclaration","scope":810,"src":"4001:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":786,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:13"},"returnParameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:13","nodeType":"VariableDeclaration","scope":810,"src":"4041:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":789,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:13"},"scope":862,"src":"3946:277:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":828,"nodeType":"Block","src":"4494:81:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"4508:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":820,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"4519:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"4519:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":827,"nodeType":"IfStatement","src":"4504:64:13","trueBody":{"errorCall":{"arguments":[{"id":824,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"4560:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":823,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4543:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"RevertStatement","src":"4536:32:13"}}]},"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"4229:179:13","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":829,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:13","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"s","nameLocation":"4460:1:13","nodeType":"VariableDeclaration","scope":829,"src":"4445:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":813,"nodeType":"UserDefinedTypeName","pathNode":{"id":812,"name":"Layout","nameLocations":["4445:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"4445:6:13"},"referencedDeclaration":635,"src":"4445:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"account","nameLocation":"4471:7:13","nodeType":"VariableDeclaration","scope":829,"src":"4463:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:13"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"4494:0:13"},"scope":862,"src":"4413:162:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":848,"nodeType":"Block","src":"4935:124:13","statements":[{"condition":{"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:13","subExpression":{"arguments":[{"id":838,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"4972:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":839,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"4988:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":837,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"4950:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":847,"nodeType":"IfStatement","src":"4945:107:13","trueBody":{"errorCall":{"arguments":[{"id":843,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"5028:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":844,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"5044:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":842,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"5005:22:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"RevertStatement","src":"4998:54:13"}}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"4581:256:13","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":849,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:13","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:13","nodeType":"VariableDeclaration","scope":849,"src":"4880:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"account","nameLocation":"4912:7:13","nodeType":"VariableDeclaration","scope":849,"src":"4904:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:13"},"returnParameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"4935:0:13"},"scope":862,"src":"4842:217:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":860,"nodeType":"Block","src":"5124:115:13","statements":[{"assignments":[856],"declarations":[{"constant":false,"id":856,"mutability":"mutable","name":"position","nameLocation":"5142:8:13","nodeType":"VariableDeclaration","scope":860,"src":"5134:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":858,"initialValue":{"id":857,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"5153:19:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:13"},{"AST":{"nativeSrc":"5191:42:13","nodeType":"YulBlock","src":"5191:42:13","statements":[{"nativeSrc":"5205:18:13","nodeType":"YulAssignment","src":"5205:18:13","value":{"name":"position","nativeSrc":"5215:8:13","nodeType":"YulIdentifier","src":"5215:8:13"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:13","nodeType":"YulIdentifier","src":"5205:6:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":856,"isOffset":false,"isSlot":false,"src":"5215:8:13","valueSize":1},{"declaration":853,"isOffset":false,"isSlot":true,"src":"5205:6:13","suffix":"slot","valueSize":1}],"id":859,"nodeType":"InlineAssembly","src":"5182:51:13"}]},"id":861,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:13","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[],"src":"5080:2:13"},"returnParameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"s","nameLocation":"5121:1:13","nodeType":"VariableDeclaration","scope":861,"src":"5106:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":852,"nodeType":"UserDefinedTypeName","pathNode":{"id":851,"name":"Layout","nameLocations":["5106:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"5106:6:13"},"referencedDeclaration":635,"src":"5106:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:13"},"scope":862,"src":"5065:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":863,"src":"595:4646:13","usedErrors":[],"usedEvents":[]}],"src":"32:5210:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[909],"InterfaceDetection":[892],"InterfaceDetectionStorage":[1010]},"id":893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":864,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":866,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":893,"sourceUnit":910,"src":"58:49:14","symbolAliases":[{"foreign":{"id":865,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"66:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":868,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":893,"sourceUnit":1011,"src":"108:84:14","symbolAliases":[{"foreign":{"id":867,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"116:25:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":870,"name":"IERC165","nameLocations":["425:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"425:7:14"},"id":871,"nodeType":"InheritanceSpecifier","src":"425:7:14"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"194:191:14","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":892,"linearizedBaseContracts":[892,909],"name":"InterfaceDetection","nameLocation":"403:18:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":875,"libraryName":{"id":872,"name":"InterfaceDetectionStorage","nameLocations":["445:25:14"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"445:25:14"},"nodeType":"UsingForDirective","src":"439:69:14","typeName":{"id":874,"nodeType":"UserDefinedTypeName","pathNode":{"id":873,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:14","501:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"475:32:14"},"referencedDeclaration":920,"src":"475:32:14","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[908],"body":{"id":890,"nodeType":"Block","src":"618:89:14","statements":[{"expression":{"arguments":[{"id":887,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"688:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":883,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"635:25:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"635:32:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:14","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":997,"src":"635:52:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":882,"id":889,"nodeType":"Return","src":"628:72:14"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"514:23:14","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":891,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:14","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:14","nodeType":"VariableDeclaration","scope":891,"src":"569:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":877,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:14"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":891,"src":"612:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":880,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:14"},"scope":892,"src":"542:165:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":893,"src":"385:324:14","usedErrors":[],"usedEvents":[]}],"src":"32:678:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[897]},"id":898,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":894,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:15"},{"documentation":{"id":895,"nodeType":"StructuredDocumentation","src":"58:68:15","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":897,"name":"IllegalInterfaceId","nameLocation":"132:18:15","nodeType":"ErrorDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[],"src":"150:2:15"},"src":"126:27:15"}],"src":"32:122:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[909]},"id":910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":899,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":900,"nodeType":"StructuredDocumentation","src":"58:173:16","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":909,"linearizedBaseContracts":[909],"name":"IERC165","nameLocation":"241:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"255:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":908,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:16","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:16","nodeType":"VariableDeclaration","scope":908,"src":"627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":902,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:16"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"supported","nameLocation":"675:9:16","nodeType":"VariableDeclaration","scope":908,"src":"670:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":905,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:16"},"scope":909,"src":"600:86:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":910,"src":"231:457:16","usedErrors":[],"usedEvents":[]}],"src":"32:657:16"},"id":16},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[909],"IllegalInterfaceId":[897],"InterfaceDetectionStorage":[1010]},"id":1011,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":911,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":913,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1011,"sourceUnit":898,"src":"58:76:17","symbolAliases":[{"foreign":{"id":912,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":915,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1011,"sourceUnit":910,"src":"135:52:17","symbolAliases":[{"foreign":{"id":914,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"143:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1010,"linearizedBaseContracts":[1010],"name":"InterfaceDetectionStorage","nameLocation":"197:25:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":920,"members":[{"constant":false,"id":919,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:17","nodeType":"VariableDeclaration","scope":920,"src":"253:43:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":918,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":916,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:17","nodeType":"StructDefinition","scope":1010,"src":"229:74:17","visibility":"public"},{"constant":true,"id":933,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:17","nodeType":"VariableDeclaration","scope":1010,"src":"309:136:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":926,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:17","typeDescriptions":{}}},"id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:17","typeDescriptions":{}}},"id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":936,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:17","nodeType":"VariableDeclaration","scope":1010,"src":"452:58:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":934,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":962,"nodeType":"Block","src":"867:141:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"881:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":948,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"896:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":953,"nodeType":"IfStatement","src":"877:68:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":950,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"925:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":952,"nodeType":"RevertStatement","src":"918:27:17"}},{"expression":{"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":954,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"955:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":957,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":919,"src":"955:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":958,"indexExpression":{"id":956,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"977:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":959,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"992:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":961,"nodeType":"ExpressionStatement","src":"955:46:17"}]},"documentation":{"id":937,"nodeType":"StructuredDocumentation","src":"517:251:17","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":963,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:17","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"s","nameLocation":"819:1:17","nodeType":"VariableDeclaration","scope":963,"src":"804:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":939,"nodeType":"UserDefinedTypeName","pathNode":{"id":938,"name":"Layout","nameLocations":["804:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"804:6:17"},"referencedDeclaration":920,"src":"804:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:17","nodeType":"VariableDeclaration","scope":963,"src":"822:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":941,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"supported","nameLocation":"847:9:17","nodeType":"VariableDeclaration","scope":963,"src":"842:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":943,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:17"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"867:0:17"},"scope":1010,"src":"773:235:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"1463:236:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1477:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":975,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"1492:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":980,"nodeType":"IfStatement","src":"1473:78:17","trueBody":{"id":979,"nodeType":"Block","src":"1514:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":973,"id":978,"nodeType":"Return","src":"1528:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":981,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1564:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":983,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"1584:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}],"id":982,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$909","typeString":"type(contract IERC165)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":990,"nodeType":"IfStatement","src":"1560:82:17","trueBody":{"id":989,"nodeType":"Block","src":"1606:36:17","statements":[{"expression":{"hexValue":"74727565","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":973,"id":988,"nodeType":"Return","src":"1620:11:17"}]}},{"expression":{"baseExpression":{"expression":{"id":991,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"1658:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":992,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":919,"src":"1658:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":994,"indexExpression":{"id":993,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1680:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":973,"id":995,"nodeType":"Return","src":"1651:41:17"}]},"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"1014:340:17","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:17","nodeType":"FunctionDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"s","nameLocation":"1401:1:17","nodeType":"VariableDeclaration","scope":997,"src":"1386:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":966,"nodeType":"UserDefinedTypeName","pathNode":{"id":965,"name":"Layout","nameLocations":["1386:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"1386:6:17"},"referencedDeclaration":920,"src":"1386:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:17","nodeType":"VariableDeclaration","scope":997,"src":"1404:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":968,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:17"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"supported","nameLocation":"1452:9:17","nodeType":"VariableDeclaration","scope":997,"src":"1447:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":971,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:17"},"scope":1010,"src":"1359:340:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"1764:115:17","statements":[{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"position","nameLocation":"1782:8:17","nodeType":"VariableDeclaration","scope":1008,"src":"1774:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1006,"initialValue":{"id":1005,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1793:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:17"},{"AST":{"nativeSrc":"1831:42:17","nodeType":"YulBlock","src":"1831:42:17","statements":[{"nativeSrc":"1845:18:17","nodeType":"YulAssignment","src":"1845:18:17","value":{"name":"position","nativeSrc":"1855:8:17","nodeType":"YulIdentifier","src":"1855:8:17"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:17","nodeType":"YulIdentifier","src":"1845:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1004,"isOffset":false,"isSlot":false,"src":"1855:8:17","valueSize":1},{"declaration":1001,"isOffset":false,"isSlot":true,"src":"1845:6:17","suffix":"slot","valueSize":1}],"id":1007,"nodeType":"InlineAssembly","src":"1822:51:17"}]},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:17","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[],"src":"1720:2:17"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"s","nameLocation":"1761:1:17","nodeType":"VariableDeclaration","scope":1009,"src":"1746:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":1000,"nodeType":"UserDefinedTypeName","pathNode":{"id":999,"name":"Layout","nameLocations":["1746:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"1746:6:17"},"referencedDeclaration":920,"src":"1746:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:17"},"scope":1010,"src":"1705:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1011,"src":"189:1692:17","usedErrors":[],"usedEvents":[]}],"src":"32:1850:17"},"id":17},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1019]},"id":1020,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1012,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:18"},{"documentation":{"id":1013,"nodeType":"StructuredDocumentation","src":"58:179:18","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1019,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:18","nodeType":"ErrorDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:18","nodeType":"VariableDeclaration","scope":1019,"src":"277:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1017,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:18","nodeType":"VariableDeclaration","scope":1019,"src":"299:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:18"},"src":"237:80:18"}],"src":"32:286:18"},"id":18},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1019],"ProxyInitialization":[1066],"StorageSlot":[4847]},"id":1067,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1021,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1023,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1067,"sourceUnit":1020,"src":"58:92:19","symbolAliases":[{"foreign":{"id":1022,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"66:33:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1067,"sourceUnit":4848,"src":"151:74:19","symbolAliases":[{"foreign":{"id":1024,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"159:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"227:92:19","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1066,"linearizedBaseContracts":[1066],"name":"ProxyInitialization","nameLocation":"327:19:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1064,"nodeType":"Block","src":"735:294:19","statements":[{"assignments":[1038],"declarations":[{"constant":false,"id":1038,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:19","nodeType":"VariableDeclaration","scope":1064,"src":"745:46:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1037,"nodeType":"UserDefinedTypeName","pathNode":{"id":1036,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:19","757:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":4752,"src":"745:23:19"},"referencedDeclaration":4752,"src":"745:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1043,"initialValue":{"arguments":[{"id":1041,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"821:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1039,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"794:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$4847_$","typeString":"type(library StorageSlot)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:19","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":4802,"src":"794:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$4752_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:19"},{"assignments":[1045],"declarations":[{"constant":false,"id":1045,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:19","nodeType":"VariableDeclaration","scope":1064,"src":"843:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1048,"initialValue":{"expression":{"id":1046,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"866:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4751,"src":"866:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"900:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1050,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"916:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1057,"nodeType":"IfStatement","src":"896:88:19","trueBody":{"errorCall":{"arguments":[{"id":1053,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"964:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1054,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"978:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1052,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"930:33:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"RevertStatement","src":"923:61:19"}},{"expression":{"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1058,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"994:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4751,"src":"994:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1061,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"1017:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1063,"nodeType":"ExpressionStatement","src":"994:28:19"}]},"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"353:314:19","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1065,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:19","nodeType":"FunctionDefinition","parameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:19","nodeType":"VariableDeclaration","scope":1065,"src":"690:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"phase","nameLocation":"719:5:19","nodeType":"VariableDeclaration","scope":1065,"src":"711:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1030,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:19"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"735:0:19"},"scope":1066,"src":"672:357:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1067,"src":"319:712:19","usedErrors":[],"usedEvents":[]}],"src":"32:1000:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"ERC721":[1090],"ERC721Base":[1356],"ERC721Storage":[3634],"InterfaceDetection":[892]},"id":1091,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1068,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./libraries/ERC721Storage.sol","id":1070,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":3635,"src":"58:60:20","symbolAliases":[{"foreign":{"id":1069,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"66:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol","file":"./base/ERC721Base.sol","id":1072,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":1357,"src":"119:49:20","symbolAliases":[{"foreign":{"id":1071,"name":"ERC721Base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"127:10:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":1074,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":893,"src":"169:80:20","symbolAliases":[{"foreign":{"id":1073,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"177:18:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1076,"name":"ERC721Base","nameLocations":["445:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":1356,"src":"445:10:20"},"id":1077,"nodeType":"InheritanceSpecifier","src":"445:10:20"},{"baseName":{"id":1078,"name":"InterfaceDetection","nameLocations":["457:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"457:18:20"},"id":1079,"nodeType":"InheritanceSpecifier","src":"457:18:20"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"251:166:20","text":"@title ERC721 Non-Fungible Token Standard (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1090,"linearizedBaseContracts":[1090,892,909,1356,4737,1756],"name":"ERC721","nameLocation":"435:6:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":1088,"nodeType":"Block","src":"572:37:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1083,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"582:13:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"596:4:20","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1993,"src":"582:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"582:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"ExpressionStatement","src":"582:20:20"}]},"documentation":{"id":1080,"nodeType":"StructuredDocumentation","src":"482:71:20","text":"@notice Marks the following ERC165 interfaces as supported: ERC721."},"id":1089,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1081,"nodeType":"ParameterList","parameters":[],"src":"569:2:20"},"returnParameters":{"id":1082,"nodeType":"ParameterList","parameters":[],"src":"572:0:20"},"scope":1090,"src":"558:51:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1091,"src":"417:194:20","usedErrors":[897,1576,1581,1590,1593,1598,1607,1614,1621,1624],"usedEvents":[1652,1661,1670]}],"src":"32:580:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","exportedSymbols":{"ERC721Metadata":[1135],"ERC721MetadataBase":[1436],"ERC721Storage":[3634],"ITokenMetadataResolver":[3700],"TokenMetadataStorage":[3887]},"id":1136,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1092,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../metadata/interfaces/ITokenMetadataResolver.sol","id":1094,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1136,"sourceUnit":3701,"src":"58:91:21","symbolAliases":[{"foreign":{"id":1093,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"66:22:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../metadata/libraries/TokenMetadataStorage.sol","id":1096,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1136,"sourceUnit":3888,"src":"150:86:21","symbolAliases":[{"foreign":{"id":1095,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"158:20:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./libraries/ERC721Storage.sol","id":1098,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1136,"sourceUnit":3635,"src":"237:60:21","symbolAliases":[{"foreign":{"id":1097,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"245:13:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","file":"./base/ERC721MetadataBase.sol","id":1100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1136,"sourceUnit":1437,"src":"298:65:21","symbolAliases":[{"foreign":{"id":1099,"name":"ERC721MetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"306:18:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1102,"name":"ERC721MetadataBase","nameLocations":["691:18:21"],"nodeType":"IdentifierPath","referencedDeclaration":1436,"src":"691:18:21"},"id":1103,"nodeType":"InheritanceSpecifier","src":"691:18:21"}],"canonicalName":"ERC721Metadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1101,"nodeType":"StructuredDocumentation","src":"365:290:21","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1135,"linearizedBaseContracts":[1135,1436,1830,3686],"name":"ERC721Metadata","nameLocation":"673:14:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1107,"libraryName":{"id":1104,"name":"TokenMetadataStorage","nameLocations":["722:20:21"],"nodeType":"IdentifierPath","referencedDeclaration":3887,"src":"722:20:21"},"nodeType":"UsingForDirective","src":"716:59:21","typeName":{"id":1106,"nodeType":"UserDefinedTypeName","pathNode":{"id":1105,"name":"TokenMetadataStorage.Layout","nameLocations":["747:20:21","768:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"747:27:21"},"referencedDeclaration":3714,"src":"747:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":1133,"nodeType":"Block","src":"1129:138:21","statements":[{"expression":{"arguments":[{"id":1123,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"1185:4:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1124,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"1191:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1125,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"1199:16:21","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1118,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"1139:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3887_$","typeString":"type(library TokenMetadataStorage)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1160:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"1139:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1122,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1169:15:21","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":3773,"src":"1139:45:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3714_storage_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_contract$_ITokenMetadataResolver_$3700_$returns$__$attached_to$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:77:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1127,"nodeType":"ExpressionStatement","src":"1139:77:21"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1128,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1226:13:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:18:21","memberName":"initERC721Metadata","nodeType":"MemberAccess","referencedDeclaration":2027,"src":"1226:32:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1132,"nodeType":"ExpressionStatement","src":"1226:34:21"}]},"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"781:248:21","text":"@notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n @param name The name of the token.\n @param symbol The symbol of the token.\n @param metadataResolver The address of the metadata resolver contract."},"id":1134,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"name","nameLocation":"1060:4:21","nodeType":"VariableDeclaration","scope":1134,"src":"1046:18:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1109,"name":"string","nodeType":"ElementaryTypeName","src":"1046:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1112,"mutability":"mutable","name":"symbol","nameLocation":"1080:6:21","nodeType":"VariableDeclaration","scope":1134,"src":"1066:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1111,"name":"string","nodeType":"ElementaryTypeName","src":"1066:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"metadataResolver","nameLocation":"1111:16:21","nodeType":"VariableDeclaration","scope":1134,"src":"1088:39:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":1114,"nodeType":"UserDefinedTypeName","pathNode":{"id":1113,"name":"ITokenMetadataResolver","nameLocations":["1088:22:21"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"1088:22:21"},"referencedDeclaration":3700,"src":"1088:22:21","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:83:21"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1129:0:21"},"scope":1135,"src":"1034:233:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1136,"src":"655:614:21","usedErrors":[897,1598],"usedEvents":[]}],"src":"32:1238:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol","exportedSymbols":{"AccessControl":[22],"ERC721MintableOnce":[1159],"ERC721MintableOnceBase":[1569],"ERC721Storage":[3634]},"id":1160,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1137,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./libraries/ERC721Storage.sol","id":1139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1160,"sourceUnit":3635,"src":"58:60:22","symbolAliases":[{"foreign":{"id":1138,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"66:13:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol","file":"./base/ERC721MintableOnceBase.sol","id":1141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1160,"sourceUnit":1570,"src":"119:73:22","symbolAliases":[{"foreign":{"id":1140,"name":"ERC721MintableOnceBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"127:22:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"./../../access/AccessControl.sol","id":1143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1160,"sourceUnit":23,"src":"193:63:22","symbolAliases":[{"foreign":{"id":1142,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"201:13:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1145,"name":"ERC721MintableOnceBase","nameLocations":["578:22:22"],"nodeType":"IdentifierPath","referencedDeclaration":1569,"src":"578:22:22"},"id":1146,"nodeType":"InheritanceSpecifier","src":"578:22:22"},{"baseName":{"id":1147,"name":"AccessControl","nameLocations":["602:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":22,"src":"602:13:22"},"id":1148,"nodeType":"InheritanceSpecifier","src":"602:13:22"}],"canonicalName":"ERC721MintableOnce","contractDependencies":[],"contractKind":"contract","documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"258:280:22","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\n @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1159,"linearizedBaseContracts":[1159,22,55,892,909,227,179,1569,4737,341,325,1861],"name":"ERC721MintableOnce","nameLocation":"556:18:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1157,"nodeType":"Block","src":"722:51:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1152,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"732:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"746:18:22","memberName":"initERC721Mintable","nodeType":"MemberAccess","referencedDeclaration":2044,"src":"732:32:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"732:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1156,"nodeType":"ExpressionStatement","src":"732:34:22"}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"622:81:22","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Mintable."},"id":1158,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[],"src":"719:2:22"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[],"src":"722:0:22"},"scope":1159,"src":"708:65:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1160,"src":"538:237:22","usedErrors":[236,259,897,1621,1629,1634,1641],"usedEvents":[282,291,300,1652]}],"src":"32:744:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol","exportedSymbols":{"Context":[4737],"ERC721Base":[1356],"ERC721Storage":[3634],"IERC721":[1756]},"id":1357,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1161,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../interfaces/IERC721.sol","id":1163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1357,"sourceUnit":1757,"src":"58:52:23","symbolAliases":[{"foreign":{"id":1162,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"66:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./../libraries/ERC721Storage.sol","id":1165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1357,"sourceUnit":3635,"src":"111:63:23","symbolAliases":[{"foreign":{"id":1164,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"119:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1357,"sourceUnit":4738,"src":"175:66:23","symbolAliases":[{"foreign":{"id":1166,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"183:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1169,"name":"IERC721","nameLocations":["501:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"501:7:23"},"id":1170,"nodeType":"InheritanceSpecifier","src":"501:7:23"},{"baseName":{"id":1171,"name":"Context","nameLocations":["510:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"510:7:23"},"id":1172,"nodeType":"InheritanceSpecifier","src":"510:7:23"}],"canonicalName":"ERC721Base","contractDependencies":[],"contractKind":"contract","documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"243:226:23","text":"@title ERC721 Non-Fungible Token Standard (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":1356,"linearizedBaseContracts":[1356,4737,1756],"name":"ERC721Base","nameLocation":"487:10:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1176,"libraryName":{"id":1173,"name":"ERC721Storage","nameLocations":["530:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":3634,"src":"530:13:23"},"nodeType":"UsingForDirective","src":"524:45:23","typeName":{"id":1175,"nodeType":"UserDefinedTypeName","pathNode":{"id":1174,"name":"ERC721Storage.Layout","nameLocations":["548:13:23","562:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"548:20:23"},"referencedDeclaration":1950,"src":"548:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"baseFunctions":[1681],"body":{"id":1195,"nodeType":"Block","src":"666:74:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1189,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"707:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"707:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1191,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"721:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1192,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"725:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1184,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"676:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"690:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"676:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"676:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"699:7:23","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2196,"src":"676:30:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,uint256)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"676:57:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1194,"nodeType":"ExpressionStatement","src":"676:57:23"}]},"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"575:23:23","text":"@inheritdoc IERC721"},"functionSelector":"095ea7b3","id":1196,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"612:7:23","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"to","nameLocation":"628:2:23","nodeType":"VariableDeclaration","scope":1196,"src":"620:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"620:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"tokenId","nameLocation":"640:7:23","nodeType":"VariableDeclaration","scope":1196,"src":"632:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"619:29:23"},"returnParameters":{"id":1183,"nodeType":"ParameterList","parameters":[],"src":"666:0:23"},"scope":1356,"src":"603:137:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1689],"body":{"id":1215,"nodeType":"Block","src":"851:91:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1209,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"902:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1211,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"916:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1212,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"926:8:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1204,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"861:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"875:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"861:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"861:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"884:17:23","memberName":"setApprovalForAll","nodeType":"MemberAccess","referencedDeclaration":2234,"src":"861:40:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,bool)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"861:74:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1214,"nodeType":"ExpressionStatement","src":"861:74:23"}]},"documentation":{"id":1197,"nodeType":"StructuredDocumentation","src":"746:23:23","text":"@inheritdoc IERC721"},"functionSelector":"a22cb465","id":1216,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"783:17:23","nodeType":"FunctionDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"operator","nameLocation":"809:8:23","nodeType":"VariableDeclaration","scope":1216,"src":"801:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1198,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"approved","nameLocation":"824:8:23","nodeType":"VariableDeclaration","scope":1216,"src":"819:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1200,"name":"bool","nodeType":"ElementaryTypeName","src":"819:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"800:33:23"},"returnParameters":{"id":1203,"nodeType":"ParameterList","parameters":[],"src":"851:0:23"},"scope":1356,"src":"774:168:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1699],"body":{"id":1238,"nodeType":"Block","src":"1050:85:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1231,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1096:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1096:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1233,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"1110:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"1116:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1235,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"1120:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1226,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1060:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1074:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1060:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1083:12:23","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2351,"src":"1060:35:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:68:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1237,"nodeType":"ExpressionStatement","src":"1060:68:23"}]},"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"948:23:23","text":"@inheritdoc IERC721"},"functionSelector":"23b872dd","id":1239,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"985:12:23","nodeType":"FunctionDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"from","nameLocation":"1006:4:23","nodeType":"VariableDeclaration","scope":1239,"src":"998:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"998:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"to","nameLocation":"1020:2:23","nodeType":"VariableDeclaration","scope":1239,"src":"1012:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1220,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"tokenId","nameLocation":"1032:7:23","nodeType":"VariableDeclaration","scope":1239,"src":"1024:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"997:43:23"},"returnParameters":{"id":1225,"nodeType":"ParameterList","parameters":[],"src":"1050:0:23"},"scope":1356,"src":"976:159:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1709],"body":{"id":1261,"nodeType":"Block","src":"1255:89:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1254,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1305:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1256,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"1319:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1257,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"1325:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1258,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"1329:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1249,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1265:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1279:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1265:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1288:16:23","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"1265:39:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:72:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1260,"nodeType":"ExpressionStatement","src":"1265:72:23"}]},"documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"1141:23:23","text":"@inheritdoc IERC721"},"functionSelector":"42842e0e","id":1262,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1178:16:23","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"from","nameLocation":"1203:4:23","nodeType":"VariableDeclaration","scope":1262,"src":"1195:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1241,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"to","nameLocation":"1217:2:23","nodeType":"VariableDeclaration","scope":1262,"src":"1209:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"1209:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"tokenId","nameLocation":"1229:7:23","nodeType":"VariableDeclaration","scope":1262,"src":"1221:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1194:43:23"},"returnParameters":{"id":1248,"nodeType":"ParameterList","parameters":[],"src":"1255:0:23"},"scope":1356,"src":"1169:175:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1721],"body":{"id":1287,"nodeType":"Block","src":"1485:95:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1279,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1535:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1281,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"1549:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1282,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"1555:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1283,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"1559:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1284,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"1568:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1274,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1495:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1509:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1495:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1495:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1518:16:23","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2429,"src":"1495:39:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1495:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1286,"nodeType":"ExpressionStatement","src":"1495:78:23"}]},"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"1350:23:23","text":"@inheritdoc IERC721"},"functionSelector":"b88d4fde","id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1387:16:23","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"from","nameLocation":"1412:4:23","nodeType":"VariableDeclaration","scope":1288,"src":"1404:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"1404:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"to","nameLocation":"1426:2:23","nodeType":"VariableDeclaration","scope":1288,"src":"1418:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"1418:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"tokenId","nameLocation":"1438:7:23","nodeType":"VariableDeclaration","scope":1288,"src":"1430:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1430:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1271,"mutability":"mutable","name":"data","nameLocation":"1462:4:23","nodeType":"VariableDeclaration","scope":1288,"src":"1447:19:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1270,"name":"bytes","nodeType":"ElementaryTypeName","src":"1447:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1403:64:23"},"returnParameters":{"id":1273,"nodeType":"ParameterList","parameters":[],"src":"1485:0:23"},"scope":1356,"src":"1378:202:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1729],"body":{"id":1303,"nodeType":"Block","src":"1688:63:23","statements":[{"expression":{"arguments":[{"id":1300,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"1738:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1296,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1705:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1719:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1705:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1705:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1728:9:23","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3390,"src":"1705:32:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address) view returns (uint256)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1705:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1295,"id":1302,"nodeType":"Return","src":"1698:46:23"}]},"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"1586:23:23","text":"@inheritdoc IERC721"},"functionSelector":"70a08231","id":1304,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1623:9:23","nodeType":"FunctionDefinition","parameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"owner","nameLocation":"1641:5:23","nodeType":"VariableDeclaration","scope":1304,"src":"1633:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1632:15:23"},"returnParameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"balance","nameLocation":"1679:7:23","nodeType":"VariableDeclaration","scope":1304,"src":"1671:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"1671:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1670:17:23"},"scope":1356,"src":"1614:137:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1737],"body":{"id":1319,"nodeType":"Block","src":"1862:63:23","statements":[{"expression":{"arguments":[{"id":1316,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"1910:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1312,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1879:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1893:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1879:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1902:7:23","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3422,"src":"1879:30:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1311,"id":1318,"nodeType":"Return","src":"1872:46:23"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"1757:23:23","text":"@inheritdoc IERC721"},"functionSelector":"6352211e","id":1320,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1794:7:23","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"tokenId","nameLocation":"1810:7:23","nodeType":"VariableDeclaration","scope":1320,"src":"1802:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1802:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1801:17:23"},"returnParameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"mutability":"mutable","name":"tokenOwner","nameLocation":"1850:10:23","nodeType":"VariableDeclaration","scope":1320,"src":"1842:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"1842:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1841:20:23"},"scope":1356,"src":"1785:140:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1745],"body":{"id":1335,"nodeType":"Block","src":"2038:67:23","statements":[{"expression":{"arguments":[{"id":1332,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2090:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1328,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2055:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2069:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"2055:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2078:11:23","memberName":"getApproved","nodeType":"MemberAccess","referencedDeclaration":3466,"src":"2055:34:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1327,"id":1334,"nodeType":"Return","src":"2048:50:23"}]},"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"1931:23:23","text":"@inheritdoc IERC721"},"functionSelector":"081812fc","id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"1968:11:23","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"tokenId","nameLocation":"1988:7:23","nodeType":"VariableDeclaration","scope":1336,"src":"1980:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1980:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1979:17:23"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"approved","nameLocation":"2028:8:23","nodeType":"VariableDeclaration","scope":1336,"src":"2020:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"2020:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2019:18:23"},"scope":1356,"src":"1959:146:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1755],"body":{"id":1354,"nodeType":"Block","src":"2242:80:23","statements":[{"expression":{"arguments":[{"id":1350,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"2299:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1351,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"2306:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1346,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2259:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"2259:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1349,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2282:16:23","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":3487,"src":"2259:39:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:56:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1345,"id":1353,"nodeType":"Return","src":"2252:63:23"}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"2111:23:23","text":"@inheritdoc IERC721"},"functionSelector":"e985e9c5","id":1355,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2148:16:23","nodeType":"FunctionDefinition","parameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"owner","nameLocation":"2173:5:23","nodeType":"VariableDeclaration","scope":1355,"src":"2165:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"2165:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"operator","nameLocation":"2188:8:23","nodeType":"VariableDeclaration","scope":1355,"src":"2180:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"2180:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2164:33:23"},"returnParameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"approvedForAll","nameLocation":"2226:14:23","nodeType":"VariableDeclaration","scope":1355,"src":"2221:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1343,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2220:21:23"},"scope":1356,"src":"2139:183:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1357,"src":"469:1855:23","usedErrors":[1576,1581,1590,1593,1598,1607,1614,1621,1624],"usedEvents":[1652,1661,1670]}],"src":"32:2293:23"},"id":23},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","exportedSymbols":{"ERC721MetadataBase":[1436],"ERC721Storage":[3634],"IERC721Metadata":[1830],"TokenMetadataBase":[3686],"TokenMetadataStorage":[3887]},"id":1437,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1358,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1437,"sourceUnit":1831,"src":"58:68:24","symbolAliases":[{"foreign":{"id":1359,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"66:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./../libraries/ERC721Storage.sol","id":1362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1437,"sourceUnit":3635,"src":"127:63:24","symbolAliases":[{"foreign":{"id":1361,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"135:13:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../../metadata/libraries/TokenMetadataStorage.sol","id":1364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1437,"sourceUnit":3888,"src":"191:89:24","symbolAliases":[{"foreign":{"id":1363,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"199:20:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","file":"./../../metadata/base/TokenMetadataBase.sol","id":1366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1437,"sourceUnit":3687,"src":"281:78:24","symbolAliases":[{"foreign":{"id":1365,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"289:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1368,"name":"TokenMetadataBase","nameLocations":["750:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":3686,"src":"750:17:24"},"id":1369,"nodeType":"InheritanceSpecifier","src":"750:17:24"},{"baseName":{"id":1370,"name":"IERC721Metadata","nameLocations":["769:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":1830,"src":"769:15:24"},"id":1371,"nodeType":"InheritanceSpecifier","src":"769:15:24"}],"canonicalName":"ERC721MetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1367,"nodeType":"StructuredDocumentation","src":"361:349:24","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC721 (Non-Fungible Token Standard)."},"fullyImplemented":true,"id":1436,"linearizedBaseContracts":[1436,1830,3686],"name":"ERC721MetadataBase","nameLocation":"728:18:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1375,"libraryName":{"id":1372,"name":"ERC721Storage","nameLocations":["797:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":3634,"src":"797:13:24"},"nodeType":"UsingForDirective","src":"791:45:24","typeName":{"id":1374,"nodeType":"UserDefinedTypeName","pathNode":{"id":1373,"name":"ERC721Storage.Layout","nameLocations":["815:13:24","829:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"815:20:24"},"referencedDeclaration":1950,"src":"815:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1379,"libraryName":{"id":1376,"name":"TokenMetadataStorage","nameLocations":["847:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":3887,"src":"847:20:24"},"nodeType":"UsingForDirective","src":"841:59:24","typeName":{"id":1378,"nodeType":"UserDefinedTypeName","pathNode":{"id":1377,"name":"TokenMetadataStorage.Layout","nameLocations":["872:20:24","893:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"872:27:24"},"referencedDeclaration":3714,"src":"872:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"baseFunctions":[1815,3658],"body":{"id":1392,"nodeType":"Block","src":"1057:48:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1388,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"1074:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3686_$","typeString":"type(contract TokenMetadataBase)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1092:4:24","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3658,"src":"1074:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1074:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1387,"id":1391,"nodeType":"Return","src":"1067:31:24"}]},"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"906:31:24","text":"@inheritdoc IERC721Metadata"},"functionSelector":"06fdde03","id":1393,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"951:4:24","nodeType":"FunctionDefinition","overrides":{"id":1384,"nodeType":"OverrideSpecifier","overrides":[{"id":1382,"name":"IERC721Metadata","nameLocations":["987:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":1830,"src":"987:15:24"},{"id":1383,"name":"TokenMetadataBase","nameLocations":["1004:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":3686,"src":"1004:17:24"}],"src":"978:44:24"},"parameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"955:2:24"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"tokenName","nameLocation":"1046:9:24","nodeType":"VariableDeclaration","scope":1393,"src":"1032:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1385,"name":"string","nodeType":"ElementaryTypeName","src":"1032:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1031:25:24"},"scope":1436,"src":"942:163:24","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1821,3671],"body":{"id":1406,"nodeType":"Block","src":"1266:50:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1402,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"1283:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3686_$","typeString":"type(contract TokenMetadataBase)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1301:6:24","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3671,"src":"1283:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1283:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1401,"id":1405,"nodeType":"Return","src":"1276:33:24"}]},"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"1111:31:24","text":"@inheritdoc IERC721Metadata"},"functionSelector":"95d89b41","id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1156:6:24","nodeType":"FunctionDefinition","overrides":{"id":1398,"nodeType":"OverrideSpecifier","overrides":[{"id":1396,"name":"IERC721Metadata","nameLocations":["1194:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":1830,"src":"1194:15:24"},{"id":1397,"name":"TokenMetadataBase","nameLocations":["1211:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":3686,"src":"1211:17:24"}],"src":"1185:44:24"},"parameters":{"id":1395,"nodeType":"ParameterList","parameters":[],"src":"1162:2:24"},"returnParameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1253:11:24","nodeType":"VariableDeclaration","scope":1407,"src":"1239:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1399,"name":"string","nodeType":"ElementaryTypeName","src":"1239:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1238:27:24"},"scope":1436,"src":"1147:169:24","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1829],"body":{"id":1434,"nodeType":"Block","src":"1443:182:24","statements":[{"expression":{"arguments":[{"id":1420,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1484:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1415,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1453:13:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1467:6:24","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1453:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1476:7:24","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3422,"src":"1453:30:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1422,"nodeType":"ExpressionStatement","src":"1453:39:24"},{"expression":{"arguments":[{"arguments":[{"id":1429,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1603:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1436","typeString":"contract ERC721MetadataBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1436","typeString":"contract ERC721MetadataBase"}],"id":1428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1595:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:24","typeDescriptions":{}}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1431,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1610:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1423,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"1548:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3887_$","typeString":"type(library TokenMetadataStorage)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:6:24","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"1548:27:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1578:16:24","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"1548:46:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3714_storage_ptr_$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,address,uint256) view returns (string memory)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1414,"id":1433,"nodeType":"Return","src":"1541:77:24"}]},"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"1322:31:24","text":"@inheritdoc IERC721Metadata"},"functionSelector":"c87b56dd","id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1367:8:24","nodeType":"FunctionDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"tokenId","nameLocation":"1384:7:24","nodeType":"VariableDeclaration","scope":1435,"src":"1376:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1375:17:24"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"uri","nameLocation":"1438:3:24","nodeType":"VariableDeclaration","scope":1435,"src":"1424:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1412,"name":"string","nodeType":"ElementaryTypeName","src":"1424:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1423:19:24"},"scope":1436,"src":"1358:267:24","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1437,"src":"710:917:24","usedErrors":[1598],"usedEvents":[]}],"src":"32:1596:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol","exportedSymbols":{"AccessControlStorage":[604],"Context":[4737],"ERC721MintableOnceBase":[1569],"ERC721Storage":[3634],"IERC721Mintable":[1861]},"id":1570,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1438,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:25"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"./../interfaces/IERC721Mintable.sol","id":1440,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1570,"sourceUnit":1862,"src":"58:68:25","symbolAliases":[{"foreign":{"id":1439,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"66:15:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./../libraries/ERC721Storage.sol","id":1442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1570,"sourceUnit":3635,"src":"127:63:25","symbolAliases":[{"foreign":{"id":1441,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"135:13:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../../../access/libraries/AccessControlStorage.sol","id":1444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1570,"sourceUnit":605,"src":"191:90:25","symbolAliases":[{"foreign":{"id":1443,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"199:20:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1570,"sourceUnit":4738,"src":"282:66:25","symbolAliases":[{"foreign":{"id":1445,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"290:7:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1448,"name":"IERC721Mintable","nameLocations":["786:15:25"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"786:15:25"},"id":1449,"nodeType":"InheritanceSpecifier","src":"786:15:25"},{"baseName":{"id":1450,"name":"Context","nameLocations":["803:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"803:7:25"},"id":1451,"nodeType":"InheritanceSpecifier","src":"803:7:25"}],"canonicalName":"ERC721MintableOnceBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"350:392:25","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\n @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n @dev Note: This contract requires AccessControl."},"fullyImplemented":true,"id":1569,"linearizedBaseContracts":[1569,4737,1861],"name":"ERC721MintableOnceBase","nameLocation":"760:22:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1455,"libraryName":{"id":1452,"name":"ERC721Storage","nameLocations":["823:13:25"],"nodeType":"IdentifierPath","referencedDeclaration":3634,"src":"823:13:25"},"nodeType":"UsingForDirective","src":"817:45:25","typeName":{"id":1454,"nodeType":"UserDefinedTypeName","pathNode":{"id":1453,"name":"ERC721Storage.Layout","nameLocations":["841:13:25","855:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"841:20:25"},"referencedDeclaration":1950,"src":"841:20:25","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1459,"libraryName":{"id":1456,"name":"AccessControlStorage","nameLocations":["873:20:25"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"873:20:25"},"nodeType":"UsingForDirective","src":"867:59:25","typeName":{"id":1458,"nodeType":"UserDefinedTypeName","pathNode":{"id":1457,"name":"AccessControlStorage.Layout","nameLocations":["898:20:25","919:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"898:27:25"},"referencedDeclaration":369,"src":"898:27:25","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"constant":true,"functionSelector":"d5391393","id":1462,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"956:11:25","nodeType":"VariableDeclaration","scope":1569,"src":"932:46:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"932:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6d696e746572","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"970:8:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7","typeString":"literal_string \"minter\""},"value":"minter"},"visibility":"public"},{"baseFunctions":[1841],"body":{"id":1489,"nodeType":"Block","src":"1255:142:25","statements":[{"expression":{"arguments":[{"id":1475,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"1310:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1476,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1323:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1323:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1470,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1265:20:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1286:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1265:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1474,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1295:14:25","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"1265:44:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"1265:71:25"},{"expression":{"arguments":[{"id":1485,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"1378:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"1382:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1480,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1346:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1360:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1346:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1346:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1369:8:25","memberName":"mintOnce","nodeType":"MemberAccess","referencedDeclaration":2895,"src":"1346:31:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1346:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1488,"nodeType":"ExpressionStatement","src":"1346:44:25"}]},"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"985:205:25","text":"@inheritdoc IERC721Mintable\n @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt."},"functionSelector":"40c10f19","id":1490,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1204:4:25","nodeType":"FunctionDefinition","parameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"to","nameLocation":"1217:2:25","nodeType":"VariableDeclaration","scope":1490,"src":"1209:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1464,"name":"address","nodeType":"ElementaryTypeName","src":"1209:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1467,"mutability":"mutable","name":"tokenId","nameLocation":"1229:7:25","nodeType":"VariableDeclaration","scope":1490,"src":"1221:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1208:29:25"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[],"src":"1255:0:25"},"scope":1569,"src":"1195:202:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1851],"body":{"id":1522,"nodeType":"Block","src":"1698:166:25","statements":[{"expression":{"arguments":[{"id":1505,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"1753:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1506,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1766:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1500,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1708:20:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1729:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1708:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1708:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1504,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1738:14:25","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"1708:44:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1708:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1509,"nodeType":"ExpressionStatement","src":"1708:71:25"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1515,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1825:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1825:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1517,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"1839:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1518,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"1843:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1519,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1852:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1510,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"1789:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1803:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1789:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1789:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1812:12:25","memberName":"safeMintOnce","nodeType":"MemberAccess","referencedDeclaration":2934,"src":"1789:35:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1789:68:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"1789:68:25"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"1403:205:25","text":"@inheritdoc IERC721Mintable\n @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt."},"functionSelector":"8832e6e3","id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1622:8:25","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"to","nameLocation":"1639:2:25","nodeType":"VariableDeclaration","scope":1523,"src":"1631:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1492,"name":"address","nodeType":"ElementaryTypeName","src":"1631:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"tokenId","nameLocation":"1651:7:25","nodeType":"VariableDeclaration","scope":1523,"src":"1643:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"data","nameLocation":"1675:4:25","nodeType":"VariableDeclaration","scope":1523,"src":"1660:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1496,"name":"bytes","nodeType":"ElementaryTypeName","src":"1660:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1630:50:25"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"1698:0:25"},"scope":1569,"src":"1613:251:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1860],"body":{"id":1551,"nodeType":"Block","src":"2165:148:25","statements":[{"expression":{"arguments":[{"id":1537,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"2220:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1538,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"2233:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1532,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2175:20:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2196:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"2175:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2205:14:25","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"2175:44:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1541,"nodeType":"ExpressionStatement","src":"2175:71:25"},{"expression":{"arguments":[{"id":1547,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"2293:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1548,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"2297:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1542,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2256:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2270:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"2256:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2279:13:25","memberName":"batchMintOnce","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"2256:36:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256[] memory)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1550,"nodeType":"ExpressionStatement","src":"2256:50:25"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"1870:213:25","text":"@inheritdoc IERC721Mintable\n @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt."},"functionSelector":"4684d7e9","id":1552,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"2097:9:25","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1526,"mutability":"mutable","name":"to","nameLocation":"2115:2:25","nodeType":"VariableDeclaration","scope":1552,"src":"2107:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1525,"name":"address","nodeType":"ElementaryTypeName","src":"2107:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"tokenIds","nameLocation":"2138:8:25","nodeType":"VariableDeclaration","scope":1552,"src":"2119:27:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"2119:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1528,"nodeType":"ArrayTypeName","src":"2119:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2106:41:25"},"returnParameters":{"id":1531,"nodeType":"ParameterList","parameters":[],"src":"2165:0:25"},"scope":1569,"src":"2088:225:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1567,"nodeType":"Block","src":"2557:64:25","statements":[{"expression":{"arguments":[{"id":1564,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"2606:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1560,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2574:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3634_$","typeString":"type(library ERC721Storage)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2588:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"2574:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2574:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2597:8:25","memberName":"wasBurnt","nodeType":"MemberAccess","referencedDeclaration":3506,"src":"2574:31:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_uint256_$returns$_t_bool_$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (bool)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2574:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1559,"id":1566,"nodeType":"Return","src":"2567:47:25"}]},"documentation":{"id":1553,"nodeType":"StructuredDocumentation","src":"2319:147:25","text":"@notice Gets whether a token was burnt.\n @param tokenId The token identifier.\n @return tokenWasBurnt Whether the token was burnt."},"functionSelector":"c77c6955","id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"wasBurnt","nameLocation":"2480:8:25","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"tokenId","nameLocation":"2497:7:25","nodeType":"VariableDeclaration","scope":1568,"src":"2489:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1554,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2488:17:25"},"returnParameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"2542:13:25","nodeType":"VariableDeclaration","scope":1568,"src":"2537:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1557,"name":"bool","nodeType":"ElementaryTypeName","src":"2537:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2536:20:25"},"scope":1569,"src":"2471:150:25","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1570,"src":"742:1881:25","usedErrors":[236,1621,1629,1634,1641],"usedEvents":[1652]}],"src":"32:2592:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","exportedSymbols":{"ERC721BalanceOfAddressZero":[1624],"ERC721NonApprovedForApproval":[1590],"ERC721NonApprovedForTransfer":[1607],"ERC721NonExistingToken":[1598],"ERC721NonOwnedToken":[1614],"ERC721SafeTransferRejected":[1621],"ERC721SelfApproval":[1576],"ERC721SelfApprovalForAll":[1581],"ERC721TransferToAddressZero":[1593]},"id":1625,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1571,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:26"},{"documentation":{"id":1572,"nodeType":"StructuredDocumentation","src":"58:108:26","text":"@notice Thrown when trying to approve oneself.\n @param account The account trying to approve itself."},"errorSelector":"b7fdc010","id":1576,"name":"ERC721SelfApproval","nameLocation":"172:18:26","nodeType":"ErrorDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"account","nameLocation":"199:7:26","nodeType":"VariableDeclaration","scope":1576,"src":"191:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1573,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"190:17:26"},"src":"166:42:26"},{"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"210:120:26","text":"@notice Thrown when trying to approveForAll oneself.\n @param account The account trying to approveForAll itself."},"errorSelector":"e4215c6a","id":1581,"name":"ERC721SelfApprovalForAll","nameLocation":"336:24:26","nodeType":"ErrorDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"account","nameLocation":"369:7:26","nodeType":"VariableDeclaration","scope":1581,"src":"361:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1578,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"360:17:26"},"src":"330:48:26"},{"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"380:207:26","text":"@notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"c7563a18","id":1590,"name":"ERC721NonApprovedForApproval","nameLocation":"593:28:26","nodeType":"ErrorDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"mutability":"mutable","name":"sender","nameLocation":"630:6:26","nodeType":"VariableDeclaration","scope":1590,"src":"622:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"owner","nameLocation":"646:5:26","nodeType":"VariableDeclaration","scope":1590,"src":"638:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1588,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:26","nodeType":"VariableDeclaration","scope":1590,"src":"653:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"653:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:48:26"},"src":"587:83:26"},{"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"672:66:26","text":"@notice Thrown when transferring a token to the zero address."},"errorSelector":"86c87067","id":1593,"name":"ERC721TransferToAddressZero","nameLocation":"744:27:26","nodeType":"ErrorDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[],"src":"771:2:26"},"src":"738:36:26"},{"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"776:132:26","text":"@notice Thrown when a token does not exist but is required to.\n @param tokenId The identifier of the token that was checked."},"errorSelector":"dd560475","id":1598,"name":"ERC721NonExistingToken","nameLocation":"914:22:26","nodeType":"ErrorDefinition","parameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"tokenId","nameLocation":"945:7:26","nodeType":"VariableDeclaration","scope":1598,"src":"937:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"936:17:26"},"src":"908:46:26"},{"documentation":{"id":1599,"nodeType":"StructuredDocumentation","src":"956:197:26","text":"@notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"a4a3018b","id":1607,"name":"ERC721NonApprovedForTransfer","nameLocation":"1159:28:26","nodeType":"ErrorDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"sender","nameLocation":"1196:6:26","nodeType":"VariableDeclaration","scope":1607,"src":"1188:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1600,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"owner","nameLocation":"1212:5:26","nodeType":"VariableDeclaration","scope":1607,"src":"1204:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1602,"name":"address","nodeType":"ElementaryTypeName","src":"1204:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"tokenId","nameLocation":"1227:7:26","nodeType":"VariableDeclaration","scope":1607,"src":"1219:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1187:48:26"},"src":"1153:83:26"},{"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"1238:185:26","text":"@notice Thrown when a token is not owned by the expected account.\n @param account The account that was expected to own the token.\n @param tokenId The identifier of the token."},"errorSelector":"14dbb536","id":1614,"name":"ERC721NonOwnedToken","nameLocation":"1429:19:26","nodeType":"ErrorDefinition","parameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"account","nameLocation":"1457:7:26","nodeType":"VariableDeclaration","scope":1614,"src":"1449:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"1449:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"tokenId","nameLocation":"1474:7:26","nodeType":"VariableDeclaration","scope":1614,"src":"1466:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1611,"name":"uint256","nodeType":"ElementaryTypeName","src":"1466:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:34:26"},"src":"1423:60:26"},{"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"1485:172:26","text":"@notice Thrown when a safe transfer is rejected by the recipient contract.\n @param recipient The recipient contract.\n @param tokenId The identifier of the token."},"errorSelector":"c215a7a1","id":1621,"name":"ERC721SafeTransferRejected","nameLocation":"1663:26:26","nodeType":"ErrorDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"recipient","nameLocation":"1698:9:26","nodeType":"VariableDeclaration","scope":1621,"src":"1690:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"1690:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"tokenId","nameLocation":"1717:7:26","nodeType":"VariableDeclaration","scope":1621,"src":"1709:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1689:36:26"},"src":"1657:69:26"},{"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"1728:66:26","text":"@notice Thrown when querying the balance of the zero address."},"errorSelector":"aefbce4e","id":1624,"name":"ERC721BalanceOfAddressZero","nameLocation":"1800:26:26","nodeType":"ErrorDefinition","parameters":{"id":1623,"nodeType":"ParameterList","parameters":[],"src":"1826:2:26"},"src":"1794:35:26"}],"src":"32:1798:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","exportedSymbols":{"ERC721ExistingToken":[1634],"ERC721MintToAddressZero":[1629]},"id":1635,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1626,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:27"},{"documentation":{"id":1627,"nodeType":"StructuredDocumentation","src":"58:61:27","text":"@notice Thrown when minting a token to the zero address."},"errorSelector":"7851b9cd","id":1629,"name":"ERC721MintToAddressZero","nameLocation":"125:23:27","nodeType":"ErrorDefinition","parameters":{"id":1628,"nodeType":"ParameterList","parameters":[],"src":"148:2:27"},"src":"119:32:27"},{"documentation":{"id":1630,"nodeType":"StructuredDocumentation","src":"153:129:27","text":"@notice Thrown when minting a token that already exists.\n @param tokenId The identifier of the token that already exists."},"errorSelector":"753eceac","id":1634,"name":"ERC721ExistingToken","nameLocation":"288:19:27","nodeType":"ErrorDefinition","parameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"tokenId","nameLocation":"316:7:27","nodeType":"VariableDeclaration","scope":1634,"src":"308:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"308:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"307:17:27"},"src":"282:43:27"}],"src":"32:294:27"},"id":27},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","exportedSymbols":{"ERC721BurntToken":[1641]},"id":1642,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1636,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:28"},{"documentation":{"id":1637,"nodeType":"StructuredDocumentation","src":"58:174:28","text":"@notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n @param tokenId The identifier of the token that has been burnt before."},"errorSelector":"31e8d3d5","id":1641,"name":"ERC721BurntToken","nameLocation":"238:16:28","nodeType":"ErrorDefinition","parameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1639,"mutability":"mutable","name":"tokenId","nameLocation":"263:7:28","nodeType":"VariableDeclaration","scope":1641,"src":"255:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1638,"name":"uint256","nodeType":"ElementaryTypeName","src":"255:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"254:17:28"},"src":"232:40:28"}],"src":"32:241:28"},"id":28},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","exportedSymbols":{"Approval":[1661],"ApprovalForAll":[1670],"Transfer":[1652]},"id":1671,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1643,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:29"},{"anonymous":false,"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"58:179:29","text":"@notice Emitted when a token is transferred.\n @param from The previous token owner.\n @param to The new token owner.\n @param tokenId The transferred token identifier."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1652,"name":"Transfer","nameLocation":"243:8:29","nodeType":"EventDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"268:4:29","nodeType":"VariableDeclaration","scope":1652,"src":"252:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"252:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1648,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"290:2:29","nodeType":"VariableDeclaration","scope":1652,"src":"274:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1647,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1650,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"310:7:29","nodeType":"VariableDeclaration","scope":1652,"src":"294:23:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"294:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:67:29"},"src":"237:82:29"},{"anonymous":false,"documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"321:183:29","text":"@notice Emitted when a single token approval is set.\n @param owner The token owner.\n @param approved The approved address.\n @param tokenId The approved token identifier."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1661,"name":"Approval","nameLocation":"510:8:29","nodeType":"EventDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"535:5:29","nodeType":"VariableDeclaration","scope":1661,"src":"519:21:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1654,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1657,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"558:8:29","nodeType":"VariableDeclaration","scope":1661,"src":"542:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1656,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1659,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"584:7:29","nodeType":"VariableDeclaration","scope":1661,"src":"568:23:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"518:74:29"},"src":"504:89:29"},{"anonymous":false,"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"595:222:29","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1670,"name":"ApprovalForAll","nameLocation":"823:14:29","nodeType":"EventDefinition","parameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"854:5:29","nodeType":"VariableDeclaration","scope":1670,"src":"838:21:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1666,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"877:8:29","nodeType":"VariableDeclaration","scope":1670,"src":"861:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1668,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"892:8:29","nodeType":"VariableDeclaration","scope":1670,"src":"887:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1667,"name":"bool","nodeType":"ElementaryTypeName","src":"887:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:64:29"},"src":"817:85:29"}],"src":"32:871:29"},"id":29},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1756]},"id":1757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1672,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1673,"nodeType":"StructuredDocumentation","src":"58:296:30","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1756,"linearizedBaseContracts":[1756],"name":"IERC721","nameLocation":"364:7:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"378:684:30","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1681,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:30","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1676,"mutability":"mutable","name":"to","nameLocation":"1092:2:30","nodeType":"VariableDeclaration","scope":1681,"src":"1084:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:30","nodeType":"VariableDeclaration","scope":1681,"src":"1096:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1677,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:30"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"1121:0:30"},"scope":1756,"src":"1067:55:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"1128:341:30","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1689,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:30","nodeType":"FunctionDefinition","parameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"operator","nameLocation":"1509:8:30","nodeType":"VariableDeclaration","scope":1689,"src":"1501:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"approved","nameLocation":"1524:8:30","nodeType":"VariableDeclaration","scope":1689,"src":"1519:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1685,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:30"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[],"src":"1542:0:30"},"scope":1756,"src":"1474:69:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"1549:667:30","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1699,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:30","nodeType":"FunctionDefinition","parameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"from","nameLocation":"2251:4:30","nodeType":"VariableDeclaration","scope":1699,"src":"2243:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1691,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"to","nameLocation":"2265:2:30","nodeType":"VariableDeclaration","scope":1699,"src":"2257:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1693,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:30","nodeType":"VariableDeclaration","scope":1699,"src":"2269:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:30"},"returnParameters":{"id":1698,"nodeType":"ParameterList","parameters":[],"src":"2294:0:30"},"scope":1756,"src":"2221:74:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"2301:663:30","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1709,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:30","nodeType":"FunctionDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"from","nameLocation":"3003:4:30","nodeType":"VariableDeclaration","scope":1709,"src":"2995:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1704,"mutability":"mutable","name":"to","nameLocation":"3017:2:30","nodeType":"VariableDeclaration","scope":1709,"src":"3009:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1703,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1706,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:30","nodeType":"VariableDeclaration","scope":1709,"src":"3021:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1705,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:30"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[],"src":"3046:0:30"},"scope":1756,"src":"2969:78:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1710,"nodeType":"StructuredDocumentation","src":"3053:735:30","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1721,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:30","nodeType":"FunctionDefinition","parameters":{"id":1719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"from","nameLocation":"3827:4:30","nodeType":"VariableDeclaration","scope":1721,"src":"3819:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1711,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"to","nameLocation":"3841:2:30","nodeType":"VariableDeclaration","scope":1721,"src":"3833:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:30","nodeType":"VariableDeclaration","scope":1721,"src":"3845:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1718,"mutability":"mutable","name":"data","nameLocation":"3877:4:30","nodeType":"VariableDeclaration","scope":1721,"src":"3862:19:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1717,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:30"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[],"src":"3891:0:30"},"scope":1756,"src":"3793:99:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1722,"nodeType":"StructuredDocumentation","src":"3898:209:30","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1729,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:30","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"owner","nameLocation":"4139:5:30","nodeType":"VariableDeclaration","scope":1729,"src":"4131:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1723,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:30"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"balance","nameLocation":"4177:7:30","nodeType":"VariableDeclaration","scope":1729,"src":"4169:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:30"},"scope":1756,"src":"4112:74:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"4192:217:30","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1737,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:30","nodeType":"FunctionDefinition","parameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:30","nodeType":"VariableDeclaration","scope":1737,"src":"4431:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:30"},"returnParameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1735,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:30","nodeType":"VariableDeclaration","scope":1737,"src":"4471:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1734,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:30"},"scope":1756,"src":"4414:77:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1738,"nodeType":"StructuredDocumentation","src":"4497:285:30","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1745,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:30","nodeType":"FunctionDefinition","parameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:30","nodeType":"VariableDeclaration","scope":1745,"src":"4808:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1739,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:30"},"returnParameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"approved","nameLocation":"4856:8:30","nodeType":"VariableDeclaration","scope":1745,"src":"4848:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:30"},"scope":1756,"src":"4787:79:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"4872:323:30","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1755,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:30","nodeType":"FunctionDefinition","parameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"owner","nameLocation":"5234:5:30","nodeType":"VariableDeclaration","scope":1755,"src":"5226:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"operator","nameLocation":"5249:8:30","nodeType":"VariableDeclaration","scope":1755,"src":"5241:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1749,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:30"},"returnParameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:30","nodeType":"VariableDeclaration","scope":1755,"src":"5282:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1752,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:30"},"scope":1756,"src":"5200:103:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1757,"src":"354:4951:30","usedErrors":[],"usedEvents":[]}],"src":"32:5274:30"},"id":30},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","exportedSymbols":{"IERC721BatchTransfer":[1771]},"id":1772,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1758,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721BatchTransfer","contractDependencies":[],"contractKind":"interface","documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"58:207:31","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0xf3993d11."},"fullyImplemented":false,"id":1771,"linearizedBaseContracts":[1771],"name":"IERC721BatchTransfer","nameLocation":"275:20:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"302:578:31","text":"@notice Unsafely transfers a batch of tokens to a recipient.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"functionSelector":"f3993d11","id":1770,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"894:17:31","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"from","nameLocation":"920:4:31","nodeType":"VariableDeclaration","scope":1770,"src":"912:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"to","nameLocation":"934:2:31","nodeType":"VariableDeclaration","scope":1770,"src":"926:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"tokenIds","nameLocation":"957:8:31","nodeType":"VariableDeclaration","scope":1770,"src":"938:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1766,"nodeType":"ArrayTypeName","src":"938:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"911:55:31"},"returnParameters":{"id":1769,"nodeType":"ParameterList","parameters":[],"src":"975:0:31"},"scope":1771,"src":"885:91:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1772,"src":"265:713:31","usedErrors":[],"usedEvents":[]}],"src":"32:947:31"},"id":31},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","exportedSymbols":{"IERC721Burnable":[1792]},"id":1793,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1773,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1774,"nodeType":"StructuredDocumentation","src":"58:201:32","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5."},"fullyImplemented":false,"id":1792,"linearizedBaseContracts":[1792],"name":"IERC721Burnable","nameLocation":"269:15:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"291:371:32","text":"@notice Burns a token.\n @dev Reverts if `tokenId` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"functionSelector":"79cc6790","id":1782,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"676:8:32","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"from","nameLocation":"693:4:32","nodeType":"VariableDeclaration","scope":1782,"src":"685:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"685:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"tokenId","nameLocation":"707:7:32","nodeType":"VariableDeclaration","scope":1782,"src":"699:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"684:31:32"},"returnParameters":{"id":1781,"nodeType":"ParameterList","parameters":[],"src":"724:0:32"},"scope":1792,"src":"667:58:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1783,"nodeType":"StructuredDocumentation","src":"731:425:32","text":"@notice Burns a batch of tokens.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"functionSelector":"f2472965","id":1791,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1170:13:32","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"from","nameLocation":"1192:4:32","nodeType":"VariableDeclaration","scope":1791,"src":"1184:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1784,"name":"address","nodeType":"ElementaryTypeName","src":"1184:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1788,"mutability":"mutable","name":"tokenIds","nameLocation":"1217:8:32","nodeType":"VariableDeclaration","scope":1791,"src":"1198:27:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"1198:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1787,"nodeType":"ArrayTypeName","src":"1198:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1183:43:32"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[],"src":"1235:0:32"},"scope":1792,"src":"1161:75:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1793,"src":"259:979:32","usedErrors":[],"usedEvents":[]}],"src":"32:1207:32"},"id":32},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","exportedSymbols":{"IERC721Deliverable":[1806]},"id":1807,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1794,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Deliverable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1795,"nodeType":"StructuredDocumentation","src":"58:204:33","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x9da5e832."},"fullyImplemented":false,"id":1806,"linearizedBaseContracts":[1806],"name":"IERC721Deliverable","nameLocation":"272:18:33","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1796,"nodeType":"StructuredDocumentation","src":"297:487:33","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Reverts if `recipients` and `tokenIds` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"9da5e832","id":1805,"implemented":false,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"798:7:33","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"recipients","nameLocation":"825:10:33","nodeType":"VariableDeclaration","scope":1805,"src":"806:29:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"806:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1798,"nodeType":"ArrayTypeName","src":"806:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"tokenIds","nameLocation":"856:8:33","nodeType":"VariableDeclaration","scope":1805,"src":"837:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1801,"nodeType":"ArrayTypeName","src":"837:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"805:60:33"},"returnParameters":{"id":1804,"nodeType":"ParameterList","parameters":[],"src":"874:0:33"},"scope":1806,"src":"789:86:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1807,"src":"262:615:33","usedErrors":[],"usedEvents":[]}],"src":"32:846:33"},"id":33},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","exportedSymbols":{"IERC721Metadata":[1830]},"id":1831,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1808,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"58:201:34","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f."},"fullyImplemented":false,"id":1830,"linearizedBaseContracts":[1830],"name":"IERC721Metadata","nameLocation":"269:15:34","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"291:105:34","text":"@notice Gets the name of the token. E.g. \"My Token\".\n @return tokenName The name of the token."},"functionSelector":"06fdde03","id":1815,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"410:4:34","nodeType":"FunctionDefinition","parameters":{"id":1811,"nodeType":"ParameterList","parameters":[],"src":"414:2:34"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"tokenName","nameLocation":"454:9:34","nodeType":"VariableDeclaration","scope":1815,"src":"440:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1812,"name":"string","nodeType":"ElementaryTypeName","src":"440:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"439:25:34"},"scope":1830,"src":"401:64:34","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"471:106:34","text":"@notice Gets the symbol of the token. E.g. \"TOK\".\n @return tokenSymbol The symbol of the token."},"functionSelector":"95d89b41","id":1821,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"591:6:34","nodeType":"FunctionDefinition","parameters":{"id":1817,"nodeType":"ParameterList","parameters":[],"src":"597:2:34"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"tokenSymbol","nameLocation":"637:11:34","nodeType":"VariableDeclaration","scope":1821,"src":"623:25:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1818,"name":"string","nodeType":"ElementaryTypeName","src":"623:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"622:27:34"},"scope":1830,"src":"582:68:34","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"656:215:34","text":"@notice Gets the metadata URI for a token identifier.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier.\n @return uri The metadata URI for the token identifier."},"functionSelector":"c87b56dd","id":1829,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"885:8:34","nodeType":"FunctionDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"tokenId","nameLocation":"902:7:34","nodeType":"VariableDeclaration","scope":1829,"src":"894:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"893:17:34"},"returnParameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"uri","nameLocation":"948:3:34","nodeType":"VariableDeclaration","scope":1829,"src":"934:17:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1826,"name":"string","nodeType":"ElementaryTypeName","src":"934:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"933:19:34"},"scope":1830,"src":"876:77:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1831,"src":"259:696:34","usedErrors":[],"usedEvents":[]}],"src":"32:924:34"},"id":34},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","exportedSymbols":{"IERC721Mintable":[1861]},"id":1862,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1832,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"58:201:35","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8e773e13."},"fullyImplemented":false,"id":1861,"linearizedBaseContracts":[1861],"name":"IERC721Mintable","nameLocation":"269:15:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"291:311:35","text":"@notice Unsafely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"functionSelector":"40c10f19","id":1841,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"616:4:35","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"to","nameLocation":"629:2:35","nodeType":"VariableDeclaration","scope":1841,"src":"621:10:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"tokenId","nameLocation":"641:7:35","nodeType":"VariableDeclaration","scope":1841,"src":"633:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"633:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"620:29:35"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[],"src":"658:0:35"},"scope":1861,"src":"607:52:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1842,"nodeType":"StructuredDocumentation","src":"665:504:35","text":"@notice Safely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"functionSelector":"8832e6e3","id":1851,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1183:8:35","nodeType":"FunctionDefinition","parameters":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"to","nameLocation":"1200:2:35","nodeType":"VariableDeclaration","scope":1851,"src":"1192:10:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1843,"name":"address","nodeType":"ElementaryTypeName","src":"1192:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"tokenId","nameLocation":"1212:7:35","nodeType":"VariableDeclaration","scope":1851,"src":"1204:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1845,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"data","nameLocation":"1236:4:35","nodeType":"VariableDeclaration","scope":1851,"src":"1221:19:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1847,"name":"bytes","nodeType":"ElementaryTypeName","src":"1221:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1191:50:35"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[],"src":"1250:0:35"},"scope":1861,"src":"1174:77:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"1257:356:35","text":"@notice Unsafely mints a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"4684d7e9","id":1860,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1627:9:35","nodeType":"FunctionDefinition","parameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"to","nameLocation":"1645:2:35","nodeType":"VariableDeclaration","scope":1860,"src":"1637:10:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1857,"mutability":"mutable","name":"tokenIds","nameLocation":"1668:8:35","nodeType":"VariableDeclaration","scope":1860,"src":"1649:27:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1649:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1856,"nodeType":"ArrayTypeName","src":"1649:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1636:41:35"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[],"src":"1686:0:35"},"scope":1861,"src":"1618:69:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1862,"src":"259:1430:35","usedErrors":[],"usedEvents":[]}],"src":"32:1658:35"},"id":35},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1879]},"id":1880,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1863,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"58:263:36","text":"@title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC721 contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x150b7a02."},"fullyImplemented":false,"id":1879,"linearizedBaseContracts":[1879],"name":"IERC721Receiver","nameLocation":"331:15:36","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1865,"nodeType":"StructuredDocumentation","src":"353:589:36","text":"@notice Handles the receipt of an ERC721 token.\n @dev Note: This function is called by an ERC721 contract after a safe transfer.\n @dev Note: The ERC721 contract address is always the message sender.\n @param operator The initiator of the safe transfer.\n @param from The previous token owner.\n @param tokenId The token identifier.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."},"functionSelector":"150b7a02","id":1878,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"956:16:36","nodeType":"FunctionDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"operator","nameLocation":"981:8:36","nodeType":"VariableDeclaration","scope":1878,"src":"973:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1869,"mutability":"mutable","name":"from","nameLocation":"999:4:36","nodeType":"VariableDeclaration","scope":1878,"src":"991:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1868,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"tokenId","nameLocation":"1013:7:36","nodeType":"VariableDeclaration","scope":1878,"src":"1005:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"data","nameLocation":"1037:4:36","nodeType":"VariableDeclaration","scope":1878,"src":"1022:19:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1872,"name":"bytes","nodeType":"ElementaryTypeName","src":"1022:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"972:70:36"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"magicValue","nameLocation":"1068:10:36","nodeType":"VariableDeclaration","scope":1878,"src":"1061:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1875,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:19:36"},"scope":1879,"src":"947:133:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1880,"src":"321:761:36","usedErrors":[],"usedEvents":[]}],"src":"32:1051:36"},"id":36},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","exportedSymbols":{"Address":[4707],"Approval":[1661],"ApprovalForAll":[1670],"ERC721BalanceOfAddressZero":[1624],"ERC721BurntToken":[1641],"ERC721ExistingToken":[1634],"ERC721MintToAddressZero":[1629],"ERC721NonApprovedForApproval":[1590],"ERC721NonApprovedForTransfer":[1607],"ERC721NonExistingToken":[1598],"ERC721NonOwnedToken":[1614],"ERC721SafeTransferRejected":[1621],"ERC721SelfApproval":[1576],"ERC721SelfApprovalForAll":[1581],"ERC721Storage":[3634],"ERC721TransferToAddressZero":[1593],"IERC721":[1756],"IERC721BatchTransfer":[1771],"IERC721Burnable":[1792],"IERC721Deliverable":[1806],"IERC721Metadata":[1830],"IERC721Mintable":[1861],"IERC721Receiver":[1879],"InconsistentArrayLengths":[7],"InterfaceDetectionStorage":[1010],"Transfer":[1652]},"id":3635,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1881,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:37"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","file":"./../errors/ERC721Errors.sol","id":1891,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1625,"src":"103:280:37","symbolAliases":[{"foreign":{"id":1882,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"111:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1883,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"131:24:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1884,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"157:28:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1885,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"187:27:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1886,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"216:22:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1887,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"240:28:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1888,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"270:19:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1889,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"291:26:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1890,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"319:26:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","file":"./../errors/ERC721MintableErrors.sol","id":1894,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1635,"src":"384:98:37","symbolAliases":[{"foreign":{"id":1892,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"392:23:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1893,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"417:19:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","file":"./../errors/ERC721MintableOnceErrors.sol","id":1896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1642,"src":"483:74:37","symbolAliases":[{"foreign":{"id":1895,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"491:16:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../../CommonErrors.sol","id":1898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":11,"src":"558:69:37","symbolAliases":[{"foreign":{"id":1897,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"566:24:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","file":"./../events/ERC721Events.sol","id":1902,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1671,"src":"628:80:37","symbolAliases":[{"foreign":{"id":1899,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"636:8:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1900,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"646:8:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1901,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"656:14:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../interfaces/IERC721.sol","id":1904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1757,"src":"709:52:37","symbolAliases":[{"foreign":{"id":1903,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"717:7:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","file":"./../interfaces/IERC721BatchTransfer.sol","id":1906,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1772,"src":"762:78:37","symbolAliases":[{"foreign":{"id":1905,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"770:20:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1831,"src":"841:68:37","symbolAliases":[{"foreign":{"id":1907,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"849:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"./../interfaces/IERC721Mintable.sol","id":1910,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1862,"src":"910:68:37","symbolAliases":[{"foreign":{"id":1909,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"918:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","file":"./../interfaces/IERC721Deliverable.sol","id":1912,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1807,"src":"979:74:37","symbolAliases":[{"foreign":{"id":1911,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"987:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","file":"./../interfaces/IERC721Burnable.sol","id":1914,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1793,"src":"1054:68:37","symbolAliases":[{"foreign":{"id":1913,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"1062:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","file":"./../interfaces/IERC721Receiver.sol","id":1916,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1880,"src":"1123:68:37","symbolAliases":[{"foreign":{"id":1915,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"1131:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1918,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":4708,"src":"1192:66:37","symbolAliases":[{"foreign":{"id":1917,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"1200:7:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":1920,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3635,"sourceUnit":1011,"src":"1259:107:37","symbolAliases":[{"foreign":{"id":1919,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"1267:25:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3634,"linearizedBaseContracts":[3634],"name":"ERC721Storage","nameLocation":"1376:13:37","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1923,"libraryName":{"id":1921,"name":"Address","nameLocations":["1402:7:37"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"1402:7:37"},"nodeType":"UsingForDirective","src":"1396:26:37","typeName":{"id":1922,"name":"address","nodeType":"ElementaryTypeName","src":"1414:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1927,"libraryName":{"id":1924,"name":"ERC721Storage","nameLocations":["1433:13:37"],"nodeType":"IdentifierPath","referencedDeclaration":3634,"src":"1433:13:37"},"nodeType":"UsingForDirective","src":"1427:45:37","typeName":{"id":1926,"nodeType":"UserDefinedTypeName","pathNode":{"id":1925,"name":"ERC721Storage.Layout","nameLocations":["1451:13:37","1465:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"1451:20:37"},"referencedDeclaration":1950,"src":"1451:20:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1931,"libraryName":{"id":1928,"name":"InterfaceDetectionStorage","nameLocations":["1483:25:37"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"1483:25:37"},"nodeType":"UsingForDirective","src":"1477:69:37","typeName":{"id":1930,"nodeType":"UserDefinedTypeName","pathNode":{"id":1929,"name":"InterfaceDetectionStorage.Layout","nameLocations":["1513:25:37","1539:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"1513:32:37"},"referencedDeclaration":920,"src":"1513:32:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC721Storage.Layout","id":1950,"members":[{"constant":false,"id":1935,"mutability":"mutable","name":"owners","nameLocation":"1604:6:37","nodeType":"VariableDeclaration","scope":1950,"src":"1576:34:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1934,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1932,"name":"uint256","nodeType":"ElementaryTypeName","src":"1584:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1576:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1933,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1939,"mutability":"mutable","name":"balances","nameLocation":"1648:8:37","nodeType":"VariableDeclaration","scope":1950,"src":"1620:36:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1938,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1936,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1620:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"approvals","nameLocation":"1694:9:37","nodeType":"VariableDeclaration","scope":1950,"src":"1666:37:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1942,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1940,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1666:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1941,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"operators","nameLocation":"1758:9:37","nodeType":"VariableDeclaration","scope":1950,"src":"1713:54:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1948,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1944,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1713:44:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1947,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1945,"name":"address","nodeType":"ElementaryTypeName","src":"1740:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1732:24:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1946,"name":"bool","nodeType":"ElementaryTypeName","src":"1751:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"1559:6:37","nodeType":"StructDefinition","scope":3634,"src":"1552:222:37","visibility":"public"},{"constant":true,"id":1963,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1806:19:37","nodeType":"VariableDeclaration","scope":3634,"src":"1780:118:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e4552433732312e4552433732312e73746f72616765","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1854:37:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""},"value":"animoca.token.ERC721.ERC721.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""}],"id":1956,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1844:9:37","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:48:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1836:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:37","typeDescriptions":{}}},"id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1836:57:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1896:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1836:61:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1828:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1828:7:37","typeDescriptions":{}}},"id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:70:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1968,"mutability":"constant","name":"ERC721_RECEIVED","nameLocation":"1930:15:37","nodeType":"VariableDeclaration","scope":3634,"src":"1905:84:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1964,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1905:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":1965,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"1948:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1879_$","typeString":"type(contract IERC721Receiver)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1964:16:37","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1878,"src":"1948:32:37","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1981:8:37","memberName":"selector","nodeType":"MemberAccess","src":"1948:41:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":1973,"mutability":"constant","name":"TOKEN_APPROVAL_OWNER_FLAG","nameLocation":"2157:25:37","nodeType":"VariableDeclaration","scope":3634,"src":"2131:62:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"2131:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"},"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2185:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2190:3:37","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2185:8:37","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}},"visibility":"internal"},{"constant":true,"id":1976,"mutability":"constant","name":"BURNT_TOKEN_OWNER_VALUE","nameLocation":"2353:23:37","nodeType":"VariableDeclaration","scope":3634,"src":"2327:118:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"2327:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864656164303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2379:66:37","typeDescriptions":{"typeIdentifier":"t_rational_100719116927691798707895874029850069994745719541394658707722161504685790330880_by_1","typeString":"int_const 1007...(70 digits omitted)...0880"},"value":"0xdead000000000000000000000000000000000000000000000000000000000000"},"visibility":"internal"},{"body":{"id":1992,"nodeType":"Block","src":"2555:106:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1986,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"2627:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1756_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1756_$","typeString":"type(contract IERC721)"}],"id":1985,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2622:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2622:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1756","typeString":"type(contract IERC721)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2636:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"2622:25:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2649:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1980,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2565:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2591:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"2565:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2600:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"2565:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:89:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1991,"nodeType":"ExpressionStatement","src":"2565:89:37"}]},"documentation":{"id":1977,"nodeType":"StructuredDocumentation","src":"2452:73:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721."},"id":1993,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"2539:4:37","nodeType":"FunctionDefinition","parameters":{"id":1978,"nodeType":"ParameterList","parameters":[],"src":"2543:2:37"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[],"src":"2555:0:37"},"scope":3634,"src":"2530:131:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2009,"nodeType":"Block","src":"2802:119:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2003,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"2874:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1771_$","typeString":"type(contract IERC721BatchTransfer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1771_$","typeString":"type(contract IERC721BatchTransfer)"}],"id":2002,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2869:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2869:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721BatchTransfer_$1771","typeString":"type(contract IERC721BatchTransfer)"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2896:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"2869:38:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2909:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1997,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2812:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2838:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"2812:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2001,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2847:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"2812:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:102:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2008,"nodeType":"ExpressionStatement","src":"2812:102:37"}]},"documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"2667:86:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer."},"id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721BatchTransfer","nameLocation":"2767:23:37","nodeType":"FunctionDefinition","parameters":{"id":1995,"nodeType":"ParameterList","parameters":[],"src":"2790:2:37"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[],"src":"2802:0:37"},"scope":3634,"src":"2758:163:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2026,"nodeType":"Block","src":"3052:114:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2020,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3124:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1830_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1830_$","typeString":"type(contract IERC721Metadata)"}],"id":2019,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3119:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3119:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1830","typeString":"type(contract IERC721Metadata)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3141:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"3119:33:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3154:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2014,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3062:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3088:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"3062:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3097:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"3062:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:97:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2025,"nodeType":"ExpressionStatement","src":"3062:97:37"}]},"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"2927:81:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Metadata."},"id":2027,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Metadata","nameLocation":"3022:18:37","nodeType":"FunctionDefinition","parameters":{"id":2012,"nodeType":"ParameterList","parameters":[],"src":"3040:2:37"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[],"src":"3052:0:37"},"scope":3634,"src":"3013:153:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2043,"nodeType":"Block","src":"3297:114:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2037,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"3369:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1861_$","typeString":"type(contract IERC721Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1861_$","typeString":"type(contract IERC721Mintable)"}],"id":2036,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3364:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Mintable_$1861","typeString":"type(contract IERC721Mintable)"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3386:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"3364:33:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3399:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2031,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3307:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3333:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"3307:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3342:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"3307:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:97:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2042,"nodeType":"ExpressionStatement","src":"3307:97:37"}]},"documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"3172:81:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Mintable."},"id":2044,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Mintable","nameLocation":"3267:18:37","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[],"src":"3285:2:37"},"returnParameters":{"id":2030,"nodeType":"ParameterList","parameters":[],"src":"3297:0:37"},"scope":3634,"src":"3258:153:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2060,"nodeType":"Block","src":"3548:117:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2054,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"3620:18:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1806_$","typeString":"type(contract IERC721Deliverable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1806_$","typeString":"type(contract IERC721Deliverable)"}],"id":2053,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3615:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3615:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Deliverable_$1806","typeString":"type(contract IERC721Deliverable)"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3640:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"3615:36:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3653:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2048,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3558:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3584:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"3558:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3593:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"3558:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:100:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2059,"nodeType":"ExpressionStatement","src":"3558:100:37"}]},"documentation":{"id":2045,"nodeType":"StructuredDocumentation","src":"3417:84:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable."},"id":2061,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Deliverable","nameLocation":"3515:21:37","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[],"src":"3536:2:37"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[],"src":"3548:0:37"},"scope":3634,"src":"3506:159:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2077,"nodeType":"Block","src":"3796:114:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2071,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"3868:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1792_$","typeString":"type(contract IERC721Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1792_$","typeString":"type(contract IERC721Burnable)"}],"id":2070,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3863:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Burnable_$1792","typeString":"type(contract IERC721Burnable)"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3885:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"3863:33:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3898:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2065,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3806:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3832:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"3806:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3841:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"3806:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:97:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2076,"nodeType":"ExpressionStatement","src":"3806:97:37"}]},"documentation":{"id":2062,"nodeType":"StructuredDocumentation","src":"3671:81:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Burnable."},"id":2078,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Burnable","nameLocation":"3766:18:37","nodeType":"FunctionDefinition","parameters":{"id":2063,"nodeType":"ParameterList","parameters":[],"src":"3784:2:37"},"returnParameters":{"id":2064,"nodeType":"ParameterList","parameters":[],"src":"3796:0:37"},"scope":3634,"src":"3757:153:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2195,"nodeType":"Block","src":"4714:963:37","statements":[{"assignments":[2092],"declarations":[{"constant":false,"id":2092,"mutability":"mutable","name":"owner","nameLocation":"4732:5:37","nodeType":"VariableDeclaration","scope":2195,"src":"4724:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"4724:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2097,"initialValue":{"baseExpression":{"expression":{"id":2093,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"4740:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4742:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"4740:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2096,"indexExpression":{"id":2095,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"4749:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4740:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4724:33:37"},{"condition":{"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4771:20:37","subExpression":{"arguments":[{"id":2099,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"4785:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2098,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"4772:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4772:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2106,"nodeType":"IfStatement","src":"4767:64:37","trueBody":{"errorCall":{"arguments":[{"id":2103,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"4823:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2102,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"4800:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2105,"nodeType":"RevertStatement","src":"4793:38:37"}},{"assignments":[2108],"declarations":[{"constant":false,"id":2108,"mutability":"mutable","name":"ownerAddress","nameLocation":"4849:12:37","nodeType":"VariableDeclaration","scope":2195,"src":"4841:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2107,"name":"address","nodeType":"ElementaryTypeName","src":"4841:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2112,"initialValue":{"arguments":[{"id":2110,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"4876:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2109,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"4864:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4864:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4841:41:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2113,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"4896:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2114,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4902:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4896:18:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2120,"nodeType":"IfStatement","src":"4892:63:37","trueBody":{"errorCall":{"arguments":[{"id":2117,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4942:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2116,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"4923:18:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4923:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2119,"nodeType":"RevertStatement","src":"4916:39:37"}},{"condition":{"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4969:39:37","subExpression":{"arguments":[{"id":2122,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"4984:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2123,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4987:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2124,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5001:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2121,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"4970:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4970:38:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2133,"nodeType":"IfStatement","src":"4965:111:37","trueBody":{"errorCall":{"arguments":[{"id":2128,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5046:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2129,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5054:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2130,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5068:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2127,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"5017:28:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:59:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2132,"nodeType":"RevertStatement","src":"5010:66:37"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2134,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"5090:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5096:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"5096:7:37","typeDescriptions":{}}},"id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5096:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5090:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2187,"nodeType":"Block","src":"5311:310:37","statements":[{"assignments":[2161],"declarations":[{"constant":false,"id":2161,"mutability":"mutable","name":"ownerWithApprovalBit","nameLocation":"5333:20:37","nodeType":"VariableDeclaration","scope":2187,"src":"5325:28:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"5325:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2165,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"5356:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2163,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"5364:25:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5356:33:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5325:64:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"5407:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2167,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5416:20:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5407:29:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"5403:169:37","trueBody":{"id":2177,"nodeType":"Block","src":"5438:134:37","statements":[{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2169,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"5517:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5519:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"5517:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2173,"indexExpression":{"id":2171,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5526:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5517:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2174,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5537:20:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5517:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"5517:40:37"}]}},{"expression":{"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2179,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"5585:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5587:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"5585:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2183,"indexExpression":{"id":2181,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5597:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5585:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2184,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"5608:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5585:25:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2186,"nodeType":"ExpressionStatement","src":"5585:25:37"}]},"id":2188,"nodeType":"IfStatement","src":"5086:535:37","trueBody":{"id":2159,"nodeType":"Block","src":"5108:197:37","statements":[{"condition":{"arguments":[{"id":2141,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"5144:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2140,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"5126:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5126:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2158,"nodeType":"IfStatement","src":"5122:173:37","trueBody":{"id":2157,"nodeType":"Block","src":"5152:143:37","statements":[{"expression":{"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2143,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"5230:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5232:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"5230:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2147,"indexExpression":{"id":2145,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5239:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5230:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2152,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5266:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5258:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2150,"name":"uint160","nodeType":"ElementaryTypeName","src":"5258:7:37","typeDescriptions":{}}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5258:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5250:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2148,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:37","typeDescriptions":{}}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5230:50:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2156,"nodeType":"ExpressionStatement","src":"5230:50:37"}]}}]}},{"eventCall":{"arguments":[{"id":2190,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5644:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2191,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"5658:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2192,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5662:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2189,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"5635:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5635:35:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2194,"nodeType":"EmitStatement","src":"5630:40:37"}]},"documentation":{"id":2079,"nodeType":"StructuredDocumentation","src":"3916:704:37","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: This function implements {ERC721-approve(address,uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param sender The message sender.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"id":2196,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4634:7:37","nodeType":"FunctionDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"mutability":"mutable","name":"s","nameLocation":"4657:1:37","nodeType":"VariableDeclaration","scope":2196,"src":"4642:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2081,"nodeType":"UserDefinedTypeName","pathNode":{"id":2080,"name":"Layout","nameLocations":["4642:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"4642:6:37"},"referencedDeclaration":1950,"src":"4642:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2084,"mutability":"mutable","name":"sender","nameLocation":"4668:6:37","nodeType":"VariableDeclaration","scope":2196,"src":"4660:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2083,"name":"address","nodeType":"ElementaryTypeName","src":"4660:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2086,"mutability":"mutable","name":"to","nameLocation":"4684:2:37","nodeType":"VariableDeclaration","scope":2196,"src":"4676:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2085,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2088,"mutability":"mutable","name":"tokenId","nameLocation":"4696:7:37","nodeType":"VariableDeclaration","scope":2196,"src":"4688:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4641:63:37"},"returnParameters":{"id":2090,"nodeType":"ParameterList","parameters":[],"src":"4714:0:37"},"scope":3634,"src":"4625:1052:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2233,"nodeType":"Block","src":"6290:187:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2209,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"6304:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2210,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"6316:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6304:18:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2216,"nodeType":"IfStatement","src":"6300:63:37","trueBody":{"errorCall":{"arguments":[{"id":2213,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"6356:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2212,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"6331:24:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6331:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2215,"nodeType":"RevertStatement","src":"6324:39:37"}},{"expression":{"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2217,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"6373:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6375:9:37","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"6373:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2222,"indexExpression":{"id":2219,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"6385:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6373:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2223,"indexExpression":{"id":2220,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"6393:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6373:29:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2224,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"6405:8:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6373:40:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2226,"nodeType":"ExpressionStatement","src":"6373:40:37"},{"eventCall":{"arguments":[{"id":2228,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"6443:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2229,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"6451:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2230,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"6461:8:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2227,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"6428:14:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6428:42:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2232,"nodeType":"EmitStatement","src":"6423:47:37"}]},"documentation":{"id":2197,"nodeType":"StructuredDocumentation","src":"5683:499:37","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param sender The message sender.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"id":2234,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"6196:17:37","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2200,"mutability":"mutable","name":"s","nameLocation":"6229:1:37","nodeType":"VariableDeclaration","scope":2234,"src":"6214:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2199,"nodeType":"UserDefinedTypeName","pathNode":{"id":2198,"name":"Layout","nameLocations":["6214:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"6214:6:37"},"referencedDeclaration":1950,"src":"6214:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2202,"mutability":"mutable","name":"sender","nameLocation":"6240:6:37","nodeType":"VariableDeclaration","scope":2234,"src":"6232:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2201,"name":"address","nodeType":"ElementaryTypeName","src":"6232:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2204,"mutability":"mutable","name":"operator","nameLocation":"6256:8:37","nodeType":"VariableDeclaration","scope":2234,"src":"6248:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2203,"name":"address","nodeType":"ElementaryTypeName","src":"6248:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"approved","nameLocation":"6271:8:37","nodeType":"VariableDeclaration","scope":2234,"src":"6266:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2205,"name":"bool","nodeType":"ElementaryTypeName","src":"6266:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6213:67:37"},"returnParameters":{"id":2208,"nodeType":"ParameterList","parameters":[],"src":"6290:0:37"},"scope":3634,"src":"6187:290:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2350,"nodeType":"Block","src":"7458:848:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7472:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7486:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7478:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2250,"name":"address","nodeType":"ElementaryTypeName","src":"7478:7:37","typeDescriptions":{}}},"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7478:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2258,"nodeType":"IfStatement","src":"7468:58:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2255,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"7497:27:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7497:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2257,"nodeType":"RevertStatement","src":"7490:36:37"}},{"assignments":[2260],"declarations":[{"constant":false,"id":2260,"mutability":"mutable","name":"owner","nameLocation":"7545:5:37","nodeType":"VariableDeclaration","scope":2350,"src":"7537:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2265,"initialValue":{"baseExpression":{"expression":{"id":2261,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"7553:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7555:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"7553:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2264,"indexExpression":{"id":2263,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7562:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7553:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7537:33:37"},{"condition":{"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7584:20:37","subExpression":{"arguments":[{"id":2267,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7598:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2266,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"7585:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7585:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2274,"nodeType":"IfStatement","src":"7580:64:37","trueBody":{"errorCall":{"arguments":[{"id":2271,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7636:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2270,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"7613:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2273,"nodeType":"RevertStatement","src":"7606:38:37"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2276,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7670:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2275,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7658:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7658:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2278,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7680:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7658:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2285,"nodeType":"IfStatement","src":"7654:73:37","trueBody":{"errorCall":{"arguments":[{"id":2281,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7713:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2282,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7719:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2280,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"7693:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7693:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2284,"nodeType":"RevertStatement","src":"7686:41:37"}},{"condition":{"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7742:31:37","subExpression":{"arguments":[{"id":2287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"7757:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2288,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7760:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2289,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7766:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2286,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"7743:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7743:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2311,"nodeType":"IfStatement","src":"7738:185:37","trueBody":{"id":2310,"nodeType":"Block","src":"7775:148:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7793:25:37","subExpression":{"arguments":[{"id":2293,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7812:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2292,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"7794:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7794:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2296,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7822:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2297,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"7832:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7834:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"7832:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2300,"indexExpression":{"id":2299,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7844:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7832:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7822:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7793:59:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2309,"nodeType":"IfStatement","src":"7789:123:37","trueBody":{"errorCall":{"arguments":[{"id":2304,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"7890:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7898:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2306,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7904:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2303,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"7861:28:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7861:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2308,"nodeType":"RevertStatement","src":"7854:58:37"}}]}},{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2312,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"7933:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7935:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"7933:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2316,"indexExpression":{"id":2314,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7942:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7933:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2321,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7969:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7961:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2319,"name":"uint160","nodeType":"ElementaryTypeName","src":"7961:7:37","typeDescriptions":{}}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7961:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7953:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"7953:7:37","typeDescriptions":{}}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7953:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7933:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"7933:40:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2326,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"7987:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2327,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7995:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7987:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2343,"nodeType":"IfStatement","src":"7983:274:37","trueBody":{"id":2342,"nodeType":"Block","src":"7999:258:37","statements":[{"id":2341,"nodeType":"UncheckedBlock","src":"8013:234:37","statements":[{"expression":{"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"8118:18:37","subExpression":{"baseExpression":{"expression":{"id":2329,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"8120:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8122:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"8120:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2332,"indexExpression":{"id":2331,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"8131:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8120:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2334,"nodeType":"ExpressionStatement","src":"8118:18:37"},{"expression":{"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8216:16:37","subExpression":{"baseExpression":{"expression":{"id":2335,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"8218:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2336,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8220:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"8218:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2338,"indexExpression":{"id":2337,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"8229:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8218:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ExpressionStatement","src":"8216:16:37"}]}]}},{"eventCall":{"arguments":[{"id":2345,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"8281:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2346,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"8287:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2347,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"8291:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2344,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"8272:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8272:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2349,"nodeType":"EmitStatement","src":"8267:32:37"}]},"documentation":{"id":2235,"nodeType":"StructuredDocumentation","src":"6483:862:37","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":2351,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7359:12:37","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2238,"mutability":"mutable","name":"s","nameLocation":"7387:1:37","nodeType":"VariableDeclaration","scope":2351,"src":"7372:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2237,"nodeType":"UserDefinedTypeName","pathNode":{"id":2236,"name":"Layout","nameLocations":["7372:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"7372:6:37"},"referencedDeclaration":1950,"src":"7372:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"sender","nameLocation":"7398:6:37","nodeType":"VariableDeclaration","scope":2351,"src":"7390:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2239,"name":"address","nodeType":"ElementaryTypeName","src":"7390:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2242,"mutability":"mutable","name":"from","nameLocation":"7414:4:37","nodeType":"VariableDeclaration","scope":2351,"src":"7406:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2241,"name":"address","nodeType":"ElementaryTypeName","src":"7406:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2244,"mutability":"mutable","name":"to","nameLocation":"7428:2:37","nodeType":"VariableDeclaration","scope":2351,"src":"7420:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2243,"name":"address","nodeType":"ElementaryTypeName","src":"7420:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"tokenId","nameLocation":"7440:7:37","nodeType":"VariableDeclaration","scope":2351,"src":"7432:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"7432:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7371:77:37"},"returnParameters":{"id":2248,"nodeType":"ParameterList","parameters":[],"src":"7458:0:37"},"scope":3634,"src":"7350:956:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2388,"nodeType":"Block","src":"9590:165:37","statements":[{"expression":{"arguments":[{"id":2369,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"9615:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2370,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"9623:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2371,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"9629:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2372,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"9633:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2366,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"9600:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9602:12:37","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2351,"src":"9600:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9600:41:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2374,"nodeType":"ExpressionStatement","src":"9600:41:37"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2375,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"9655:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9658:10:37","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"9655:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9655:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2387,"nodeType":"IfStatement","src":"9651:98:37","trueBody":{"id":2386,"nodeType":"Block","src":"9672:77:37","statements":[{"expression":{"arguments":[{"id":2379,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"9708:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2380,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"9716:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2381,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"9722:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2382,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"9726:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9735:2:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2378,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"9686:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9686:52:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"ExpressionStatement","src":"9686:52:37"}]}}]},"documentation":{"id":2352,"nodeType":"StructuredDocumentation","src":"8312:1161:37","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":2389,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"9487:16:37","nodeType":"FunctionDefinition","parameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"s","nameLocation":"9519:1:37","nodeType":"VariableDeclaration","scope":2389,"src":"9504:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2354,"nodeType":"UserDefinedTypeName","pathNode":{"id":2353,"name":"Layout","nameLocations":["9504:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"9504:6:37"},"referencedDeclaration":1950,"src":"9504:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"sender","nameLocation":"9530:6:37","nodeType":"VariableDeclaration","scope":2389,"src":"9522:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"9522:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"from","nameLocation":"9546:4:37","nodeType":"VariableDeclaration","scope":2389,"src":"9538:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2358,"name":"address","nodeType":"ElementaryTypeName","src":"9538:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"to","nameLocation":"9560:2:37","nodeType":"VariableDeclaration","scope":2389,"src":"9552:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2360,"name":"address","nodeType":"ElementaryTypeName","src":"9552:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2363,"mutability":"mutable","name":"tokenId","nameLocation":"9572:7:37","nodeType":"VariableDeclaration","scope":2389,"src":"9564:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2362,"name":"uint256","nodeType":"ElementaryTypeName","src":"9564:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9503:77:37"},"returnParameters":{"id":2365,"nodeType":"ParameterList","parameters":[],"src":"9590:0:37"},"scope":3634,"src":"9478:277:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2428,"nodeType":"Block","src":"11138:167:37","statements":[{"expression":{"arguments":[{"id":2409,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"11163:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2410,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"11171:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2411,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"11177:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2412,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"11181:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2406,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"11148:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11150:12:37","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2351,"src":"11148:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11148:41:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2414,"nodeType":"ExpressionStatement","src":"11148:41:37"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2415,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"11203:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11206:10:37","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"11203:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"11199:100:37","trueBody":{"id":2426,"nodeType":"Block","src":"11220:79:37","statements":[{"expression":{"arguments":[{"id":2419,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"11256:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2420,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"11264:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2421,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"11270:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2422,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"11274:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2423,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"11283:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2418,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"11234:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11234:54:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2425,"nodeType":"ExpressionStatement","src":"11234:54:37"}]}}]},"documentation":{"id":2390,"nodeType":"StructuredDocumentation","src":"9761:1239:37","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"id":2429,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"11014:16:37","nodeType":"FunctionDefinition","parameters":{"id":2404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"s","nameLocation":"11046:1:37","nodeType":"VariableDeclaration","scope":2429,"src":"11031:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2392,"nodeType":"UserDefinedTypeName","pathNode":{"id":2391,"name":"Layout","nameLocations":["11031:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"11031:6:37"},"referencedDeclaration":1950,"src":"11031:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"sender","nameLocation":"11057:6:37","nodeType":"VariableDeclaration","scope":2429,"src":"11049:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"11049:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2397,"mutability":"mutable","name":"from","nameLocation":"11073:4:37","nodeType":"VariableDeclaration","scope":2429,"src":"11065:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2396,"name":"address","nodeType":"ElementaryTypeName","src":"11065:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2399,"mutability":"mutable","name":"to","nameLocation":"11087:2:37","nodeType":"VariableDeclaration","scope":2429,"src":"11079:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2398,"name":"address","nodeType":"ElementaryTypeName","src":"11079:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"tokenId","nameLocation":"11099:7:37","nodeType":"VariableDeclaration","scope":2429,"src":"11091:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"11091:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2403,"mutability":"mutable","name":"data","nameLocation":"11123:4:37","nodeType":"VariableDeclaration","scope":2429,"src":"11108:19:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2402,"name":"bytes","nodeType":"ElementaryTypeName","src":"11108:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11030:98:37"},"returnParameters":{"id":2405,"nodeType":"ParameterList","parameters":[],"src":"11138:0:37"},"scope":3634,"src":"11005:300:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2580,"nodeType":"Block","src":"12362:1084:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"12376:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12390:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2446,"name":"address","nodeType":"ElementaryTypeName","src":"12382:7:37","typeDescriptions":{}}},"id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12376:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2454,"nodeType":"IfStatement","src":"12372:58:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2451,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"12401:27:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12401:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2453,"nodeType":"RevertStatement","src":"12394:36:37"}},{"assignments":[2456],"declarations":[{"constant":false,"id":2456,"mutability":"mutable","name":"operatable","nameLocation":"12445:10:37","nodeType":"VariableDeclaration","scope":2580,"src":"12440:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2455,"name":"bool","nodeType":"ElementaryTypeName","src":"12440:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2462,"initialValue":{"arguments":[{"id":2458,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"12472:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2459,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12475:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2460,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"12481:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2457,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"12458:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12458:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12440:48:37"},{"assignments":[2464],"declarations":[{"constant":false,"id":2464,"mutability":"mutable","name":"length","nameLocation":"12507:6:37","nodeType":"VariableDeclaration","scope":2580,"src":"12499:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"12499:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2467,"initialValue":{"expression":{"id":2465,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"12516:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12525:6:37","memberName":"length","nodeType":"MemberAccess","src":"12516:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12499:32:37"},{"body":{"id":2552,"nodeType":"Block","src":"12574:552:37","statements":[{"assignments":[2478],"declarations":[{"constant":false,"id":2478,"mutability":"mutable","name":"tokenId","nameLocation":"12596:7:37","nodeType":"VariableDeclaration","scope":2552,"src":"12588:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"12588:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2482,"initialValue":{"baseExpression":{"id":2479,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"12606:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2481,"indexExpression":{"id":2480,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"12615:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12606:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12588:29:37"},{"assignments":[2484],"declarations":[{"constant":false,"id":2484,"mutability":"mutable","name":"owner","nameLocation":"12639:5:37","nodeType":"VariableDeclaration","scope":2552,"src":"12631:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"12631:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2489,"initialValue":{"baseExpression":{"expression":{"id":2485,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"12647:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12649:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"12647:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2488,"indexExpression":{"id":2487,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"12656:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12647:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12631:33:37"},{"condition":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12682:20:37","subExpression":{"arguments":[{"id":2491,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"12696:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2490,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"12683:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12683:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2498,"nodeType":"IfStatement","src":"12678:64:37","trueBody":{"errorCall":{"arguments":[{"id":2495,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"12734:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2494,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"12711:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12711:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2497,"nodeType":"RevertStatement","src":"12704:38:37"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2500,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"12772:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2499,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"12760:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12760:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2502,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12782:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12760:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2509,"nodeType":"IfStatement","src":"12756:73:37","trueBody":{"errorCall":{"arguments":[{"id":2505,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12815:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2506,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"12821:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2504,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"12795:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12795:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2508,"nodeType":"RevertStatement","src":"12788:41:37"}},{"condition":{"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12847:11:37","subExpression":{"id":2510,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"12848:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2531,"nodeType":"IfStatement","src":"12843:173:37","trueBody":{"id":2530,"nodeType":"Block","src":"12860:156:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12882:25:37","subExpression":{"arguments":[{"id":2513,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"12901:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2512,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"12883:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12883:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2516,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"12911:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2517,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"12921:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12923:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"12921:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2520,"indexExpression":{"id":2519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"12933:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12921:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12911:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12882:59:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2529,"nodeType":"IfStatement","src":"12878:123:37","trueBody":{"errorCall":{"arguments":[{"id":2524,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"12979:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2525,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12987:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"12993:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2523,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"12950:28:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12950:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2528,"nodeType":"RevertStatement","src":"12943:58:37"}}]}},{"expression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2532,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"13029:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2535,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13031:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"13029:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2536,"indexExpression":{"id":2534,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"13038:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13029:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2541,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"13065:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13057:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2539,"name":"uint160","nodeType":"ElementaryTypeName","src":"13057:7:37","typeDescriptions":{}}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13057:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13049:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2537,"name":"uint256","nodeType":"ElementaryTypeName","src":"13049:7:37","typeDescriptions":{}}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13049:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13029:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2545,"nodeType":"ExpressionStatement","src":"13029:40:37"},{"eventCall":{"arguments":[{"id":2547,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"13097:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2548,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"13103:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"13107:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2546,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"13088:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13088:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2551,"nodeType":"EmitStatement","src":"13083:32:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2471,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"12557:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2472,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"12561:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12557:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2553,"initializationExpression":{"assignments":[2469],"declarations":[{"constant":false,"id":2469,"mutability":"mutable","name":"i","nameLocation":"12554:1:37","nodeType":"VariableDeclaration","scope":2553,"src":"12546:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"12546:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2470,"nodeType":"VariableDeclarationStatement","src":"12546:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12569:3:37","subExpression":{"id":2474,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"12571:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"12569:3:37"},"nodeType":"ForStatement","src":"12541:585:37"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2554,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"13140:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2555,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"13148:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13140:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2557,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"13154:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13164:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13154:11:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13140:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2579,"nodeType":"IfStatement","src":"13136:304:37","trueBody":{"id":2578,"nodeType":"Block","src":"13167:273:37","statements":[{"id":2577,"nodeType":"UncheckedBlock","src":"13181:249:37","statements":[{"expression":{"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2561,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"13286:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13288:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"13286:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2565,"indexExpression":{"id":2563,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"13297:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13286:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2566,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"13306:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13286:26:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2568,"nodeType":"ExpressionStatement","src":"13286:26:37"},{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2569,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"13391:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2572,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13393:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"13391:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2573,"indexExpression":{"id":2571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"13402:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13391:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2574,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"13409:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13391:24:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"13391:24:37"}]}]}}]},"documentation":{"id":2430,"nodeType":"StructuredDocumentation","src":"11311:921:37","text":"@notice Unsafely transfers a batch of tokens to a recipient by a sender.\n @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event for each of `tokenIds`.\n @param sender The message sender.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"id":2581,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"12246:17:37","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"s","nameLocation":"12279:1:37","nodeType":"VariableDeclaration","scope":2581,"src":"12264:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2432,"nodeType":"UserDefinedTypeName","pathNode":{"id":2431,"name":"Layout","nameLocations":["12264:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"12264:6:37"},"referencedDeclaration":1950,"src":"12264:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2435,"mutability":"mutable","name":"sender","nameLocation":"12290:6:37","nodeType":"VariableDeclaration","scope":2581,"src":"12282:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"12282:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2437,"mutability":"mutable","name":"from","nameLocation":"12306:4:37","nodeType":"VariableDeclaration","scope":2581,"src":"12298:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"12298:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"to","nameLocation":"12320:2:37","nodeType":"VariableDeclaration","scope":2581,"src":"12312:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"12312:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"tokenIds","nameLocation":"12343:8:37","nodeType":"VariableDeclaration","scope":2581,"src":"12324:27:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"12324:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ArrayTypeName","src":"12324:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12263:89:37"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[],"src":"12362:0:37"},"scope":3634,"src":"12237:1209:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2643,"nodeType":"Block","src":"14068:390:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2592,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"14082:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14096:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14088:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2593,"name":"address","nodeType":"ElementaryTypeName","src":"14088:7:37","typeDescriptions":{}}},"id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14088:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14082:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2601,"nodeType":"IfStatement","src":"14078:54:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2598,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"14107:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14107:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2600,"nodeType":"RevertStatement","src":"14100:32:37"}},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2603,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14159:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14161:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"14159:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2606,"indexExpression":{"id":2605,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"14168:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14159:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2602,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"14146:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14146:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2612,"nodeType":"IfStatement","src":"14142:72:37","trueBody":{"errorCall":{"arguments":[{"id":2609,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"14206:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2608,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"14186:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14186:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2611,"nodeType":"RevertStatement","src":"14179:35:37"}},{"expression":{"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2613,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14225:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14227:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"14225:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2617,"indexExpression":{"id":2615,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"14234:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14225:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2622,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"14261:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14253:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2620,"name":"uint160","nodeType":"ElementaryTypeName","src":"14253:7:37","typeDescriptions":{}}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14253:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14245:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"14245:7:37","typeDescriptions":{}}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14245:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14225:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2626,"nodeType":"ExpressionStatement","src":"14225:40:37"},{"id":2633,"nodeType":"UncheckedBlock","src":"14276:127:37","statements":[{"expression":{"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"14376:16:37","subExpression":{"baseExpression":{"expression":{"id":2627,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14378:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14380:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"14378:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2630,"indexExpression":{"id":2629,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"14389:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14378:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2632,"nodeType":"ExpressionStatement","src":"14376:16:37"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14435:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14427:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2635,"name":"address","nodeType":"ElementaryTypeName","src":"14427:7:37","typeDescriptions":{}}},"id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14427:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2639,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"14439:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2640,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"14443:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2634,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"14418:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14418:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2642,"nodeType":"EmitStatement","src":"14413:38:37"}]},"documentation":{"id":2582,"nodeType":"StructuredDocumentation","src":"13452:541:37","text":"@notice Unsafely mints a token.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"14007:4:37","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2585,"mutability":"mutable","name":"s","nameLocation":"14027:1:37","nodeType":"VariableDeclaration","scope":2644,"src":"14012:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2584,"nodeType":"UserDefinedTypeName","pathNode":{"id":2583,"name":"Layout","nameLocations":["14012:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"14012:6:37"},"referencedDeclaration":1950,"src":"14012:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2587,"mutability":"mutable","name":"to","nameLocation":"14038:2:37","nodeType":"VariableDeclaration","scope":2644,"src":"14030:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2586,"name":"address","nodeType":"ElementaryTypeName","src":"14030:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"tokenId","nameLocation":"14050:7:37","nodeType":"VariableDeclaration","scope":2644,"src":"14042:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"14042:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14011:47:37"},"returnParameters":{"id":2591,"nodeType":"ParameterList","parameters":[],"src":"14068:0:37"},"scope":3634,"src":"13998:460:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2682,"nodeType":"Block","src":"15502:151:37","statements":[{"expression":{"arguments":[{"id":2662,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"15519:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2663,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"15523:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2659,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"15512:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2661,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15514:4:37","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2644,"src":"15512:6:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15512:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2665,"nodeType":"ExpressionStatement","src":"15512:19:37"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2666,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"15545:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15548:10:37","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"15545:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15545:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2681,"nodeType":"IfStatement","src":"15541:106:37","trueBody":{"id":2680,"nodeType":"Block","src":"15562:85:37","statements":[{"expression":{"arguments":[{"id":2670,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"15598:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15614:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15606:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2671,"name":"address","nodeType":"ElementaryTypeName","src":"15606:7:37","typeDescriptions":{}}},"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15606:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2675,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"15618:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2676,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"15622:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2677,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"15631:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2669,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"15576:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15576:60:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2679,"nodeType":"ExpressionStatement","src":"15576:60:37"}]}}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"14464:924:37","text":"@notice Safely mints a token.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2683,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"15402:8:37","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"s","nameLocation":"15426:1:37","nodeType":"VariableDeclaration","scope":2683,"src":"15411:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2647,"nodeType":"UserDefinedTypeName","pathNode":{"id":2646,"name":"Layout","nameLocations":["15411:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"15411:6:37"},"referencedDeclaration":1950,"src":"15411:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2650,"mutability":"mutable","name":"sender","nameLocation":"15437:6:37","nodeType":"VariableDeclaration","scope":2683,"src":"15429:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2649,"name":"address","nodeType":"ElementaryTypeName","src":"15429:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2652,"mutability":"mutable","name":"to","nameLocation":"15453:2:37","nodeType":"VariableDeclaration","scope":2683,"src":"15445:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"15445:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"tokenId","nameLocation":"15465:7:37","nodeType":"VariableDeclaration","scope":2683,"src":"15457:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"15457:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"data","nameLocation":"15487:4:37","nodeType":"VariableDeclaration","scope":2683,"src":"15474:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2655,"name":"bytes","nodeType":"ElementaryTypeName","src":"15474:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15410:82:37"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[],"src":"15502:0:37"},"scope":3634,"src":"15393:260:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2770,"nodeType":"Block","src":"16352:472:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"16366:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16380:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16372:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2696,"name":"address","nodeType":"ElementaryTypeName","src":"16372:7:37","typeDescriptions":{}}},"id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16372:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16366:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2704,"nodeType":"IfStatement","src":"16362:54:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2701,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"16391:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16391:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2703,"nodeType":"RevertStatement","src":"16384:32:37"}},{"assignments":[2706],"declarations":[{"constant":false,"id":2706,"mutability":"mutable","name":"length","nameLocation":"16435:6:37","nodeType":"VariableDeclaration","scope":2770,"src":"16427:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"16427:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2709,"initialValue":{"expression":{"id":2707,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"16444:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16453:6:37","memberName":"length","nodeType":"MemberAccess","src":"16444:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16427:32:37"},{"body":{"id":2759,"nodeType":"Block","src":"16502:247:37","statements":[{"assignments":[2720],"declarations":[{"constant":false,"id":2720,"mutability":"mutable","name":"tokenId","nameLocation":"16524:7:37","nodeType":"VariableDeclaration","scope":2759,"src":"16516:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2719,"name":"uint256","nodeType":"ElementaryTypeName","src":"16516:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2724,"initialValue":{"baseExpression":{"id":2721,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"16534:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2723,"indexExpression":{"id":2722,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"16543:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16534:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16516:29:37"},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2726,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"16576:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16578:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"16576:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2729,"indexExpression":{"id":2728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"16585:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16576:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2725,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"16563:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16563:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2735,"nodeType":"IfStatement","src":"16559:72:37","trueBody":{"errorCall":{"arguments":[{"id":2732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"16623:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2731,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"16603:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16603:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2734,"nodeType":"RevertStatement","src":"16596:35:37"}},{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2736,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"16646:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2739,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16648:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"16646:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2740,"indexExpression":{"id":2738,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"16655:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16646:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2745,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"16682:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16674:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2743,"name":"uint160","nodeType":"ElementaryTypeName","src":"16674:7:37","typeDescriptions":{}}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16674:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16666:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"16666:7:37","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16666:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16646:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2749,"nodeType":"ExpressionStatement","src":"16646:40:37"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16722:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16714:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2751,"name":"address","nodeType":"ElementaryTypeName","src":"16714:7:37","typeDescriptions":{}}},"id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16714:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2755,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"16726:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"16730:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2750,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"16705:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16705:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2758,"nodeType":"EmitStatement","src":"16700:38:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2713,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"16485:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2714,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"16489:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16485:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2760,"initializationExpression":{"assignments":[2711],"declarations":[{"constant":false,"id":2711,"mutability":"mutable","name":"i","nameLocation":"16482:1:37","nodeType":"VariableDeclaration","scope":2760,"src":"16474:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2710,"name":"uint256","nodeType":"ElementaryTypeName","src":"16474:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2712,"nodeType":"VariableDeclarationStatement","src":"16474:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16497:3:37","subExpression":{"id":2716,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"16499:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2718,"nodeType":"ExpressionStatement","src":"16497:3:37"},"nodeType":"ForStatement","src":"16469:280:37"},{"id":2769,"nodeType":"UncheckedBlock","src":"16759:59:37","statements":[{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2761,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"16783:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16785:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"16783:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2765,"indexExpression":{"id":2763,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"16794:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16783:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2766,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"16801:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16783:24:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"16783:24:37"}]}]},"documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"15659:603:37","text":"@notice Unsafely mints a batch of tokens.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":2771,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"16276:9:37","nodeType":"FunctionDefinition","parameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"s","nameLocation":"16301:1:37","nodeType":"VariableDeclaration","scope":2771,"src":"16286:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2686,"nodeType":"UserDefinedTypeName","pathNode":{"id":2685,"name":"Layout","nameLocations":["16286:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"16286:6:37"},"referencedDeclaration":1950,"src":"16286:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"to","nameLocation":"16312:2:37","nodeType":"VariableDeclaration","scope":2771,"src":"16304:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2688,"name":"address","nodeType":"ElementaryTypeName","src":"16304:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"tokenIds","nameLocation":"16333:8:37","nodeType":"VariableDeclaration","scope":2771,"src":"16316:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"16316:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ArrayTypeName","src":"16316:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16285:57:37"},"returnParameters":{"id":2694,"nodeType":"ParameterList","parameters":[],"src":"16352:0:37"},"scope":3634,"src":"16267:557:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2819,"nodeType":"Block","src":"17700:226:37","statements":[{"assignments":[2785],"declarations":[{"constant":false,"id":2785,"mutability":"mutable","name":"length","nameLocation":"17718:6:37","nodeType":"VariableDeclaration","scope":2819,"src":"17710:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"17710:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2788,"initialValue":{"expression":{"id":2786,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"17727:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17738:6:37","memberName":"length","nodeType":"MemberAccess","src":"17727:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17710:34:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2789,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"17758:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2790,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"17768:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17777:6:37","memberName":"length","nodeType":"MemberAccess","src":"17768:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17758:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2796,"nodeType":"IfStatement","src":"17754:64:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2793,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"17792:24:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17792:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"RevertStatement","src":"17785:33:37"}},{"body":{"id":2817,"nodeType":"Block","src":"17861:59:37","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2809,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"17882:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2811,"indexExpression":{"id":2810,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"17893:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17882:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2812,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"17897:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2814,"indexExpression":{"id":2813,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"17906:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17897:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2806,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"17875:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2808,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17877:4:37","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2644,"src":"17875:6:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17875:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2816,"nodeType":"ExpressionStatement","src":"17875:34:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"17844:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2801,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"17848:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17844:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2818,"initializationExpression":{"assignments":[2798],"declarations":[{"constant":false,"id":2798,"mutability":"mutable","name":"i","nameLocation":"17841:1:37","nodeType":"VariableDeclaration","scope":2818,"src":"17833:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"17833:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2799,"nodeType":"VariableDeclarationStatement","src":"17833:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17856:3:37","subExpression":{"id":2803,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"17858:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2805,"nodeType":"ExpressionStatement","src":"17856:3:37"},"nodeType":"ForStatement","src":"17828:92:37"}]},"documentation":{"id":2772,"nodeType":"StructuredDocumentation","src":"16830:765:37","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":2820,"implemented":true,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"17609:7:37","nodeType":"FunctionDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2775,"mutability":"mutable","name":"s","nameLocation":"17632:1:37","nodeType":"VariableDeclaration","scope":2820,"src":"17617:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2774,"nodeType":"UserDefinedTypeName","pathNode":{"id":2773,"name":"Layout","nameLocations":["17617:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"17617:6:37"},"referencedDeclaration":1950,"src":"17617:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2778,"mutability":"mutable","name":"recipients","nameLocation":"17652:10:37","nodeType":"VariableDeclaration","scope":2820,"src":"17635:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2776,"name":"address","nodeType":"ElementaryTypeName","src":"17635:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2777,"nodeType":"ArrayTypeName","src":"17635:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"tokenIds","nameLocation":"17681:8:37","nodeType":"VariableDeclaration","scope":2820,"src":"17664:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"17664:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ArrayTypeName","src":"17664:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17616:74:37"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[],"src":"17700:0:37"},"scope":3634,"src":"17600:326:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2894,"nodeType":"Block","src":"18642:491:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2831,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"18656:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18670:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18662:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2832,"name":"address","nodeType":"ElementaryTypeName","src":"18662:7:37","typeDescriptions":{}}},"id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18662:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18656:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2840,"nodeType":"IfStatement","src":"18652:54:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2837,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"18681:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18681:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2839,"nodeType":"RevertStatement","src":"18674:32:37"}},{"assignments":[2842],"declarations":[{"constant":false,"id":2842,"mutability":"mutable","name":"owner","nameLocation":"18725:5:37","nodeType":"VariableDeclaration","scope":2894,"src":"18717:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"18717:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2847,"initialValue":{"baseExpression":{"expression":{"id":2843,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"18733:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2844,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18735:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"18733:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2846,"indexExpression":{"id":2845,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"18742:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18733:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18717:33:37"},{"condition":{"arguments":[{"id":2849,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"18777:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2848,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"18764:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18764:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2855,"nodeType":"IfStatement","src":"18760:60:37","trueBody":{"errorCall":{"arguments":[{"id":2852,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"18812:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2851,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"18792:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18792:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2854,"nodeType":"RevertStatement","src":"18785:35:37"}},{"condition":{"arguments":[{"id":2857,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"18849:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2856,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"18834:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18834:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2863,"nodeType":"IfStatement","src":"18830:59:37","trueBody":{"errorCall":{"arguments":[{"id":2860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"18881:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2859,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"18864:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18864:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2862,"nodeType":"RevertStatement","src":"18857:32:37"}},{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2864,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"18900:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18902:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"18900:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2868,"indexExpression":{"id":2866,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"18909:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18900:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2873,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"18936:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18928:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2871,"name":"uint160","nodeType":"ElementaryTypeName","src":"18928:7:37","typeDescriptions":{}}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18928:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18920:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2869,"name":"uint256","nodeType":"ElementaryTypeName","src":"18920:7:37","typeDescriptions":{}}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18920:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18900:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2877,"nodeType":"ExpressionStatement","src":"18900:40:37"},{"id":2884,"nodeType":"UncheckedBlock","src":"18951:127:37","statements":[{"expression":{"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19051:16:37","subExpression":{"baseExpression":{"expression":{"id":2878,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"19053:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2879,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19055:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"19053:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2881,"indexExpression":{"id":2880,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"19064:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19053:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2883,"nodeType":"ExpressionStatement","src":"19051:16:37"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19110:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19102:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2886,"name":"address","nodeType":"ElementaryTypeName","src":"19102:7:37","typeDescriptions":{}}},"id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19102:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2890,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"19114:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2891,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"19118:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2885,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"19093:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19093:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2893,"nodeType":"EmitStatement","src":"19088:38:37"}]},"documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"17932:631:37","text":"@notice Unsafely mints a token once.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2895,"implemented":true,"kind":"function","modifiers":[],"name":"mintOnce","nameLocation":"18577:8:37","nodeType":"FunctionDefinition","parameters":{"id":2829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2824,"mutability":"mutable","name":"s","nameLocation":"18601:1:37","nodeType":"VariableDeclaration","scope":2895,"src":"18586:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2823,"nodeType":"UserDefinedTypeName","pathNode":{"id":2822,"name":"Layout","nameLocations":["18586:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"18586:6:37"},"referencedDeclaration":1950,"src":"18586:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2826,"mutability":"mutable","name":"to","nameLocation":"18612:2:37","nodeType":"VariableDeclaration","scope":2895,"src":"18604:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2825,"name":"address","nodeType":"ElementaryTypeName","src":"18604:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2828,"mutability":"mutable","name":"tokenId","nameLocation":"18624:7:37","nodeType":"VariableDeclaration","scope":2895,"src":"18616:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"18616:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18585:47:37"},"returnParameters":{"id":2830,"nodeType":"ParameterList","parameters":[],"src":"18642:0:37"},"scope":3634,"src":"18568:565:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2933,"nodeType":"Block","src":"20142:155:37","statements":[{"expression":{"arguments":[{"id":2913,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"20163:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"20167:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2910,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"20152:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2912,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20154:8:37","memberName":"mintOnce","nodeType":"MemberAccess","referencedDeclaration":2895,"src":"20152:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1950_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20152:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2916,"nodeType":"ExpressionStatement","src":"20152:23:37"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2917,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"20189:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20192:10:37","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"20189:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20189:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2932,"nodeType":"IfStatement","src":"20185:106:37","trueBody":{"id":2931,"nodeType":"Block","src":"20206:85:37","statements":[{"expression":{"arguments":[{"id":2921,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"20242:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20258:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20250:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2922,"name":"address","nodeType":"ElementaryTypeName","src":"20250:7:37","typeDescriptions":{}}},"id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20250:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2926,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"20262:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2927,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"20266:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2928,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"20275:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2920,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"20220:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20220:60:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2930,"nodeType":"ExpressionStatement","src":"20220:60:37"}]}}]},"documentation":{"id":2896,"nodeType":"StructuredDocumentation","src":"19139:885:37","text":"@notice Safely mints a token once.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"safeMintOnce","nameLocation":"20038:12:37","nodeType":"FunctionDefinition","parameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"s","nameLocation":"20066:1:37","nodeType":"VariableDeclaration","scope":2934,"src":"20051:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2898,"nodeType":"UserDefinedTypeName","pathNode":{"id":2897,"name":"Layout","nameLocations":["20051:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"20051:6:37"},"referencedDeclaration":1950,"src":"20051:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2901,"mutability":"mutable","name":"sender","nameLocation":"20077:6:37","nodeType":"VariableDeclaration","scope":2934,"src":"20069:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2900,"name":"address","nodeType":"ElementaryTypeName","src":"20069:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2903,"mutability":"mutable","name":"to","nameLocation":"20093:2:37","nodeType":"VariableDeclaration","scope":2934,"src":"20085:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2902,"name":"address","nodeType":"ElementaryTypeName","src":"20085:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"tokenId","nameLocation":"20105:7:37","nodeType":"VariableDeclaration","scope":2934,"src":"20097:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"20097:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2907,"mutability":"mutable","name":"data","nameLocation":"20127:4:37","nodeType":"VariableDeclaration","scope":2934,"src":"20114:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2906,"name":"bytes","nodeType":"ElementaryTypeName","src":"20114:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20050:82:37"},"returnParameters":{"id":2909,"nodeType":"ParameterList","parameters":[],"src":"20142:0:37"},"scope":3634,"src":"20029:268:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"21098:581:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2946,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"21112:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21126:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21118:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2947,"name":"address","nodeType":"ElementaryTypeName","src":"21118:7:37","typeDescriptions":{}}},"id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21118:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21112:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2955,"nodeType":"IfStatement","src":"21108:54:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2952,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"21137:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21137:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2954,"nodeType":"RevertStatement","src":"21130:32:37"}},{"assignments":[2957],"declarations":[{"constant":false,"id":2957,"mutability":"mutable","name":"length","nameLocation":"21181:6:37","nodeType":"VariableDeclaration","scope":3033,"src":"21173:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2956,"name":"uint256","nodeType":"ElementaryTypeName","src":"21173:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2960,"initialValue":{"expression":{"id":2958,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"21190:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21199:6:37","memberName":"length","nodeType":"MemberAccess","src":"21190:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21173:32:37"},{"body":{"id":3022,"nodeType":"Block","src":"21248:356:37","statements":[{"assignments":[2971],"declarations":[{"constant":false,"id":2971,"mutability":"mutable","name":"tokenId","nameLocation":"21270:7:37","nodeType":"VariableDeclaration","scope":3022,"src":"21262:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"21262:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2975,"initialValue":{"baseExpression":{"id":2972,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"21280:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2974,"indexExpression":{"id":2973,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"21289:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21280:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21262:29:37"},{"assignments":[2977],"declarations":[{"constant":false,"id":2977,"mutability":"mutable","name":"owner","nameLocation":"21313:5:37","nodeType":"VariableDeclaration","scope":3022,"src":"21305:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"21305:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2982,"initialValue":{"baseExpression":{"expression":{"id":2978,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"21321:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2979,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21323:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"21321:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2981,"indexExpression":{"id":2980,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"21330:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21321:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21305:33:37"},{"condition":{"arguments":[{"id":2984,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"21369:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2983,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"21356:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21356:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2990,"nodeType":"IfStatement","src":"21352:60:37","trueBody":{"errorCall":{"arguments":[{"id":2987,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"21404:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2986,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"21384:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21384:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2989,"nodeType":"RevertStatement","src":"21377:35:37"}},{"condition":{"arguments":[{"id":2992,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"21445:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2991,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"21430:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21430:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2998,"nodeType":"IfStatement","src":"21426:59:37","trueBody":{"errorCall":{"arguments":[{"id":2995,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"21477:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2994,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"21460:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21460:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2997,"nodeType":"RevertStatement","src":"21453:32:37"}},{"expression":{"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2999,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"21500:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3002,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21502:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"21500:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3003,"indexExpression":{"id":3001,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"21509:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21500:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3008,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"21536:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21528:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3006,"name":"uint160","nodeType":"ElementaryTypeName","src":"21528:7:37","typeDescriptions":{}}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21528:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21520:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"21520:7:37","typeDescriptions":{}}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21520:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21500:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3012,"nodeType":"ExpressionStatement","src":"21500:40:37"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21577:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21569:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3014,"name":"address","nodeType":"ElementaryTypeName","src":"21569:7:37","typeDescriptions":{}}},"id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21569:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3018,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"21581:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3019,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"21585:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3013,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"21560:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21560:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3021,"nodeType":"EmitStatement","src":"21555:38:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2964,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"21231:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2965,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"21235:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21231:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3023,"initializationExpression":{"assignments":[2962],"declarations":[{"constant":false,"id":2962,"mutability":"mutable","name":"i","nameLocation":"21228:1:37","nodeType":"VariableDeclaration","scope":3023,"src":"21220:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2961,"name":"uint256","nodeType":"ElementaryTypeName","src":"21220:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2963,"nodeType":"VariableDeclarationStatement","src":"21220:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21243:3:37","subExpression":{"id":2967,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"21245:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2969,"nodeType":"ExpressionStatement","src":"21243:3:37"},"nodeType":"ForStatement","src":"21215:389:37"},{"id":3032,"nodeType":"UncheckedBlock","src":"21614:59:37","statements":[{"expression":{"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3024,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"21638:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21640:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"21638:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3028,"indexExpression":{"id":3026,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"21649:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21638:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3029,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"21656:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21638:24:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3031,"nodeType":"ExpressionStatement","src":"21638:24:37"}]}]},"documentation":{"id":2935,"nodeType":"StructuredDocumentation","src":"20303:701:37","text":"@notice Unsafely mints a batch of tokens once.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"batchMintOnce","nameLocation":"21018:13:37","nodeType":"FunctionDefinition","parameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"s","nameLocation":"21047:1:37","nodeType":"VariableDeclaration","scope":3034,"src":"21032:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2937,"nodeType":"UserDefinedTypeName","pathNode":{"id":2936,"name":"Layout","nameLocations":["21032:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"21032:6:37"},"referencedDeclaration":1950,"src":"21032:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"to","nameLocation":"21058:2:37","nodeType":"VariableDeclaration","scope":3034,"src":"21050:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"21050:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"tokenIds","nameLocation":"21079:8:37","nodeType":"VariableDeclaration","scope":3034,"src":"21062:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2941,"name":"uint256","nodeType":"ElementaryTypeName","src":"21062:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2942,"nodeType":"ArrayTypeName","src":"21062:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"21031:57:37"},"returnParameters":{"id":2945,"nodeType":"ParameterList","parameters":[],"src":"21098:0:37"},"scope":3634,"src":"21009:670:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3146,"nodeType":"Block","src":"22657:704:37","statements":[{"assignments":[3048],"declarations":[{"constant":false,"id":3048,"mutability":"mutable","name":"length","nameLocation":"22675:6:37","nodeType":"VariableDeclaration","scope":3146,"src":"22667:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3047,"name":"uint256","nodeType":"ElementaryTypeName","src":"22667:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3051,"initialValue":{"expression":{"id":3049,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"22684:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22695:6:37","memberName":"length","nodeType":"MemberAccess","src":"22684:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22667:34:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3052,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"22715:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3053,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"22725:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22734:6:37","memberName":"length","nodeType":"MemberAccess","src":"22725:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22715:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3059,"nodeType":"IfStatement","src":"22711:64:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3056,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"22749:24:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22749:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3058,"nodeType":"RevertStatement","src":"22742:33:37"}},{"body":{"id":3144,"nodeType":"Block","src":"22818:537:37","statements":[{"assignments":[3070],"declarations":[{"constant":false,"id":3070,"mutability":"mutable","name":"to","nameLocation":"22840:2:37","nodeType":"VariableDeclaration","scope":3144,"src":"22832:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"22832:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3074,"initialValue":{"baseExpression":{"id":3071,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"22845:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3073,"indexExpression":{"id":3072,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"22856:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22845:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"22832:26:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"22876:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22890:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22882:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3076,"name":"address","nodeType":"ElementaryTypeName","src":"22882:7:37","typeDescriptions":{}}},"id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22882:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22876:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3084,"nodeType":"IfStatement","src":"22872:54:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3081,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"22901:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22901:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3083,"nodeType":"RevertStatement","src":"22894:32:37"}},{"assignments":[3086],"declarations":[{"constant":false,"id":3086,"mutability":"mutable","name":"tokenId","nameLocation":"22949:7:37","nodeType":"VariableDeclaration","scope":3144,"src":"22941:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"22941:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3090,"initialValue":{"baseExpression":{"id":3087,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"22959:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3089,"indexExpression":{"id":3088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"22968:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22959:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22941:29:37"},{"assignments":[3092],"declarations":[{"constant":false,"id":3092,"mutability":"mutable","name":"owner","nameLocation":"22992:5:37","nodeType":"VariableDeclaration","scope":3144,"src":"22984:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3091,"name":"uint256","nodeType":"ElementaryTypeName","src":"22984:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3097,"initialValue":{"baseExpression":{"expression":{"id":3093,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"23000:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23002:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"23000:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3096,"indexExpression":{"id":3095,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"23009:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23000:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22984:33:37"},{"condition":{"arguments":[{"id":3099,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"23048:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3098,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"23035:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23035:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3105,"nodeType":"IfStatement","src":"23031:60:37","trueBody":{"errorCall":{"arguments":[{"id":3102,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"23083:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3101,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"23063:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23063:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3104,"nodeType":"RevertStatement","src":"23056:35:37"}},{"condition":{"arguments":[{"id":3107,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"23124:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3106,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"23109:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23109:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3113,"nodeType":"IfStatement","src":"23105:59:37","trueBody":{"errorCall":{"arguments":[{"id":3110,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"23156:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3109,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"23139:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23139:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3112,"nodeType":"RevertStatement","src":"23132:32:37"}},{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3114,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"23179:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23181:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"23179:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3118,"indexExpression":{"id":3116,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"23188:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23179:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3123,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"23215:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23207:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3121,"name":"uint160","nodeType":"ElementaryTypeName","src":"23207:7:37","typeDescriptions":{}}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23207:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23199:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3119,"name":"uint256","nodeType":"ElementaryTypeName","src":"23199:7:37","typeDescriptions":{}}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23199:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23179:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3127,"nodeType":"ExpressionStatement","src":"23179:40:37"},{"id":3134,"nodeType":"UncheckedBlock","src":"23233:59:37","statements":[{"expression":{"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"23261:16:37","subExpression":{"baseExpression":{"expression":{"id":3128,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"23263:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23265:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"23263:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3131,"indexExpression":{"id":3130,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"23274:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23263:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3133,"nodeType":"ExpressionStatement","src":"23261:16:37"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23328:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23320:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3136,"name":"address","nodeType":"ElementaryTypeName","src":"23320:7:37","typeDescriptions":{}}},"id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23320:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3140,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"23332:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3141,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"23336:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3135,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"23311:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23311:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3143,"nodeType":"EmitStatement","src":"23306:38:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3063,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"22801:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3064,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"22805:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22801:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3145,"initializationExpression":{"assignments":[3061],"declarations":[{"constant":false,"id":3061,"mutability":"mutable","name":"i","nameLocation":"22798:1:37","nodeType":"VariableDeclaration","scope":3145,"src":"22790:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3060,"name":"uint256","nodeType":"ElementaryTypeName","src":"22790:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3062,"nodeType":"VariableDeclarationStatement","src":"22790:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"22813:3:37","subExpression":{"id":3066,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"22815:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3068,"nodeType":"ExpressionStatement","src":"22813:3:37"},"nodeType":"ForStatement","src":"22785:570:37"}]},"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"21685:863:37","text":"@notice Unsafely mints tokens to multiple recipients once.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":3147,"implemented":true,"kind":"function","modifiers":[],"name":"deliverOnce","nameLocation":"22562:11:37","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"mutability":"mutable","name":"s","nameLocation":"22589:1:37","nodeType":"VariableDeclaration","scope":3147,"src":"22574:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3037,"nodeType":"UserDefinedTypeName","pathNode":{"id":3036,"name":"Layout","nameLocations":["22574:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"22574:6:37"},"referencedDeclaration":1950,"src":"22574:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"recipients","nameLocation":"22609:10:37","nodeType":"VariableDeclaration","scope":3147,"src":"22592:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3039,"name":"address","nodeType":"ElementaryTypeName","src":"22592:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3040,"nodeType":"ArrayTypeName","src":"22592:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"tokenIds","nameLocation":"22638:8:37","nodeType":"VariableDeclaration","scope":3147,"src":"22621:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3042,"name":"uint256","nodeType":"ElementaryTypeName","src":"22621:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ArrayTypeName","src":"22621:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22573:74:37"},"returnParameters":{"id":3046,"nodeType":"ParameterList","parameters":[],"src":"22657:0:37"},"scope":3634,"src":"22553:808:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3237,"nodeType":"Block","src":"24029:648:37","statements":[{"assignments":[3161],"declarations":[{"constant":false,"id":3161,"mutability":"mutable","name":"owner","nameLocation":"24047:5:37","nodeType":"VariableDeclaration","scope":3237,"src":"24039:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3160,"name":"uint256","nodeType":"ElementaryTypeName","src":"24039:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3166,"initialValue":{"baseExpression":{"expression":{"id":3162,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"24055:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24057:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"24055:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3165,"indexExpression":{"id":3164,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24064:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24055:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24039:33:37"},{"condition":{"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24086:20:37","subExpression":{"arguments":[{"id":3168,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"24100:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3167,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"24087:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24087:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3175,"nodeType":"IfStatement","src":"24082:64:37","trueBody":{"errorCall":{"arguments":[{"id":3172,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24138:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3171,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"24115:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24115:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3174,"nodeType":"RevertStatement","src":"24108:38:37"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3177,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"24172:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3176,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"24160:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24160:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3179,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24182:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24160:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3186,"nodeType":"IfStatement","src":"24156:73:37","trueBody":{"errorCall":{"arguments":[{"id":3182,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24215:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3183,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24221:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3181,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"24195:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24195:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3185,"nodeType":"RevertStatement","src":"24188:41:37"}},{"condition":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24244:31:37","subExpression":{"arguments":[{"id":3188,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"24259:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":3189,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24262:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3190,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"24268:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3187,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"24245:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24245:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3212,"nodeType":"IfStatement","src":"24240:185:37","trueBody":{"id":3211,"nodeType":"Block","src":"24277:148:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24295:25:37","subExpression":{"arguments":[{"id":3194,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"24314:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3193,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"24296:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24296:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"24324:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":3198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"24334:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24336:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"24334:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3201,"indexExpression":{"id":3200,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24346:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24334:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24324:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24295:59:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3210,"nodeType":"IfStatement","src":"24291:123:37","trueBody":{"errorCall":{"arguments":[{"id":3205,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"24392:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3206,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24400:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24406:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3204,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"24363:28:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24363:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3209,"nodeType":"RevertStatement","src":"24356:58:37"}}]}},{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3213,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"24435:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24437:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"24435:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3217,"indexExpression":{"id":3215,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24444:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24435:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3218,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"24455:23:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24435:43:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3220,"nodeType":"ExpressionStatement","src":"24435:43:37"},{"id":3227,"nodeType":"UncheckedBlock","src":"24489:132:37","statements":[{"expression":{"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"24592:18:37","subExpression":{"baseExpression":{"expression":{"id":3221,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"24594:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24596:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"24594:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3224,"indexExpression":{"id":3223,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24605:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24594:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3226,"nodeType":"ExpressionStatement","src":"24592:18:37"}]},{"eventCall":{"arguments":[{"id":3229,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"24644:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24658:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24650:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3230,"name":"address","nodeType":"ElementaryTypeName","src":"24650:7:37","typeDescriptions":{}}},"id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24650:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3234,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"24662:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3228,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"24635:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24635:35:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3236,"nodeType":"EmitStatement","src":"24630:40:37"}]},"documentation":{"id":3148,"nodeType":"StructuredDocumentation","src":"23367:565:37","text":"@notice Burns a token by a sender.\n @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @param sender The message sender.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"id":3238,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"23946:8:37","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"s","nameLocation":"23970:1:37","nodeType":"VariableDeclaration","scope":3238,"src":"23955:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3150,"nodeType":"UserDefinedTypeName","pathNode":{"id":3149,"name":"Layout","nameLocations":["23955:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"23955:6:37"},"referencedDeclaration":1950,"src":"23955:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3153,"mutability":"mutable","name":"sender","nameLocation":"23981:6:37","nodeType":"VariableDeclaration","scope":3238,"src":"23973:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3152,"name":"address","nodeType":"ElementaryTypeName","src":"23973:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3155,"mutability":"mutable","name":"from","nameLocation":"23997:4:37","nodeType":"VariableDeclaration","scope":3238,"src":"23989:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3154,"name":"address","nodeType":"ElementaryTypeName","src":"23989:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3157,"mutability":"mutable","name":"tokenId","nameLocation":"24011:7:37","nodeType":"VariableDeclaration","scope":3238,"src":"24003:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"24003:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23954:65:37"},"returnParameters":{"id":3159,"nodeType":"ParameterList","parameters":[],"src":"24029:0:37"},"scope":3634,"src":"23937:740:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3362,"nodeType":"Block","src":"25423:833:37","statements":[{"assignments":[3253],"declarations":[{"constant":false,"id":3253,"mutability":"mutable","name":"operatable","nameLocation":"25438:10:37","nodeType":"VariableDeclaration","scope":3362,"src":"25433:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3252,"name":"bool","nodeType":"ElementaryTypeName","src":"25433:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3259,"initialValue":{"arguments":[{"id":3255,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"25465:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":3256,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"25468:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3257,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"25474:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3254,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"25451:13:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1950_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25451:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"25433:48:37"},{"assignments":[3261],"declarations":[{"constant":false,"id":3261,"mutability":"mutable","name":"length","nameLocation":"25500:6:37","nodeType":"VariableDeclaration","scope":3362,"src":"25492:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3260,"name":"uint256","nodeType":"ElementaryTypeName","src":"25492:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3264,"initialValue":{"expression":{"id":3262,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"25509:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25518:6:37","memberName":"length","nodeType":"MemberAccess","src":"25509:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25492:32:37"},{"body":{"id":3346,"nodeType":"Block","src":"25567:563:37","statements":[{"assignments":[3275],"declarations":[{"constant":false,"id":3275,"mutability":"mutable","name":"tokenId","nameLocation":"25589:7:37","nodeType":"VariableDeclaration","scope":3346,"src":"25581:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3274,"name":"uint256","nodeType":"ElementaryTypeName","src":"25581:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3279,"initialValue":{"baseExpression":{"id":3276,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"25599:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3278,"indexExpression":{"id":3277,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"25608:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25599:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25581:29:37"},{"assignments":[3281],"declarations":[{"constant":false,"id":3281,"mutability":"mutable","name":"owner","nameLocation":"25632:5:37","nodeType":"VariableDeclaration","scope":3346,"src":"25624:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"25624:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3286,"initialValue":{"baseExpression":{"expression":{"id":3282,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"25640:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25642:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"25640:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3285,"indexExpression":{"id":3284,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"25649:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25640:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25624:33:37"},{"condition":{"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25675:20:37","subExpression":{"arguments":[{"id":3288,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"25689:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3287,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"25676:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25676:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3295,"nodeType":"IfStatement","src":"25671:64:37","trueBody":{"errorCall":{"arguments":[{"id":3292,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"25727:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3291,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"25704:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25704:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3294,"nodeType":"RevertStatement","src":"25697:38:37"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"25765:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3296,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"25753:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25753:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"25775:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25753:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3306,"nodeType":"IfStatement","src":"25749:73:37","trueBody":{"errorCall":{"arguments":[{"id":3302,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"25808:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3303,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"25814:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3301,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"25788:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25788:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3305,"nodeType":"RevertStatement","src":"25781:41:37"}},{"condition":{"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25840:11:37","subExpression":{"id":3307,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"25841:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3328,"nodeType":"IfStatement","src":"25836:173:37","trueBody":{"id":3327,"nodeType":"Block","src":"25853:156:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25875:25:37","subExpression":{"arguments":[{"id":3310,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"25894:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3309,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"25876:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25876:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3313,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"25904:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":3314,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"25914:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25916:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"25914:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3317,"indexExpression":{"id":3316,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"25926:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25914:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25904:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25875:59:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3326,"nodeType":"IfStatement","src":"25871:123:37","trueBody":{"errorCall":{"arguments":[{"id":3321,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"25972:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3322,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"25980:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3323,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"25986:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3320,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"25943:28:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25943:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3325,"nodeType":"RevertStatement","src":"25936:58:37"}}]}},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3329,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"26022:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26024:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"26022:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3333,"indexExpression":{"id":3331,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"26031:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26022:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3334,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"26042:23:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26022:43:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3336,"nodeType":"ExpressionStatement","src":"26022:43:37"},{"eventCall":{"arguments":[{"id":3338,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"26093:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26107:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26099:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3339,"name":"address","nodeType":"ElementaryTypeName","src":"26099:7:37","typeDescriptions":{}}},"id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26099:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3343,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"26111:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3337,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"26084:8:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26084:35:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3345,"nodeType":"EmitStatement","src":"26079:40:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"25550:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3269,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"25554:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25550:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3347,"initializationExpression":{"assignments":[3266],"declarations":[{"constant":false,"id":3266,"mutability":"mutable","name":"i","nameLocation":"25547:1:37","nodeType":"VariableDeclaration","scope":3347,"src":"25539:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3265,"name":"uint256","nodeType":"ElementaryTypeName","src":"25539:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3267,"nodeType":"VariableDeclarationStatement","src":"25539:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"25562:3:37","subExpression":{"id":3271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"25564:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3273,"nodeType":"ExpressionStatement","src":"25562:3:37"},"nodeType":"ForStatement","src":"25534:596:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3348,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"26144:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26154:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26144:11:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3361,"nodeType":"IfStatement","src":"26140:110:37","trueBody":{"id":3360,"nodeType":"Block","src":"26157:93:37","statements":[{"id":3359,"nodeType":"UncheckedBlock","src":"26171:69:37","statements":[{"expression":{"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3351,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"26199:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26201:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"26199:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3355,"indexExpression":{"id":3353,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"26210:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26199:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3356,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"26219:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26199:26:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3358,"nodeType":"ExpressionStatement","src":"26199:26:37"}]}]}}]},"documentation":{"id":3239,"nodeType":"StructuredDocumentation","src":"24683:626:37","text":"@notice Burns a batch of tokens by a sender.\n @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param sender The message sender.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"id":3363,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"25323:13:37","nodeType":"FunctionDefinition","parameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3242,"mutability":"mutable","name":"s","nameLocation":"25352:1:37","nodeType":"VariableDeclaration","scope":3363,"src":"25337:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3241,"nodeType":"UserDefinedTypeName","pathNode":{"id":3240,"name":"Layout","nameLocations":["25337:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"25337:6:37"},"referencedDeclaration":1950,"src":"25337:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3244,"mutability":"mutable","name":"sender","nameLocation":"25363:6:37","nodeType":"VariableDeclaration","scope":3363,"src":"25355:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3243,"name":"address","nodeType":"ElementaryTypeName","src":"25355:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"from","nameLocation":"25379:4:37","nodeType":"VariableDeclaration","scope":3363,"src":"25371:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3245,"name":"address","nodeType":"ElementaryTypeName","src":"25371:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3249,"mutability":"mutable","name":"tokenIds","nameLocation":"25404:8:37","nodeType":"VariableDeclaration","scope":3363,"src":"25385:27:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3247,"name":"uint256","nodeType":"ElementaryTypeName","src":"25385:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3248,"nodeType":"ArrayTypeName","src":"25385:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"25336:77:37"},"returnParameters":{"id":3251,"nodeType":"ParameterList","parameters":[],"src":"25423:0:37"},"scope":3634,"src":"25314:942:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3389,"nodeType":"Block","src":"26675:111:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3374,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"26689:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26706:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26698:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3375,"name":"address","nodeType":"ElementaryTypeName","src":"26698:7:37","typeDescriptions":{}}},"id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26698:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"26689:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3383,"nodeType":"IfStatement","src":"26685:60:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3380,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"26717:26:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26717:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3382,"nodeType":"RevertStatement","src":"26710:35:37"}},{"expression":{"baseExpression":{"expression":{"id":3384,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"26762:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26764:8:37","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"26762:10:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3387,"indexExpression":{"id":3386,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"26773:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26762:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3373,"id":3388,"nodeType":"Return","src":"26755:24:37"}]},"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"26262:316:37","text":"@notice Gets the balance of an address.\n @dev Note: This function implements {ERC721-balanceOf(address)}.\n @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"id":3390,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"26592:9:37","nodeType":"FunctionDefinition","parameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3367,"mutability":"mutable","name":"s","nameLocation":"26617:1:37","nodeType":"VariableDeclaration","scope":3390,"src":"26602:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3366,"nodeType":"UserDefinedTypeName","pathNode":{"id":3365,"name":"Layout","nameLocations":["26602:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"26602:6:37"},"referencedDeclaration":1950,"src":"26602:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"owner","nameLocation":"26628:5:37","nodeType":"VariableDeclaration","scope":3390,"src":"26620:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"26620:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26601:33:37"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"balance","nameLocation":"26666:7:37","nodeType":"VariableDeclaration","scope":3390,"src":"26658:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"26658:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26657:17:37"},"scope":3634,"src":"26583:203:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3421,"nodeType":"Block","src":"27199:159:37","statements":[{"assignments":[3402],"declarations":[{"constant":false,"id":3402,"mutability":"mutable","name":"owner","nameLocation":"27217:5:37","nodeType":"VariableDeclaration","scope":3421,"src":"27209:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"27209:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3407,"initialValue":{"baseExpression":{"expression":{"id":3403,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"27225:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27227:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"27225:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3406,"indexExpression":{"id":3405,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"27234:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27225:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27209:33:37"},{"condition":{"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27256:20:37","subExpression":{"arguments":[{"id":3409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"27270:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3408,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"27257:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27257:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3416,"nodeType":"IfStatement","src":"27252:64:37","trueBody":{"errorCall":{"arguments":[{"id":3413,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"27308:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3412,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"27285:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27285:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3415,"nodeType":"RevertStatement","src":"27278:38:37"}},{"expression":{"arguments":[{"id":3418,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"27345:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3417,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"27333:11:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27333:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3400,"id":3420,"nodeType":"Return","src":"27326:25:37"}]},"documentation":{"id":3391,"nodeType":"StructuredDocumentation","src":"26792:307:37","text":"@notice Gets the owner of a token.\n @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token."},"id":3422,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"27113:7:37","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3394,"mutability":"mutable","name":"s","nameLocation":"27136:1:37","nodeType":"VariableDeclaration","scope":3422,"src":"27121:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3393,"nodeType":"UserDefinedTypeName","pathNode":{"id":3392,"name":"Layout","nameLocations":["27121:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"27121:6:37"},"referencedDeclaration":1950,"src":"27121:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3396,"mutability":"mutable","name":"tokenId","nameLocation":"27147:7:37","nodeType":"VariableDeclaration","scope":3422,"src":"27139:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"27139:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27120:35:37"},"returnParameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3399,"mutability":"mutable","name":"tokenOwner","nameLocation":"27187:10:37","nodeType":"VariableDeclaration","scope":3422,"src":"27179:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3398,"name":"address","nodeType":"ElementaryTypeName","src":"27179:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27178:20:37"},"scope":3634,"src":"27104:254:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3465,"nodeType":"Block","src":"27856:263:37","statements":[{"assignments":[3434],"declarations":[{"constant":false,"id":3434,"mutability":"mutable","name":"owner","nameLocation":"27874:5:37","nodeType":"VariableDeclaration","scope":3465,"src":"27866:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3433,"name":"uint256","nodeType":"ElementaryTypeName","src":"27866:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3439,"initialValue":{"baseExpression":{"expression":{"id":3435,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"27882:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27884:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"27882:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3438,"indexExpression":{"id":3437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"27891:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27882:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27866:33:37"},{"condition":{"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27913:20:37","subExpression":{"arguments":[{"id":3441,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3434,"src":"27927:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3440,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"27914:12:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27914:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3448,"nodeType":"IfStatement","src":"27909:64:37","trueBody":{"errorCall":{"arguments":[{"id":3445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"27965:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3444,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"27942:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27942:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3447,"nodeType":"RevertStatement","src":"27935:38:37"}},{"condition":{"arguments":[{"id":3450,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3434,"src":"28005:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3449,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"27987:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27987:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3463,"nodeType":"Block","src":"28071:42:37","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28100:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28092:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3458,"name":"address","nodeType":"ElementaryTypeName","src":"28092:7:37","typeDescriptions":{}}},"id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28092:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3432,"id":3462,"nodeType":"Return","src":"28085:17:37"}]},"id":3464,"nodeType":"IfStatement","src":"27983:130:37","trueBody":{"id":3457,"nodeType":"Block","src":"28013:52:37","statements":[{"expression":{"baseExpression":{"expression":{"id":3452,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"28034:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28036:9:37","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1943,"src":"28034:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3455,"indexExpression":{"id":3454,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"28046:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28034:20:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3432,"id":3456,"nodeType":"Return","src":"28027:27:37"}]}}]},"documentation":{"id":3423,"nodeType":"StructuredDocumentation","src":"27364:390:37","text":"@notice Gets the approved address for a token.\n @dev Note: This function implements {ERC721-getApproved(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"id":3466,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"27768:11:37","nodeType":"FunctionDefinition","parameters":{"id":3429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"s","nameLocation":"27795:1:37","nodeType":"VariableDeclaration","scope":3466,"src":"27780:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3425,"nodeType":"UserDefinedTypeName","pathNode":{"id":3424,"name":"Layout","nameLocations":["27780:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"27780:6:37"},"referencedDeclaration":1950,"src":"27780:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"tokenId","nameLocation":"27806:7:37","nodeType":"VariableDeclaration","scope":3466,"src":"27798:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3427,"name":"uint256","nodeType":"ElementaryTypeName","src":"27798:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27779:35:37"},"returnParameters":{"id":3432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3431,"mutability":"mutable","name":"approved","nameLocation":"27846:8:37","nodeType":"VariableDeclaration","scope":3466,"src":"27838:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3430,"name":"address","nodeType":"ElementaryTypeName","src":"27838:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27837:18:37"},"scope":3634,"src":"27759:360:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3486,"nodeType":"Block","src":"28662:52:37","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":3479,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"28679:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28681:9:37","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"28679:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3482,"indexExpression":{"id":3481,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"28691:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:18:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3484,"indexExpression":{"id":3483,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"28698:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:28:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3478,"id":3485,"nodeType":"Return","src":"28672:35:37"}]},"documentation":{"id":3467,"nodeType":"StructuredDocumentation","src":"28125:411:37","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"id":3487,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"28550:16:37","nodeType":"FunctionDefinition","parameters":{"id":3475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"s","nameLocation":"28582:1:37","nodeType":"VariableDeclaration","scope":3487,"src":"28567:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3469,"nodeType":"UserDefinedTypeName","pathNode":{"id":3468,"name":"Layout","nameLocations":["28567:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"28567:6:37"},"referencedDeclaration":1950,"src":"28567:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3472,"mutability":"mutable","name":"owner","nameLocation":"28593:5:37","nodeType":"VariableDeclaration","scope":3487,"src":"28585:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"28585:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"operator","nameLocation":"28608:8:37","nodeType":"VariableDeclaration","scope":3487,"src":"28600:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3473,"name":"address","nodeType":"ElementaryTypeName","src":"28600:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28566:51:37"},"returnParameters":{"id":3478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"mutability":"mutable","name":"approvedForAll","nameLocation":"28646:14:37","nodeType":"VariableDeclaration","scope":3487,"src":"28641:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3476,"name":"bool","nodeType":"ElementaryTypeName","src":"28641:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28640:21:37"},"scope":3634,"src":"28541:173:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3505,"nodeType":"Block","src":"28968:57:37","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":3499,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"29000:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"29002:6:37","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1935,"src":"29000:8:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3502,"indexExpression":{"id":3501,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"29009:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29000:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3498,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"28985:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28985:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3497,"id":3504,"nodeType":"Return","src":"28978:40:37"}]},"documentation":{"id":3488,"nodeType":"StructuredDocumentation","src":"28720:147:37","text":"@notice Gets whether a token was burnt.\n @param tokenId The token identifier.\n @return tokenWasBurnt Whether the token was burnt."},"id":3506,"implemented":true,"kind":"function","modifiers":[],"name":"wasBurnt","nameLocation":"28881:8:37","nodeType":"FunctionDefinition","parameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3491,"mutability":"mutable","name":"s","nameLocation":"28905:1:37","nodeType":"VariableDeclaration","scope":3506,"src":"28890:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3490,"nodeType":"UserDefinedTypeName","pathNode":{"id":3489,"name":"Layout","nameLocations":["28890:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"28890:6:37"},"referencedDeclaration":1950,"src":"28890:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3493,"mutability":"mutable","name":"tokenId","nameLocation":"28916:7:37","nodeType":"VariableDeclaration","scope":3506,"src":"28908:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3492,"name":"uint256","nodeType":"ElementaryTypeName","src":"28908:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28889:35:37"},"returnParameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3496,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"28953:13:37","nodeType":"VariableDeclaration","scope":3506,"src":"28948:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3495,"name":"bool","nodeType":"ElementaryTypeName","src":"28948:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28947:20:37"},"scope":3634,"src":"28872:153:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3517,"nodeType":"Block","src":"29090:115:37","statements":[{"assignments":[3513],"declarations":[{"constant":false,"id":3513,"mutability":"mutable","name":"position","nameLocation":"29108:8:37","nodeType":"VariableDeclaration","scope":3517,"src":"29100:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"29100:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3515,"initialValue":{"id":3514,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"29119:19:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"29100:38:37"},{"AST":{"nativeSrc":"29157:42:37","nodeType":"YulBlock","src":"29157:42:37","statements":[{"nativeSrc":"29171:18:37","nodeType":"YulAssignment","src":"29171:18:37","value":{"name":"position","nativeSrc":"29181:8:37","nodeType":"YulIdentifier","src":"29181:8:37"},"variableNames":[{"name":"s.slot","nativeSrc":"29171:6:37","nodeType":"YulIdentifier","src":"29171:6:37"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3513,"isOffset":false,"isSlot":false,"src":"29181:8:37","valueSize":1},{"declaration":3510,"isOffset":false,"isSlot":true,"src":"29171:6:37","suffix":"slot","valueSize":1}],"id":3516,"nodeType":"InlineAssembly","src":"29148:51:37"}]},"id":3518,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"29040:6:37","nodeType":"FunctionDefinition","parameters":{"id":3507,"nodeType":"ParameterList","parameters":[],"src":"29046:2:37"},"returnParameters":{"id":3511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"s","nameLocation":"29087:1:37","nodeType":"VariableDeclaration","scope":3518,"src":"29072:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3509,"nodeType":"UserDefinedTypeName","pathNode":{"id":3508,"name":"Layout","nameLocations":["29072:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"29072:6:37"},"referencedDeclaration":1950,"src":"29072:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"}],"src":"29071:18:37"},"scope":3634,"src":"29031:174:37","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3549,"nodeType":"Block","src":"29779:153:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3536,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"29830:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3537,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"29838:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3538,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"29844:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3539,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"29853:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3533,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"29809:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3532,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"29793:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1879_$","typeString":"type(contract IERC721Receiver)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:19:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1879","typeString":"contract IERC721Receiver"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29813:16:37","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1878,"src":"29793:36:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:65:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3541,"name":"ERC721_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"29862:15:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"29793:84:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3548,"nodeType":"IfStatement","src":"29789:136:37","trueBody":{"errorCall":{"arguments":[{"id":3544,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"29913:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3545,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"29917:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3543,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"29886:26:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29886:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3547,"nodeType":"RevertStatement","src":"29879:46:37"}}]},"documentation":{"id":3519,"nodeType":"StructuredDocumentation","src":"29211:446:37","text":"@notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param tokenId Identifier of the token transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3550,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC721Received","nameLocation":"29671:21:37","nodeType":"FunctionDefinition","parameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3521,"mutability":"mutable","name":"sender","nameLocation":"29701:6:37","nodeType":"VariableDeclaration","scope":3550,"src":"29693:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3520,"name":"address","nodeType":"ElementaryTypeName","src":"29693:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3523,"mutability":"mutable","name":"from","nameLocation":"29717:4:37","nodeType":"VariableDeclaration","scope":3550,"src":"29709:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3522,"name":"address","nodeType":"ElementaryTypeName","src":"29709:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3525,"mutability":"mutable","name":"to","nameLocation":"29731:2:37","nodeType":"VariableDeclaration","scope":3550,"src":"29723:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3524,"name":"address","nodeType":"ElementaryTypeName","src":"29723:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"tokenId","nameLocation":"29743:7:37","nodeType":"VariableDeclaration","scope":3550,"src":"29735:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"29735:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"data","nameLocation":"29765:4:37","nodeType":"VariableDeclaration","scope":3550,"src":"29752:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3528,"name":"bytes","nodeType":"ElementaryTypeName","src":"29752:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"29692:78:37"},"returnParameters":{"id":3531,"nodeType":"ParameterList","parameters":[],"src":"29779:0:37"},"scope":3634,"src":"29662:270:37","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3575,"nodeType":"Block","src":"30357:73:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3563,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"30375:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3564,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"30384:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"30375:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"30374:18:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":3567,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"30396:1:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3568,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30398:9:37","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1949,"src":"30396:11:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3570,"indexExpression":{"id":3569,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"30408:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:18:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3572,"indexExpression":{"id":3571,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"30415:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:27:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30374:49:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3562,"id":3574,"nodeType":"Return","src":"30367:56:37"}]},"documentation":{"id":3551,"nodeType":"StructuredDocumentation","src":"29938:302:37","text":"@notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n @param owner The token owner.\n @param account The account to check the operatability of.\n @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise."},"id":3576,"implemented":true,"kind":"function","modifiers":[],"name":"_isOperatable","nameLocation":"30254:13:37","nodeType":"FunctionDefinition","parameters":{"id":3559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"mutability":"mutable","name":"s","nameLocation":"30283:1:37","nodeType":"VariableDeclaration","scope":3576,"src":"30268:16:37","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3553,"nodeType":"UserDefinedTypeName","pathNode":{"id":3552,"name":"Layout","nameLocations":["30268:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1950,"src":"30268:6:37"},"referencedDeclaration":1950,"src":"30268:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1950_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"owner","nameLocation":"30294:5:37","nodeType":"VariableDeclaration","scope":3576,"src":"30286:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3555,"name":"address","nodeType":"ElementaryTypeName","src":"30286:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3558,"mutability":"mutable","name":"account","nameLocation":"30309:7:37","nodeType":"VariableDeclaration","scope":3576,"src":"30301:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3557,"name":"address","nodeType":"ElementaryTypeName","src":"30301:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30267:50:37"},"returnParameters":{"id":3562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3561,"mutability":"mutable","name":"operatable","nameLocation":"30345:10:37","nodeType":"VariableDeclaration","scope":3576,"src":"30340:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3560,"name":"bool","nodeType":"ElementaryTypeName","src":"30340:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30339:17:37"},"scope":3634,"src":"30245:185:37","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3591,"nodeType":"Block","src":"30514:47:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":3587,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"30547:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30539:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3585,"name":"uint160","nodeType":"ElementaryTypeName","src":"30539:7:37","typeDescriptions":{}}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30539:14:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30531:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3583,"name":"address","nodeType":"ElementaryTypeName","src":"30531:7:37","typeDescriptions":{}}},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30531:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3582,"id":3590,"nodeType":"Return","src":"30524:30:37"}]},"id":3592,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenOwner","nameLocation":"30445:11:37","nodeType":"FunctionDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"owner","nameLocation":"30465:5:37","nodeType":"VariableDeclaration","scope":3592,"src":"30457:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3577,"name":"uint256","nodeType":"ElementaryTypeName","src":"30457:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30456:15:37"},"returnParameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"tokenOwner","nameLocation":"30502:10:37","nodeType":"VariableDeclaration","scope":3592,"src":"30494:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"30494:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30493:20:37"},"scope":3634,"src":"30436:125:37","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3606,"nodeType":"Block","src":"30644:43:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3601,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"30669:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30661:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3599,"name":"uint160","nodeType":"ElementaryTypeName","src":"30661:7:37","typeDescriptions":{}}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30661:14:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30679:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30661:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3598,"id":3605,"nodeType":"Return","src":"30654:26:37"}]},"id":3607,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenExists","nameLocation":"30576:12:37","nodeType":"FunctionDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3594,"mutability":"mutable","name":"owner","nameLocation":"30597:5:37","nodeType":"VariableDeclaration","scope":3607,"src":"30589:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3593,"name":"uint256","nodeType":"ElementaryTypeName","src":"30589:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30588:15:37"},"returnParameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"tokenExists","nameLocation":"30631:11:37","nodeType":"VariableDeclaration","scope":3607,"src":"30626:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3596,"name":"bool","nodeType":"ElementaryTypeName","src":"30626:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30625:18:37"},"scope":3634,"src":"30567:120:37","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3618,"nodeType":"Block","src":"30774:56:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3614,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"30791:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3615,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"30800:23:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30791:32:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3613,"id":3617,"nodeType":"Return","src":"30784:39:37"}]},"id":3619,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenWasBurnt","nameLocation":"30702:14:37","nodeType":"FunctionDefinition","parameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"owner","nameLocation":"30725:5:37","nodeType":"VariableDeclaration","scope":3619,"src":"30717:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3608,"name":"uint256","nodeType":"ElementaryTypeName","src":"30717:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30716:15:37"},"returnParameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"30759:13:37","nodeType":"VariableDeclaration","scope":3619,"src":"30754:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3611,"name":"bool","nodeType":"ElementaryTypeName","src":"30754:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30753:20:37"},"scope":3634,"src":"30693:137:37","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3632,"nodeType":"Block","src":"30923:62:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3626,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"30940:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3627,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"30948:25:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30940:33:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30977:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30940:38:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3625,"id":3631,"nodeType":"Return","src":"30933:45:37"}]},"id":3633,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenHasApproval","nameLocation":"30845:17:37","nodeType":"FunctionDefinition","parameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"owner","nameLocation":"30871:5:37","nodeType":"VariableDeclaration","scope":3633,"src":"30863:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3620,"name":"uint256","nodeType":"ElementaryTypeName","src":"30863:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30862:15:37"},"returnParameters":{"id":3625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3624,"mutability":"mutable","name":"tokenHasApproval","nameLocation":"30905:16:37","nodeType":"VariableDeclaration","scope":3633,"src":"30900:21:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3623,"name":"bool","nodeType":"ElementaryTypeName","src":"30900:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30899:23:37"},"scope":3634,"src":"30836:149:37","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3635,"src":"1368:29619:37","usedErrors":[],"usedEvents":[]}],"src":"32:30956:37"},"id":37},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","exportedSymbols":{"ITokenMetadataResolver":[3700],"TokenMetadataBase":[3686],"TokenMetadataStorage":[3887]},"id":3687,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3636,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:38"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3638,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3687,"sourceUnit":3701,"src":"58:82:38","symbolAliases":[{"foreign":{"id":3637,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"66:22:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../libraries/TokenMetadataStorage.sol","id":3640,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3687,"sourceUnit":3888,"src":"141:77:38","symbolAliases":[{"foreign":{"id":3639,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"149:20:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"TokenMetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":3641,"nodeType":"StructuredDocumentation","src":"220:283:38","text":"@title TokenMetadataBase (proxiable version).\n @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation."},"fullyImplemented":true,"id":3686,"linearizedBaseContracts":[3686],"name":"TokenMetadataBase","nameLocation":"521:17:38","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3645,"libraryName":{"id":3642,"name":"TokenMetadataStorage","nameLocations":["551:20:38"],"nodeType":"IdentifierPath","referencedDeclaration":3887,"src":"551:20:38"},"nodeType":"UsingForDirective","src":"545:59:38","typeName":{"id":3644,"nodeType":"UserDefinedTypeName","pathNode":{"id":3643,"name":"TokenMetadataStorage.Layout","nameLocations":["576:20:38","597:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"576:27:38"},"referencedDeclaration":3714,"src":"576:27:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":3657,"nodeType":"Block","src":"776:60:38","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3651,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"793:20:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3887_$","typeString":"type(library TokenMetadataStorage)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"814:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"793:27:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:29:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"823:4:38","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3826,"src":"793:34:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3714_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3650,"id":3656,"nodeType":"Return","src":"786:43:38"}]},"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"610:91:38","text":"@notice Gets the token name. E.g. \"My Token\".\n @return tokenName The token name."},"functionSelector":"06fdde03","id":3658,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"715:4:38","nodeType":"FunctionDefinition","parameters":{"id":3647,"nodeType":"ParameterList","parameters":[],"src":"719:2:38"},"returnParameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"mutability":"mutable","name":"tokenName","nameLocation":"765:9:38","nodeType":"VariableDeclaration","scope":3658,"src":"751:23:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3648,"name":"string","nodeType":"ElementaryTypeName","src":"751:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"750:25:38"},"scope":3686,"src":"706:130:38","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3670,"nodeType":"Block","src":"1013:62:38","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3664,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"1030:20:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3887_$","typeString":"type(library TokenMetadataStorage)"}},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"1030:27:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:29:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1060:6:38","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3839,"src":"1030:36:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3714_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:38:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3663,"id":3669,"nodeType":"Return","src":"1023:45:38"}]},"documentation":{"id":3659,"nodeType":"StructuredDocumentation","src":"842:92:38","text":"@notice Gets the token symbol. E.g. \"TOK\".\n @return tokenSymbol The token symbol."},"functionSelector":"95d89b41","id":3671,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"948:6:38","nodeType":"FunctionDefinition","parameters":{"id":3660,"nodeType":"ParameterList","parameters":[],"src":"954:2:38"},"returnParameters":{"id":3663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3662,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1000:11:38","nodeType":"VariableDeclaration","scope":3671,"src":"986:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3661,"name":"string","nodeType":"ElementaryTypeName","src":"986:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"985:27:38"},"scope":3686,"src":"939:136:38","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3684,"nodeType":"Block","src":"1319:72:38","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3678,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"1336:20:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3887_$","typeString":"type(library TokenMetadataStorage)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1357:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"1336:27:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:29:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3681,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1366:16:38","memberName":"metadataResolver","nodeType":"MemberAccess","referencedDeclaration":3853,"src":"1336:46:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3714_storage_ptr_$returns$_t_contract$_ITokenMetadataResolver_$3700_$attached_to$_t_struct$_Layout_$3714_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (contract ITokenMetadataResolver)"}},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:48:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3677,"id":3683,"nodeType":"Return","src":"1329:55:38"}]},"documentation":{"id":3672,"nodeType":"StructuredDocumentation","src":"1081:128:38","text":"@notice Gets the token metadata resolver address.\n @return tokenMetadataResolver The token metadata resolver address."},"functionSelector":"a0c76f62","id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"1223:16:38","nodeType":"FunctionDefinition","parameters":{"id":3673,"nodeType":"ParameterList","parameters":[],"src":"1239:2:38"},"returnParameters":{"id":3677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1296:21:38","nodeType":"VariableDeclaration","scope":3685,"src":"1273:44:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3675,"nodeType":"UserDefinedTypeName","pathNode":{"id":3674,"name":"ITokenMetadataResolver","nameLocations":["1273:22:38"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"1273:22:38"},"referencedDeclaration":3700,"src":"1273:22:38","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1272:46:38"},"scope":3686,"src":"1214:177:38","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3687,"src":"503:890:38","usedErrors":[],"usedEvents":[]}],"src":"32:1362:38"},"id":38},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","exportedSymbols":{"ITokenMetadataResolver":[3700]},"id":3701,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3688,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:39"},{"abstract":false,"baseContracts":[],"canonicalName":"ITokenMetadataResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"58:86:39","text":"@title ITokenMetadataResolver\n @notice Interface for Token Metadata Resolvers."},"fullyImplemented":false,"id":3700,"linearizedBaseContracts":[3700],"name":"ITokenMetadataResolver","nameLocation":"154:22:39","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3690,"nodeType":"StructuredDocumentation","src":"183:231:39","text":"@notice Gets the token metadata URI for a token.\n @param tokenContract The token contract for which to retrieve the token URI.\n @param tokenId The token identifier.\n @return tokenURI The token metadata URI."},"functionSelector":"f724dad7","id":3699,"implemented":false,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"428:16:39","nodeType":"FunctionDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"tokenContract","nameLocation":"453:13:39","nodeType":"VariableDeclaration","scope":3699,"src":"445:21:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"tokenId","nameLocation":"476:7:39","nodeType":"VariableDeclaration","scope":3699,"src":"468:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"444:40:39"},"returnParameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"tokenURI","nameLocation":"522:8:39","nodeType":"VariableDeclaration","scope":3699,"src":"508:22:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3696,"name":"string","nodeType":"ElementaryTypeName","src":"508:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"507:24:39"},"scope":3700,"src":"419:113:39","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3701,"src":"144:390:39","usedErrors":[],"usedEvents":[]}],"src":"32:503:39"},"id":39},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","exportedSymbols":{"ITokenMetadataResolver":[3700],"ProxyInitialization":[1066],"TokenMetadataStorage":[3887]},"id":3888,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3702,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:40"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3704,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3888,"sourceUnit":3701,"src":"58:82:40","symbolAliases":[{"foreign":{"id":3703,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"66:22:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":3706,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3888,"sourceUnit":1067,"src":"141:87:40","symbolAliases":[{"foreign":{"id":3705,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"149:19:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenMetadataStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3887,"linearizedBaseContracts":[3887],"name":"TokenMetadataStorage","nameLocation":"238:20:40","nodeType":"ContractDefinition","nodes":[{"canonicalName":"TokenMetadataStorage.Layout","id":3714,"members":[{"constant":false,"id":3708,"mutability":"mutable","name":"tokenName","nameLocation":"296:9:40","nodeType":"VariableDeclaration","scope":3714,"src":"289:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3707,"name":"string","nodeType":"ElementaryTypeName","src":"289:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"tokenSymbol","nameLocation":"322:11:40","nodeType":"VariableDeclaration","scope":3714,"src":"315:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3709,"name":"string","nodeType":"ElementaryTypeName","src":"315:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3713,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"366:21:40","nodeType":"VariableDeclaration","scope":3714,"src":"343:44:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3712,"nodeType":"UserDefinedTypeName","pathNode":{"id":3711,"name":"ITokenMetadataResolver","nameLocations":["343:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"343:22:40"},"referencedDeclaration":3700,"src":"343:22:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"name":"Layout","nameLocation":"272:6:40","nodeType":"StructDefinition","scope":3887,"src":"265:129:40","visibility":"public"},{"constant":true,"id":3727,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"426:19:40","nodeType":"VariableDeclaration","scope":3887,"src":"400:127:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"400:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e73746f72616765","id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"474:46:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""},"value":"animoca.token.metadata.TokenMetadata.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""}],"id":3720,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"464:9:40","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"464:57:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"456:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3718,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:40","typeDescriptions":{}}},"id":3723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"456:66:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"525:1:40","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"456:70:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"448:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:40","typeDescriptions":{}}},"id":3726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"448:79:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":3740,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"559:21:40","nodeType":"VariableDeclaration","scope":3887,"src":"533:127:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"533:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e7068617365","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"609:44:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""},"value":"animoca.token.metadata.TokenMetadata.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""}],"id":3733,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"599:9:40","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"599:55:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"591:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:40","typeDescriptions":{}}},"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"591:64:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"658:1:40","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"591:68:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"583:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:40","typeDescriptions":{}}},"id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"583:77:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":3772,"nodeType":"Block","src":"1209:134:40","statements":[{"expression":{"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3754,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"1219:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1221:9:40","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"1219:11:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3757,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"1233:9:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1219:23:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3759,"nodeType":"ExpressionStatement","src":"1219:23:40"},{"expression":{"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3760,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"1252:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1254:11:40","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"1252:13:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3763,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"1268:11:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1252:27:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3765,"nodeType":"ExpressionStatement","src":"1252:27:40"},{"expression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3766,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"1289:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1291:21:40","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3713,"src":"1289:23:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3769,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"1315:21:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"src":"1289:47:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"id":3771,"nodeType":"ExpressionStatement","src":"1289:47:40"}]},"documentation":{"id":3741,"nodeType":"StructuredDocumentation","src":"667:349:40","text":"@notice Initializes the metadata storage (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3773,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1030:15:40","nodeType":"FunctionDefinition","parameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"s","nameLocation":"1070:1:40","nodeType":"VariableDeclaration","scope":3773,"src":"1055:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3743,"nodeType":"UserDefinedTypeName","pathNode":{"id":3742,"name":"Layout","nameLocations":["1055:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"1055:6:40"},"referencedDeclaration":3714,"src":"1055:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3746,"mutability":"mutable","name":"tokenName","nameLocation":"1095:9:40","nodeType":"VariableDeclaration","scope":3773,"src":"1081:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3745,"name":"string","nodeType":"ElementaryTypeName","src":"1081:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3748,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1128:11:40","nodeType":"VariableDeclaration","scope":3773,"src":"1114:25:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3747,"name":"string","nodeType":"ElementaryTypeName","src":"1114:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1172:21:40","nodeType":"VariableDeclaration","scope":3773,"src":"1149:44:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3750,"nodeType":"UserDefinedTypeName","pathNode":{"id":3749,"name":"ITokenMetadataResolver","nameLocations":["1149:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"1149:22:40"},"referencedDeclaration":3700,"src":"1149:22:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:154:40"},"returnParameters":{"id":3753,"nodeType":"ParameterList","parameters":[],"src":"1209:0:40"},"scope":3887,"src":"1021:322:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3812,"nodeType":"Block","src":"2052:198:40","statements":[{"expression":{"arguments":[{"id":3790,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3740,"src":"2091:21:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2114:1:40","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":3787,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"2062:19:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1066_$","typeString":"type(library ProxyInitialization)"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2082:8:40","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1065,"src":"2062:28:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2062:54:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3793,"nodeType":"ExpressionStatement","src":"2062:54:40"},{"expression":{"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3794,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"2126:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2128:9:40","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"2126:11:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3797,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"2140:9:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2126:23:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3799,"nodeType":"ExpressionStatement","src":"2126:23:40"},{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3800,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"2159:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2161:11:40","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"2159:13:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3803,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"2175:11:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2159:27:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3805,"nodeType":"ExpressionStatement","src":"2159:27:40"},{"expression":{"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3806,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"2196:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3808,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2198:21:40","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3713,"src":"2196:23:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3809,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"2222:21:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"src":"2196:47:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"id":3811,"nodeType":"ExpressionStatement","src":"2196:47:40"}]},"documentation":{"id":3774,"nodeType":"StructuredDocumentation","src":"1349:512:40","text":"@notice Initializes the metadata storage (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3813,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1875:9:40","nodeType":"FunctionDefinition","parameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"mutability":"mutable","name":"s","nameLocation":"1909:1:40","nodeType":"VariableDeclaration","scope":3813,"src":"1894:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3776,"nodeType":"UserDefinedTypeName","pathNode":{"id":3775,"name":"Layout","nameLocations":["1894:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"1894:6:40"},"referencedDeclaration":3714,"src":"1894:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3779,"mutability":"mutable","name":"tokenName","nameLocation":"1936:9:40","nodeType":"VariableDeclaration","scope":3813,"src":"1920:25:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3778,"name":"string","nodeType":"ElementaryTypeName","src":"1920:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3781,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1971:11:40","nodeType":"VariableDeclaration","scope":3813,"src":"1955:27:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3780,"name":"string","nodeType":"ElementaryTypeName","src":"1955:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3784,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2015:21:40","nodeType":"VariableDeclaration","scope":3813,"src":"1992:44:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3783,"nodeType":"UserDefinedTypeName","pathNode":{"id":3782,"name":"ITokenMetadataResolver","nameLocations":["1992:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"1992:22:40"},"referencedDeclaration":3700,"src":"1992:22:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1884:158:40"},"returnParameters":{"id":3786,"nodeType":"ParameterList","parameters":[],"src":"2052:0:40"},"scope":3887,"src":"1866:384:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3825,"nodeType":"Block","src":"2438:35:40","statements":[{"expression":{"expression":{"id":3822,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"2455:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3823,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2457:9:40","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"2455:11:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3821,"id":3824,"nodeType":"Return","src":"2448:18:40"}]},"documentation":{"id":3814,"nodeType":"StructuredDocumentation","src":"2256:97:40","text":"@notice Gets the name of the token.\n @return tokenName The name of the token contract."},"id":3826,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2367:4:40","nodeType":"FunctionDefinition","parameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3817,"mutability":"mutable","name":"s","nameLocation":"2387:1:40","nodeType":"VariableDeclaration","scope":3826,"src":"2372:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3816,"nodeType":"UserDefinedTypeName","pathNode":{"id":3815,"name":"Layout","nameLocations":["2372:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"2372:6:40"},"referencedDeclaration":3714,"src":"2372:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2371:18:40"},"returnParameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"tokenName","nameLocation":"2427:9:40","nodeType":"VariableDeclaration","scope":3826,"src":"2413:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3819,"name":"string","nodeType":"ElementaryTypeName","src":"2413:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2412:25:40"},"scope":3887,"src":"2358:115:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3838,"nodeType":"Block","src":"2671:37:40","statements":[{"expression":{"expression":{"id":3835,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"2688:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2690:11:40","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"2688:13:40","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3834,"id":3837,"nodeType":"Return","src":"2681:20:40"}]},"documentation":{"id":3827,"nodeType":"StructuredDocumentation","src":"2479:103:40","text":"@notice Gets the symbol of the token.\n @return tokenSymbol The symbol of the token contract."},"id":3839,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2596:6:40","nodeType":"FunctionDefinition","parameters":{"id":3831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3830,"mutability":"mutable","name":"s","nameLocation":"2618:1:40","nodeType":"VariableDeclaration","scope":3839,"src":"2603:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3829,"nodeType":"UserDefinedTypeName","pathNode":{"id":3828,"name":"Layout","nameLocations":["2603:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"2603:6:40"},"referencedDeclaration":3714,"src":"2603:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2602:18:40"},"returnParameters":{"id":3834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3833,"mutability":"mutable","name":"tokenSymbol","nameLocation":"2658:11:40","nodeType":"VariableDeclaration","scope":3839,"src":"2644:25:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3832,"name":"string","nodeType":"ElementaryTypeName","src":"2644:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2643:27:40"},"scope":3887,"src":"2587:121:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3852,"nodeType":"Block","src":"2974:47:40","statements":[{"expression":{"expression":{"id":3849,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"2991:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:21:40","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3713,"src":"2991:23:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3848,"id":3851,"nodeType":"Return","src":"2984:30:40"}]},"documentation":{"id":3840,"nodeType":"StructuredDocumentation","src":"2714:142:40","text":"@notice Gets the address of the token metadata resolver.\n @return tokenMetadataResolver The address of the token metadata resolver."},"id":3853,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"2870:16:40","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"s","nameLocation":"2902:1:40","nodeType":"VariableDeclaration","scope":3853,"src":"2887:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3842,"nodeType":"UserDefinedTypeName","pathNode":{"id":3841,"name":"Layout","nameLocations":["2887:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"2887:6:40"},"referencedDeclaration":3714,"src":"2887:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2886:18:40"},"returnParameters":{"id":3848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2951:21:40","nodeType":"VariableDeclaration","scope":3853,"src":"2928:44:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3846,"nodeType":"UserDefinedTypeName","pathNode":{"id":3845,"name":"ITokenMetadataResolver","nameLocations":["2928:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"2928:22:40"},"referencedDeclaration":3700,"src":"2928:22:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"2927:46:40"},"scope":3887,"src":"2861:160:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3873,"nodeType":"Block","src":"3347:88:40","statements":[{"expression":{"arguments":[{"id":3869,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"3405:13:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3870,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"3420:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":3866,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3857,"src":"3364:1:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3366:21:40","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3713,"src":"3364:23:40","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3388:16:40","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"3364:40:40","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (address,uint256) view external returns (string memory)"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:64:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3865,"id":3872,"nodeType":"Return","src":"3357:71:40"}]},"documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"3027:193:40","text":"@notice Gets the token metadata URI retieved from the metadata resolver contract.\n @param tokenContract The address of the token contract.\n @param tokenId The ID of the token."},"id":3874,"implemented":true,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"3234:16:40","nodeType":"FunctionDefinition","parameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3857,"mutability":"mutable","name":"s","nameLocation":"3266:1:40","nodeType":"VariableDeclaration","scope":3874,"src":"3251:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3856,"nodeType":"UserDefinedTypeName","pathNode":{"id":3855,"name":"Layout","nameLocations":["3251:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"3251:6:40"},"referencedDeclaration":3714,"src":"3251:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3859,"mutability":"mutable","name":"tokenContract","nameLocation":"3277:13:40","nodeType":"VariableDeclaration","scope":3874,"src":"3269:21:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3858,"name":"address","nodeType":"ElementaryTypeName","src":"3269:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"tokenId","nameLocation":"3300:7:40","nodeType":"VariableDeclaration","scope":3874,"src":"3292:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3860,"name":"uint256","nodeType":"ElementaryTypeName","src":"3292:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3250:58:40"},"returnParameters":{"id":3865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3874,"src":"3332:13:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3863,"name":"string","nodeType":"ElementaryTypeName","src":"3332:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3331:15:40"},"scope":3887,"src":"3225:210:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3885,"nodeType":"Block","src":"3500:115:40","statements":[{"assignments":[3881],"declarations":[{"constant":false,"id":3881,"mutability":"mutable","name":"position","nameLocation":"3518:8:40","nodeType":"VariableDeclaration","scope":3885,"src":"3510:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3880,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3510:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3883,"initialValue":{"id":3882,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"3529:19:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3510:38:40"},{"AST":{"nativeSrc":"3567:42:40","nodeType":"YulBlock","src":"3567:42:40","statements":[{"nativeSrc":"3581:18:40","nodeType":"YulAssignment","src":"3581:18:40","value":{"name":"position","nativeSrc":"3591:8:40","nodeType":"YulIdentifier","src":"3591:8:40"},"variableNames":[{"name":"s.slot","nativeSrc":"3581:6:40","nodeType":"YulIdentifier","src":"3581:6:40"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3881,"isOffset":false,"isSlot":false,"src":"3591:8:40","valueSize":1},{"declaration":3878,"isOffset":false,"isSlot":true,"src":"3581:6:40","suffix":"slot","valueSize":1}],"id":3884,"nodeType":"InlineAssembly","src":"3558:51:40"}]},"id":3886,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3450:6:40","nodeType":"FunctionDefinition","parameters":{"id":3875,"nodeType":"ParameterList","parameters":[],"src":"3456:2:40"},"returnParameters":{"id":3879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3878,"mutability":"mutable","name":"s","nameLocation":"3497:1:40","nodeType":"VariableDeclaration","scope":3886,"src":"3482:16:40","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3877,"nodeType":"UserDefinedTypeName","pathNode":{"id":3876,"name":"Layout","nameLocations":["3482:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":3714,"src":"3482:6:40"},"referencedDeclaration":3714,"src":"3482:6:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3714_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"3481:18:40"},"scope":3887,"src":"3441:174:40","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3888,"src":"230:3387:40","usedErrors":[],"usedEvents":[]}],"src":"32:3586:40"},"id":40},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3965]},"id":3966,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3889,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:41"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3890,"nodeType":"StructuredDocumentation","src":"131:70:41","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3965,"linearizedBaseContracts":[3965],"name":"IERC20","nameLocation":"212:6:41","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3891,"nodeType":"StructuredDocumentation","src":"225:158:41","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3899,"name":"Transfer","nameLocation":"394:8:41","nodeType":"EventDefinition","parameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:41","nodeType":"VariableDeclaration","scope":3899,"src":"403:20:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3892,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3895,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:41","nodeType":"VariableDeclaration","scope":3899,"src":"425:18:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3894,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3897,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:41","nodeType":"VariableDeclaration","scope":3899,"src":"445:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:41"},"src":"388:72:41"},{"anonymous":false,"documentation":{"id":3900,"nodeType":"StructuredDocumentation","src":"466:148:41","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3908,"name":"Approval","nameLocation":"625:8:41","nodeType":"EventDefinition","parameters":{"id":3907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:41","nodeType":"VariableDeclaration","scope":3908,"src":"634:21:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:41","nodeType":"VariableDeclaration","scope":3908,"src":"657:23:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3906,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:41","nodeType":"VariableDeclaration","scope":3908,"src":"682:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:41"},"src":"619:78:41"},{"documentation":{"id":3909,"nodeType":"StructuredDocumentation","src":"703:66:41","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3914,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:41","nodeType":"FunctionDefinition","parameters":{"id":3910,"nodeType":"ParameterList","parameters":[],"src":"794:2:41"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3914,"src":"820:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:41"},"scope":3965,"src":"774:55:41","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3915,"nodeType":"StructuredDocumentation","src":"835:72:41","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3922,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:41","nodeType":"FunctionDefinition","parameters":{"id":3918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3917,"mutability":"mutable","name":"account","nameLocation":"939:7:41","nodeType":"VariableDeclaration","scope":3922,"src":"931:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3916,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:41"},"returnParameters":{"id":3921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3922,"src":"971:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3919,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:41"},"scope":3965,"src":"912:68:41","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3923,"nodeType":"StructuredDocumentation","src":"986:202:41","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3932,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:41","nodeType":"FunctionDefinition","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3925,"mutability":"mutable","name":"to","nameLocation":"1219:2:41","nodeType":"VariableDeclaration","scope":3932,"src":"1211:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3924,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3927,"mutability":"mutable","name":"amount","nameLocation":"1231:6:41","nodeType":"VariableDeclaration","scope":3932,"src":"1223:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3926,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:41"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3932,"src":"1257:4:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3929,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:41"},"scope":3965,"src":"1193:70:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3933,"nodeType":"StructuredDocumentation","src":"1269:264:41","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3942,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:41","nodeType":"FunctionDefinition","parameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3935,"mutability":"mutable","name":"owner","nameLocation":"1565:5:41","nodeType":"VariableDeclaration","scope":3942,"src":"1557:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3934,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3937,"mutability":"mutable","name":"spender","nameLocation":"1580:7:41","nodeType":"VariableDeclaration","scope":3942,"src":"1572:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3936,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:41"},"returnParameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3942,"src":"1612:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:41"},"scope":3965,"src":"1538:83:41","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3943,"nodeType":"StructuredDocumentation","src":"1627:642:41","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3952,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:41","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3945,"mutability":"mutable","name":"spender","nameLocation":"2299:7:41","nodeType":"VariableDeclaration","scope":3952,"src":"2291:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3944,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"amount","nameLocation":"2316:6:41","nodeType":"VariableDeclaration","scope":3952,"src":"2308:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3946,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:41"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3952,"src":"2342:4:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3949,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:41"},"scope":3965,"src":"2274:74:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3953,"nodeType":"StructuredDocumentation","src":"2354:287:41","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3964,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:41","nodeType":"FunctionDefinition","parameters":{"id":3960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"from","nameLocation":"2676:4:41","nodeType":"VariableDeclaration","scope":3964,"src":"2668:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3954,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3957,"mutability":"mutable","name":"to","nameLocation":"2690:2:41","nodeType":"VariableDeclaration","scope":3964,"src":"2682:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3956,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3959,"mutability":"mutable","name":"amount","nameLocation":"2702:6:41","nodeType":"VariableDeclaration","scope":3964,"src":"2694:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:41"},"returnParameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3964,"src":"2728:4:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3961,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:41"},"scope":3965,"src":"2646:88:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3966,"src":"202:2534:41","usedErrors":[],"usedEvents":[3899,3908]}],"src":"106:2631:41"},"id":41},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[4001]},"id":4002,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3967,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:42"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":3968,"nodeType":"StructuredDocumentation","src":"148:1963:42","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":4001,"linearizedBaseContracts":[4001],"name":"IERC20Permit","nameLocation":"2122:12:42","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3969,"nodeType":"StructuredDocumentation","src":"2141:850:42","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":3986,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3005:6:42","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3971,"mutability":"mutable","name":"owner","nameLocation":"3029:5:42","nodeType":"VariableDeclaration","scope":3986,"src":"3021:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3970,"name":"address","nodeType":"ElementaryTypeName","src":"3021:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3973,"mutability":"mutable","name":"spender","nameLocation":"3052:7:42","nodeType":"VariableDeclaration","scope":3986,"src":"3044:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3972,"name":"address","nodeType":"ElementaryTypeName","src":"3044:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3975,"mutability":"mutable","name":"value","nameLocation":"3077:5:42","nodeType":"VariableDeclaration","scope":3986,"src":"3069:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3974,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"deadline","nameLocation":"3100:8:42","nodeType":"VariableDeclaration","scope":3986,"src":"3092:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"3092:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3979,"mutability":"mutable","name":"v","nameLocation":"3124:1:42","nodeType":"VariableDeclaration","scope":3986,"src":"3118:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3978,"name":"uint8","nodeType":"ElementaryTypeName","src":"3118:5:42","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3981,"mutability":"mutable","name":"r","nameLocation":"3143:1:42","nodeType":"VariableDeclaration","scope":3986,"src":"3135:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3135:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"s","nameLocation":"3162:1:42","nodeType":"VariableDeclaration","scope":3986,"src":"3154:9:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3154:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3011:158:42"},"returnParameters":{"id":3985,"nodeType":"ParameterList","parameters":[],"src":"3178:0:42"},"scope":4001,"src":"2996:183:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3987,"nodeType":"StructuredDocumentation","src":"3185:294:42","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":3994,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3493:6:42","nodeType":"FunctionDefinition","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"owner","nameLocation":"3508:5:42","nodeType":"VariableDeclaration","scope":3994,"src":"3500:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3988,"name":"address","nodeType":"ElementaryTypeName","src":"3500:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3499:15:42"},"returnParameters":{"id":3993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3994,"src":"3538:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3991,"name":"uint256","nodeType":"ElementaryTypeName","src":"3538:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3537:9:42"},"scope":4001,"src":"3484:63:42","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3995,"nodeType":"StructuredDocumentation","src":"3553:128:42","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":4000,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3748:16:42","nodeType":"FunctionDefinition","parameters":{"id":3996,"nodeType":"ParameterList","parameters":[],"src":"3764:2:42"},"returnParameters":{"id":3999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4000,"src":"3790:7:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3790:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3789:9:42"},"scope":4001,"src":"3739:60:42","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4002,"src":"2112:1689:42","usedErrors":[],"usedEvents":[]}],"src":"123:3679:42"},"id":42},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[4707],"IERC20":[3965],"IERC20Permit":[4001],"SafeERC20":[4377]},"id":4378,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4003,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:43"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":4004,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4378,"sourceUnit":3966,"src":"140:23:43","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":4005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4378,"sourceUnit":4002,"src":"164:40:43","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":4006,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4378,"sourceUnit":4708,"src":"205:36:43","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":4007,"nodeType":"StructuredDocumentation","src":"243:457:43","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":4377,"linearizedBaseContracts":[4377],"name":"SafeERC20","nameLocation":"709:9:43","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4010,"libraryName":{"id":4008,"name":"Address","nameLocations":["731:7:43"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"731:7:43"},"nodeType":"UsingForDirective","src":"725:26:43","typeName":{"id":4009,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":4033,"nodeType":"Block","src":"1013:103:43","statements":[{"expression":{"arguments":[{"id":4022,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"1043:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4025,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"1073:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:43","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3932,"src":"1073:14:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:43","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4028,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"1098:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"1102:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4023,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4021,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"1023:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4032,"nodeType":"ExpressionStatement","src":"1023:86:43"}]},"documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"757:179:43","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4034,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:43","nodeType":"FunctionDefinition","parameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"mutability":"mutable","name":"token","nameLocation":"970:5:43","nodeType":"VariableDeclaration","scope":4034,"src":"963:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4013,"nodeType":"UserDefinedTypeName","pathNode":{"id":4012,"name":"IERC20","nameLocations":["963:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"963:6:43"},"referencedDeclaration":3965,"src":"963:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4016,"mutability":"mutable","name":"to","nameLocation":"985:2:43","nodeType":"VariableDeclaration","scope":4034,"src":"977:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4015,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4018,"mutability":"mutable","name":"value","nameLocation":"997:5:43","nodeType":"VariableDeclaration","scope":4034,"src":"989:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4017,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:43"},"returnParameters":{"id":4020,"nodeType":"ParameterList","parameters":[],"src":"1013:0:43"},"scope":4377,"src":"941:175:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4060,"nodeType":"Block","src":"1445:113:43","statements":[{"expression":{"arguments":[{"id":4048,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"1475:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"1505:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:43","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3964,"src":"1505:18:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:43","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4054,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"1534:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4055,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"1540:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"1544:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4049,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4047,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"1455:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4059,"nodeType":"ExpressionStatement","src":"1455:96:43"}]},"documentation":{"id":4035,"nodeType":"StructuredDocumentation","src":"1122:228:43","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":4061,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:43","nodeType":"FunctionDefinition","parameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4038,"mutability":"mutable","name":"token","nameLocation":"1388:5:43","nodeType":"VariableDeclaration","scope":4061,"src":"1381:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4037,"nodeType":"UserDefinedTypeName","pathNode":{"id":4036,"name":"IERC20","nameLocations":["1381:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"1381:6:43"},"referencedDeclaration":3965,"src":"1381:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4040,"mutability":"mutable","name":"from","nameLocation":"1403:4:43","nodeType":"VariableDeclaration","scope":4061,"src":"1395:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4039,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4042,"mutability":"mutable","name":"to","nameLocation":"1417:2:43","nodeType":"VariableDeclaration","scope":4061,"src":"1409:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4041,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4044,"mutability":"mutable","name":"value","nameLocation":"1429:5:43","nodeType":"VariableDeclaration","scope":4061,"src":"1421:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4043,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:43"},"returnParameters":{"id":4046,"nodeType":"ParameterList","parameters":[],"src":"1445:0:43"},"scope":4377,"src":"1355:203:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4104,"nodeType":"Block","src":"1894:497:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"2143:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4081,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:43","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}],"id":4080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4079,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:43","typeDescriptions":{}}},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4083,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"2190:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4077,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2159:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:43","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3942,"src":"2159:15:43","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":4072,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4091,"nodeType":"ExpressionStatement","src":"2121:163:43"},{"expression":{"arguments":[{"id":4093,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2314:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4096,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2344:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:43","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3952,"src":"2344:13:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:43","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4099,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"2368:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"2377:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4094,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4092,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2294:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4103,"nodeType":"ExpressionStatement","src":"2294:90:43"}]},"documentation":{"id":4062,"nodeType":"StructuredDocumentation","src":"1564:249:43","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":4105,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:43","nodeType":"FunctionDefinition","parameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4065,"mutability":"mutable","name":"token","nameLocation":"1846:5:43","nodeType":"VariableDeclaration","scope":4105,"src":"1839:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4064,"nodeType":"UserDefinedTypeName","pathNode":{"id":4063,"name":"IERC20","nameLocations":["1839:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"1839:6:43"},"referencedDeclaration":3965,"src":"1839:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4067,"mutability":"mutable","name":"spender","nameLocation":"1861:7:43","nodeType":"VariableDeclaration","scope":4105,"src":"1853:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4066,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"value","nameLocation":"1878:5:43","nodeType":"VariableDeclaration","scope":4105,"src":"1870:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:43"},"returnParameters":{"id":4071,"nodeType":"ParameterList","parameters":[],"src":"1894:0:43"},"scope":4377,"src":"1818:573:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4141,"nodeType":"Block","src":"2668:194:43","statements":[{"assignments":[4117],"declarations":[{"constant":false,"id":4117,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:43","nodeType":"VariableDeclaration","scope":4141,"src":"2678:20:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4116,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4126,"initialValue":{"arguments":[{"arguments":[{"id":4122,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:43","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}],"id":4121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4120,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:43","typeDescriptions":{}}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4124,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"2732:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4118,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2701:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:43","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3942,"src":"2701:15:43","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:43"},{"expression":{"arguments":[{"id":4128,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2770:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4131,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2800:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:43","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3952,"src":"2800:13:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:43","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4134,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"2824:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4135,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"2833:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4136,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2848:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4129,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4127,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"2750:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4140,"nodeType":"ExpressionStatement","src":"2750:105:43"}]},"documentation":{"id":4106,"nodeType":"StructuredDocumentation","src":"2397:180:43","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4142,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:43","nodeType":"FunctionDefinition","parameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4109,"mutability":"mutable","name":"token","nameLocation":"2620:5:43","nodeType":"VariableDeclaration","scope":4142,"src":"2613:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4108,"nodeType":"UserDefinedTypeName","pathNode":{"id":4107,"name":"IERC20","nameLocations":["2613:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"2613:6:43"},"referencedDeclaration":3965,"src":"2613:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"spender","nameLocation":"2635:7:43","nodeType":"VariableDeclaration","scope":4142,"src":"2627:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4110,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4113,"mutability":"mutable","name":"value","nameLocation":"2652:5:43","nodeType":"VariableDeclaration","scope":4142,"src":"2644:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4112,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:43"},"returnParameters":{"id":4115,"nodeType":"ParameterList","parameters":[],"src":"2668:0:43"},"scope":4377,"src":"2582:280:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4186,"nodeType":"Block","src":"3139:321:43","statements":[{"id":4185,"nodeType":"UncheckedBlock","src":"3149:305:43","statements":[{"assignments":[4154],"declarations":[{"constant":false,"id":4154,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:43","nodeType":"VariableDeclaration","scope":4185,"src":"3173:20:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4153,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4163,"initialValue":{"arguments":[{"arguments":[{"id":4159,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:43","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4377","typeString":"library SafeERC20"}],"id":4158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4157,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:43","typeDescriptions":{}}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4161,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"3227:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4155,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3196:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:43","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3942,"src":"3196:15:43","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4165,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3257:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"3273:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":4168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":4164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4170,"nodeType":"ExpressionStatement","src":"3249:75:43"},{"expression":{"arguments":[{"id":4172,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3358:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4175,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3388:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:43","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3952,"src":"3388:13:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:43","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4178,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"3412:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4179,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3421:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"3436:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4173,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4171,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"3338:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4184,"nodeType":"ExpressionStatement","src":"3338:105:43"}]}]},"documentation":{"id":4143,"nodeType":"StructuredDocumentation","src":"2868:180:43","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4187,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:43","nodeType":"FunctionDefinition","parameters":{"id":4151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4146,"mutability":"mutable","name":"token","nameLocation":"3091:5:43","nodeType":"VariableDeclaration","scope":4187,"src":"3084:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4145,"nodeType":"UserDefinedTypeName","pathNode":{"id":4144,"name":"IERC20","nameLocations":["3084:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"3084:6:43"},"referencedDeclaration":3965,"src":"3084:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4148,"mutability":"mutable","name":"spender","nameLocation":"3106:7:43","nodeType":"VariableDeclaration","scope":4187,"src":"3098:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4147,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4150,"mutability":"mutable","name":"value","nameLocation":"3123:5:43","nodeType":"VariableDeclaration","scope":4187,"src":"3115:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:43"},"returnParameters":{"id":4152,"nodeType":"ParameterList","parameters":[],"src":"3139:0:43"},"scope":4377,"src":"3053:407:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4233,"nodeType":"Block","src":"3856:333:43","statements":[{"assignments":[4199],"declarations":[{"constant":false,"id":4199,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:43","nodeType":"VariableDeclaration","scope":4233,"src":"3866:25:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4198,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4208,"initialValue":{"arguments":[{"expression":{"expression":{"id":4202,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"3917:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:43","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3952,"src":"3917:13:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:43","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4205,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"3941:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"3950:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4200,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:43"},{"condition":{"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:43","subExpression":{"arguments":[{"id":4210,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"3996:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"id":4211,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"4003:12:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4209,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"3972:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4232,"nodeType":"IfStatement","src":"3967:216:43","trueBody":{"id":4231,"nodeType":"Block","src":"4018:165:43","statements":[{"expression":{"arguments":[{"id":4215,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"4052:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4218,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"4082:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:43","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3952,"src":"4082:13:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:43","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:43","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4221,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"4106:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4216,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:43","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4214,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4032:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4225,"nodeType":"ExpressionStatement","src":"4032:86:43"},{"expression":{"arguments":[{"id":4227,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"4152:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},{"id":4228,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"4159:12:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4226,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4132:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4230,"nodeType":"ExpressionStatement","src":"4132:40:43"}]}}]},"documentation":{"id":4188,"nodeType":"StructuredDocumentation","src":"3466:308:43","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":4234,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:43","nodeType":"FunctionDefinition","parameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4191,"mutability":"mutable","name":"token","nameLocation":"3808:5:43","nodeType":"VariableDeclaration","scope":4234,"src":"3801:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4190,"nodeType":"UserDefinedTypeName","pathNode":{"id":4189,"name":"IERC20","nameLocations":["3801:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"3801:6:43"},"referencedDeclaration":3965,"src":"3801:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"spender","nameLocation":"3823:7:43","nodeType":"VariableDeclaration","scope":4234,"src":"3815:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4192,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4195,"mutability":"mutable","name":"value","nameLocation":"3840:5:43","nodeType":"VariableDeclaration","scope":4234,"src":"3832:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4194,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:43"},"returnParameters":{"id":4197,"nodeType":"ParameterList","parameters":[],"src":"3856:0:43"},"scope":4377,"src":"3779:410:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4290,"nodeType":"Block","src":"4556:257:43","statements":[{"assignments":[4256],"declarations":[{"constant":false,"id":4256,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:43","nodeType":"VariableDeclaration","scope":4290,"src":"4566:19:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4261,"initialValue":{"arguments":[{"id":4259,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4601:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4257,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"4588:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4001","typeString":"contract IERC20Permit"}},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:43","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3994,"src":"4588:12:43","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:43"},{"expression":{"arguments":[{"id":4265,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4630:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4266,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"4637:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"4646:5:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4268,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4246,"src":"4653:8:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4269,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"4663:1:43","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4270,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4250,"src":"4666:1:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4271,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"4669:1:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4262,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"4617:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4001","typeString":"contract IERC20Permit"}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:43","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":3986,"src":"4617:12:43","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4273,"nodeType":"ExpressionStatement","src":"4617:54:43"},{"assignments":[4275],"declarations":[{"constant":false,"id":4275,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:43","nodeType":"VariableDeclaration","scope":4290,"src":"4681:18:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4274,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4280,"initialValue":{"arguments":[{"id":4278,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4715:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4276,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"4702:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4001","typeString":"contract IERC20Permit"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:43","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3994,"src":"4702:12:43","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4282,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4275,"src":"4739:10:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4283,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"4753:11:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:43","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":4287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":4281,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4289,"nodeType":"ExpressionStatement","src":"4731:75:43"}]},"documentation":{"id":4235,"nodeType":"StructuredDocumentation","src":"4195:141:43","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":4291,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:43","nodeType":"FunctionDefinition","parameters":{"id":4253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4238,"mutability":"mutable","name":"token","nameLocation":"4383:5:43","nodeType":"VariableDeclaration","scope":4291,"src":"4370:18:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4001","typeString":"contract IERC20Permit"},"typeName":{"id":4237,"nodeType":"UserDefinedTypeName","pathNode":{"id":4236,"name":"IERC20Permit","nameLocations":["4370:12:43"],"nodeType":"IdentifierPath","referencedDeclaration":4001,"src":"4370:12:43"},"referencedDeclaration":4001,"src":"4370:12:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4001","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":4240,"mutability":"mutable","name":"owner","nameLocation":"4406:5:43","nodeType":"VariableDeclaration","scope":4291,"src":"4398:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4239,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4242,"mutability":"mutable","name":"spender","nameLocation":"4429:7:43","nodeType":"VariableDeclaration","scope":4291,"src":"4421:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4241,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4244,"mutability":"mutable","name":"value","nameLocation":"4454:5:43","nodeType":"VariableDeclaration","scope":4291,"src":"4446:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4246,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:43","nodeType":"VariableDeclaration","scope":4291,"src":"4469:16:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4245,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4248,"mutability":"mutable","name":"v","nameLocation":"4501:1:43","nodeType":"VariableDeclaration","scope":4291,"src":"4495:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4247,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:43","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4250,"mutability":"mutable","name":"r","nameLocation":"4520:1:43","nodeType":"VariableDeclaration","scope":4291,"src":"4512:9:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4252,"mutability":"mutable","name":"s","nameLocation":"4539:1:43","nodeType":"VariableDeclaration","scope":4291,"src":"4531:9:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:43"},"returnParameters":{"id":4254,"nodeType":"ParameterList","parameters":[],"src":"4556:0:43"},"scope":4377,"src":"4341:472:43","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4327,"nodeType":"Block","src":"5266:572:43","statements":[{"assignments":[4301],"declarations":[{"constant":false,"id":4301,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:43","nodeType":"VariableDeclaration","scope":4327,"src":"5615:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4300,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4310,"initialValue":{"arguments":[{"id":4307,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"5669:4:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":4308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":4304,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"5649:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}],"id":4303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4302,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:43","typeDescriptions":{}}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:43","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":4467,"src":"5641:27:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4312,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"5728:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:43","memberName":"length","nodeType":"MemberAccess","src":"5728:17:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4318,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"5765:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4319,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:43","typeDescriptions":{}}}],"id":4321,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4316,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:43","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:43","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":4324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":4311,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4326,"nodeType":"ExpressionStatement","src":"5720:111:43"}]},"documentation":{"id":4292,"nodeType":"StructuredDocumentation","src":"4819:372:43","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":4328,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:43","nodeType":"FunctionDefinition","parameters":{"id":4298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4295,"mutability":"mutable","name":"token","nameLocation":"5232:5:43","nodeType":"VariableDeclaration","scope":4328,"src":"5225:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4294,"nodeType":"UserDefinedTypeName","pathNode":{"id":4293,"name":"IERC20","nameLocations":["5225:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"5225:6:43"},"referencedDeclaration":3965,"src":"5225:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4297,"mutability":"mutable","name":"data","nameLocation":"5252:4:43","nodeType":"VariableDeclaration","scope":4328,"src":"5239:17:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4296,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:43"},"returnParameters":{"id":4299,"nodeType":"ParameterList","parameters":[],"src":"5266:0:43"},"scope":4377,"src":"5196:642:43","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4375,"nodeType":"Block","src":"6428:505:43","statements":[{"assignments":[4340,4342],"declarations":[{"constant":false,"id":4340,"mutability":"mutable","name":"success","nameLocation":"6729:7:43","nodeType":"VariableDeclaration","scope":4375,"src":"6724:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4339,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4342,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:43","nodeType":"VariableDeclaration","scope":4375,"src":"6738:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4341,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4350,"initialValue":{"arguments":[{"id":4348,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"6785:4:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4345,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"6773:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}],"id":4344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4343,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:43","typeDescriptions":{}}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:43","memberName":"call","nodeType":"MemberAccess","src":"6765:19:43","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:43"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4351,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"6819:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4352,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4342,"src":"6831:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:43","memberName":"length","nodeType":"MemberAccess","src":"6831:17:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4358,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4342,"src":"6868:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4359,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:43","typeDescriptions":{}}}],"id":4361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4356,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:43","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:43","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4364,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":4370,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"6919:5:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}],"id":4369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4368,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:43","typeDescriptions":{}}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4366,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"6892:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$4707_$","typeString":"type(library Address)"}},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:43","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4395,"src":"6892:18:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4338,"id":4374,"nodeType":"Return","src":"6800:126:43"}]},"documentation":{"id":4329,"nodeType":"StructuredDocumentation","src":"5844:490:43","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":4376,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:43","nodeType":"FunctionDefinition","parameters":{"id":4335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4332,"mutability":"mutable","name":"token","nameLocation":"6379:5:43","nodeType":"VariableDeclaration","scope":4376,"src":"6372:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4331,"nodeType":"UserDefinedTypeName","pathNode":{"id":4330,"name":"IERC20","nameLocations":["6372:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"6372:6:43"},"referencedDeclaration":3965,"src":"6372:6:43","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4334,"mutability":"mutable","name":"data","nameLocation":"6399:4:43","nodeType":"VariableDeclaration","scope":4376,"src":"6386:17:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4333,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:43"},"returnParameters":{"id":4338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4376,"src":"6422:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4336,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:43"},"scope":4377,"src":"6339:594:43","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4378,"src":"701:6234:43","usedErrors":[],"usedEvents":[]}],"src":"115:6821:43"},"id":43},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[4707]},"id":4708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4379,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:44"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":4380,"nodeType":"StructuredDocumentation","src":"126:67:44","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4707,"linearizedBaseContracts":[4707],"name":"Address","nameLocation":"202:7:44","nodeType":"ContractDefinition","nodes":[{"body":{"id":4394,"nodeType":"Block","src":"1478:254:44","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4383,"src":"1702:7:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:44","memberName":"code","nodeType":"MemberAccess","src":"1702:12:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:44","memberName":"length","nodeType":"MemberAccess","src":"1702:19:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4387,"id":4393,"nodeType":"Return","src":"1695:30:44"}]},"documentation":{"id":4381,"nodeType":"StructuredDocumentation","src":"216:1191:44","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":4395,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:44","nodeType":"FunctionDefinition","parameters":{"id":4384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4383,"mutability":"mutable","name":"account","nameLocation":"1440:7:44","nodeType":"VariableDeclaration","scope":4395,"src":"1432:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4382,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:44"},"returnParameters":{"id":4387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4395,"src":"1472:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4385,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:44"},"scope":4707,"src":"1412:320:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4428,"nodeType":"Block","src":"2718:241:44","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4406,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:44","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4707","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4707","typeString":"library Address"}],"id":4405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4404,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:44","typeDescriptions":{}}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:44","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4409,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"2761:6:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":4411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":4403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4413,"nodeType":"ExpressionStatement","src":"2728:73:44"},{"assignments":[4415,null],"declarations":[{"constant":false,"id":4415,"mutability":"mutable","name":"success","nameLocation":"2818:7:44","nodeType":"VariableDeclaration","scope":4428,"src":"2813:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4414,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4422,"initialValue":{"arguments":[{"hexValue":"","id":4420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4416,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"2831:9:44","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:44","memberName":"call","nodeType":"MemberAccess","src":"2831:14:44","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4418,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"2853:6:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:44","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:44"},{"expression":{"arguments":[{"id":4424,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"2882:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":4423,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4427,"nodeType":"ExpressionStatement","src":"2874:78:44"}]},"documentation":{"id":4396,"nodeType":"StructuredDocumentation","src":"1738:904:44","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":4429,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:44","nodeType":"FunctionDefinition","parameters":{"id":4401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:44","nodeType":"VariableDeclaration","scope":4429,"src":"2666:25:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4397,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:44","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4400,"mutability":"mutable","name":"amount","nameLocation":"2701:6:44","nodeType":"VariableDeclaration","scope":4429,"src":"2693:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:44"},"returnParameters":{"id":4402,"nodeType":"ParameterList","parameters":[],"src":"2718:0:44"},"scope":4707,"src":"2647:312:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4446,"nodeType":"Block","src":"3790:96:44","statements":[{"expression":{"arguments":[{"id":4440,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4432,"src":"3829:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4441,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"3837:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":4439,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4487,4531],"referencedDeclaration":4531,"src":"3807:21:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4438,"id":4445,"nodeType":"Return","src":"3800:79:44"}]},"documentation":{"id":4430,"nodeType":"StructuredDocumentation","src":"2965:731:44","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":4447,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:44","nodeType":"FunctionDefinition","parameters":{"id":4435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4432,"mutability":"mutable","name":"target","nameLocation":"3731:6:44","nodeType":"VariableDeclaration","scope":4447,"src":"3723:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4431,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4434,"mutability":"mutable","name":"data","nameLocation":"3752:4:44","nodeType":"VariableDeclaration","scope":4447,"src":"3739:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4433,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:44"},"returnParameters":{"id":4438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4447,"src":"3776:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4436,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:44"},"scope":4707,"src":"3701:185:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4466,"nodeType":"Block","src":"4255:76:44","statements":[{"expression":{"arguments":[{"id":4460,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"4294:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4461,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"4302:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4463,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"4311:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4459,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4487,4531],"referencedDeclaration":4531,"src":"4272:21:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4458,"id":4465,"nodeType":"Return","src":"4265:59:44"}]},"documentation":{"id":4448,"nodeType":"StructuredDocumentation","src":"3892:211:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4467,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:44","nodeType":"FunctionDefinition","parameters":{"id":4455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4450,"mutability":"mutable","name":"target","nameLocation":"4147:6:44","nodeType":"VariableDeclaration","scope":4467,"src":"4139:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4449,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4452,"mutability":"mutable","name":"data","nameLocation":"4176:4:44","nodeType":"VariableDeclaration","scope":4467,"src":"4163:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4451,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4454,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:44","nodeType":"VariableDeclaration","scope":4467,"src":"4190:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4453,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:44"},"returnParameters":{"id":4458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4467,"src":"4241:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4456,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:44"},"scope":4707,"src":"4108:223:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4486,"nodeType":"Block","src":"4806:111:44","statements":[{"expression":{"arguments":[{"id":4480,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"4845:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4481,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"4853:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4474,"src":"4859:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":4479,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4487,4531],"referencedDeclaration":4531,"src":"4823:21:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4478,"id":4485,"nodeType":"Return","src":"4816:94:44"}]},"documentation":{"id":4468,"nodeType":"StructuredDocumentation","src":"4337:351:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":4487,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:44","nodeType":"FunctionDefinition","parameters":{"id":4475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"target","nameLocation":"4732:6:44","nodeType":"VariableDeclaration","scope":4487,"src":"4724:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4469,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4472,"mutability":"mutable","name":"data","nameLocation":"4753:4:44","nodeType":"VariableDeclaration","scope":4487,"src":"4740:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4471,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4474,"mutability":"mutable","name":"value","nameLocation":"4767:5:44","nodeType":"VariableDeclaration","scope":4487,"src":"4759:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4473,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:44"},"returnParameters":{"id":4478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4487,"src":"4792:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4476,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:44"},"scope":4707,"src":"4693:224:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4530,"nodeType":"Block","src":"5344:267:44","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4504,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:44","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4707","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4707","typeString":"library Address"}],"id":4503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4502,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:44","typeDescriptions":{}}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:44","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"5387:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":4501,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4511,"nodeType":"ExpressionStatement","src":"5354:81:44"},{"assignments":[4513,4515],"declarations":[{"constant":false,"id":4513,"mutability":"mutable","name":"success","nameLocation":"5451:7:44","nodeType":"VariableDeclaration","scope":4530,"src":"5446:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4512,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4515,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:44","nodeType":"VariableDeclaration","scope":4530,"src":"5460:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4514,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4522,"initialValue":{"arguments":[{"id":4520,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"5513:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4516,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"5487:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:44","memberName":"call","nodeType":"MemberAccess","src":"5487:11:44","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"5506:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:44","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:44"},{"expression":{"arguments":[{"id":4524,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"5562:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4525,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"5570:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4526,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"5579:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4527,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"5591:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4523,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"5535:26:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4500,"id":4529,"nodeType":"Return","src":"5528:76:44"}]},"documentation":{"id":4488,"nodeType":"StructuredDocumentation","src":"4923:237:44","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4531,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:44","nodeType":"FunctionDefinition","parameters":{"id":4497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4490,"mutability":"mutable","name":"target","nameLocation":"5213:6:44","nodeType":"VariableDeclaration","scope":4531,"src":"5205:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4489,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4492,"mutability":"mutable","name":"data","nameLocation":"5242:4:44","nodeType":"VariableDeclaration","scope":4531,"src":"5229:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4491,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4494,"mutability":"mutable","name":"value","nameLocation":"5264:5:44","nodeType":"VariableDeclaration","scope":4531,"src":"5256:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4496,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:44","nodeType":"VariableDeclaration","scope":4531,"src":"5279:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4495,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:44"},"returnParameters":{"id":4500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4531,"src":"5330:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4498,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:44"},"scope":4707,"src":"5165:446:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4547,"nodeType":"Block","src":"5888:97:44","statements":[{"expression":{"arguments":[{"id":4542,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"5924:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4543,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"5932:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":4544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":4541,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[4548,4577],"referencedDeclaration":4577,"src":"5905:18:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4540,"id":4546,"nodeType":"Return","src":"5898:80:44"}]},"documentation":{"id":4532,"nodeType":"StructuredDocumentation","src":"5617:166:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4548,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:44","nodeType":"FunctionDefinition","parameters":{"id":4537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4534,"mutability":"mutable","name":"target","nameLocation":"5824:6:44","nodeType":"VariableDeclaration","scope":4548,"src":"5816:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4533,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4536,"mutability":"mutable","name":"data","nameLocation":"5845:4:44","nodeType":"VariableDeclaration","scope":4548,"src":"5832:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4535,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:44"},"returnParameters":{"id":4540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4548,"src":"5874:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4538,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:44"},"scope":4707,"src":"5788:197:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4576,"nodeType":"Block","src":"6327:168:44","statements":[{"assignments":[4561,4563],"declarations":[{"constant":false,"id":4561,"mutability":"mutable","name":"success","nameLocation":"6343:7:44","nodeType":"VariableDeclaration","scope":4576,"src":"6338:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4560,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4563,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:44","nodeType":"VariableDeclaration","scope":4576,"src":"6352:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4562,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4568,"initialValue":{"arguments":[{"id":4566,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4553,"src":"6397:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4564,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4551,"src":"6379:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:44","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:44","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:44"},{"expression":{"arguments":[{"id":4570,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4551,"src":"6446:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4571,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"6454:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4572,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"6463:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4573,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"6475:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4569,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"6419:26:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4559,"id":4575,"nodeType":"Return","src":"6412:76:44"}]},"documentation":{"id":4549,"nodeType":"StructuredDocumentation","src":"5991:173:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4577,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:44","nodeType":"FunctionDefinition","parameters":{"id":4556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4551,"mutability":"mutable","name":"target","nameLocation":"6214:6:44","nodeType":"VariableDeclaration","scope":4577,"src":"6206:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4550,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4553,"mutability":"mutable","name":"data","nameLocation":"6243:4:44","nodeType":"VariableDeclaration","scope":4577,"src":"6230:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4552,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4555,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:44","nodeType":"VariableDeclaration","scope":4577,"src":"6257:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4554,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:44"},"returnParameters":{"id":4559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4577,"src":"6313:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4557,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:44"},"scope":4707,"src":"6169:326:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4593,"nodeType":"Block","src":"6771:101:44","statements":[{"expression":{"arguments":[{"id":4588,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"6809:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4589,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"6817:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":4590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":4587,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[4594,4623],"referencedDeclaration":4623,"src":"6788:20:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4586,"id":4592,"nodeType":"Return","src":"6781:84:44"}]},"documentation":{"id":4578,"nodeType":"StructuredDocumentation","src":"6501:168:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4594,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:44","nodeType":"FunctionDefinition","parameters":{"id":4583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4580,"mutability":"mutable","name":"target","nameLocation":"6712:6:44","nodeType":"VariableDeclaration","scope":4594,"src":"6704:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4579,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4582,"mutability":"mutable","name":"data","nameLocation":"6733:4:44","nodeType":"VariableDeclaration","scope":4594,"src":"6720:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4581,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:44"},"returnParameters":{"id":4586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4594,"src":"6757:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4584,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:44"},"scope":4707,"src":"6674:198:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4622,"nodeType":"Block","src":"7213:170:44","statements":[{"assignments":[4607,4609],"declarations":[{"constant":false,"id":4607,"mutability":"mutable","name":"success","nameLocation":"7229:7:44","nodeType":"VariableDeclaration","scope":4622,"src":"7224:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4606,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4609,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:44","nodeType":"VariableDeclaration","scope":4622,"src":"7238:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4608,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4614,"initialValue":{"arguments":[{"id":4612,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"7285:4:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4610,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"7265:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:44","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:44","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:44"},{"expression":{"arguments":[{"id":4616,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"7334:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4617,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"7342:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4618,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"7351:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4619,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"7363:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4615,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"7307:26:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4605,"id":4621,"nodeType":"Return","src":"7300:76:44"}]},"documentation":{"id":4595,"nodeType":"StructuredDocumentation","src":"6878:175:44","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4623,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:44","nodeType":"FunctionDefinition","parameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4597,"mutability":"mutable","name":"target","nameLocation":"7105:6:44","nodeType":"VariableDeclaration","scope":4623,"src":"7097:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4596,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4599,"mutability":"mutable","name":"data","nameLocation":"7134:4:44","nodeType":"VariableDeclaration","scope":4623,"src":"7121:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4598,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4601,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:44","nodeType":"VariableDeclaration","scope":4623,"src":"7148:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4600,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:44"},"returnParameters":{"id":4605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4623,"src":"7199:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4603,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:44"},"scope":4707,"src":"7058:325:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4661,"nodeType":"Block","src":"7865:434:44","statements":[{"condition":{"id":4637,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"7879:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4659,"nodeType":"Block","src":"8235:58:44","statements":[{"expression":{"arguments":[{"id":4655,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"8257:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4656,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"8269:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4654,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"8249:7:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4658,"nodeType":"ExpressionStatement","src":"8249:33:44"}]},"id":4660,"nodeType":"IfStatement","src":"7875:418:44","trueBody":{"id":4653,"nodeType":"Block","src":"7888:341:44","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"7906:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:44","memberName":"length","nodeType":"MemberAccess","src":"7906:17:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4650,"nodeType":"IfStatement","src":"7902:286:44","trueBody":{"id":4649,"nodeType":"Block","src":"7930:258:44","statements":[{"expression":{"arguments":[{"arguments":[{"id":4644,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"8132:6:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4643,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"8121:10:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":4646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":4642,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4648,"nodeType":"ExpressionStatement","src":"8113:60:44"}]}},{"expression":{"id":4651,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"8208:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4636,"id":4652,"nodeType":"Return","src":"8201:17:44"}]}}]},"documentation":{"id":4624,"nodeType":"StructuredDocumentation","src":"7389:277:44","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":4662,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:44","nodeType":"FunctionDefinition","parameters":{"id":4633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4626,"mutability":"mutable","name":"target","nameLocation":"7724:6:44","nodeType":"VariableDeclaration","scope":4662,"src":"7716:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4625,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4628,"mutability":"mutable","name":"success","nameLocation":"7745:7:44","nodeType":"VariableDeclaration","scope":4662,"src":"7740:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4627,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4630,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:44","nodeType":"VariableDeclaration","scope":4662,"src":"7762:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4629,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4632,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:44","nodeType":"VariableDeclaration","scope":4662,"src":"7795:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4631,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:44"},"returnParameters":{"id":4636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4662,"src":"7851:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4634,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:44"},"scope":4707,"src":"7671:628:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4685,"nodeType":"Block","src":"8680:135:44","statements":[{"condition":{"id":4674,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4665,"src":"8694:7:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4683,"nodeType":"Block","src":"8751:58:44","statements":[{"expression":{"arguments":[{"id":4679,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"8773:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4680,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8785:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4678,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"8765:7:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4682,"nodeType":"ExpressionStatement","src":"8765:33:44"}]},"id":4684,"nodeType":"IfStatement","src":"8690:119:44","trueBody":{"id":4677,"nodeType":"Block","src":"8703:42:44","statements":[{"expression":{"id":4675,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"8724:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4673,"id":4676,"nodeType":"Return","src":"8717:17:44"}]}}]},"documentation":{"id":4663,"nodeType":"StructuredDocumentation","src":"8305:210:44","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":4686,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:44","nodeType":"FunctionDefinition","parameters":{"id":4670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4665,"mutability":"mutable","name":"success","nameLocation":"8560:7:44","nodeType":"VariableDeclaration","scope":4686,"src":"8555:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4664,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4667,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:44","nodeType":"VariableDeclaration","scope":4686,"src":"8577:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4666,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4669,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:44","nodeType":"VariableDeclaration","scope":4686,"src":"8610:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4668,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:44"},"returnParameters":{"id":4673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4686,"src":"8666:12:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4671,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:44"},"scope":4707,"src":"8520:295:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4705,"nodeType":"Block","src":"8904:457:44","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4693,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"8980:10:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:44","memberName":"length","nodeType":"MemberAccess","src":"8980:17:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4703,"nodeType":"Block","src":"9310:45:44","statements":[{"expression":{"arguments":[{"id":4700,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"9331:12:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4699,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:44","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4702,"nodeType":"ExpressionStatement","src":"9324:20:44"}]},"id":4704,"nodeType":"IfStatement","src":"8976:379:44","trueBody":{"id":4698,"nodeType":"Block","src":"9003:301:44","statements":[{"AST":{"nativeSrc":"9161:133:44","nodeType":"YulBlock","src":"9161:133:44","statements":[{"nativeSrc":"9179:40:44","nodeType":"YulVariableDeclaration","src":"9179:40:44","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:44","nodeType":"YulIdentifier","src":"9208:10:44"}],"functionName":{"name":"mload","nativeSrc":"9202:5:44","nodeType":"YulIdentifier","src":"9202:5:44"},"nativeSrc":"9202:17:44","nodeType":"YulFunctionCall","src":"9202:17:44"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:44","nodeType":"YulTypedName","src":"9183:15:44","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:44","nodeType":"YulLiteral","src":"9247:2:44","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:44","nodeType":"YulIdentifier","src":"9251:10:44"}],"functionName":{"name":"add","nativeSrc":"9243:3:44","nodeType":"YulIdentifier","src":"9243:3:44"},"nativeSrc":"9243:19:44","nodeType":"YulFunctionCall","src":"9243:19:44"},{"name":"returndata_size","nativeSrc":"9264:15:44","nodeType":"YulIdentifier","src":"9264:15:44"}],"functionName":{"name":"revert","nativeSrc":"9236:6:44","nodeType":"YulIdentifier","src":"9236:6:44"},"nativeSrc":"9236:44:44","nodeType":"YulFunctionCall","src":"9236:44:44"},"nativeSrc":"9236:44:44","nodeType":"YulExpressionStatement","src":"9236:44:44"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4688,"isOffset":false,"isSlot":false,"src":"9208:10:44","valueSize":1},{"declaration":4688,"isOffset":false,"isSlot":false,"src":"9251:10:44","valueSize":1}],"id":4697,"nodeType":"InlineAssembly","src":"9152:142:44"}]}}]},"id":4706,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:44","nodeType":"FunctionDefinition","parameters":{"id":4691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:44","nodeType":"VariableDeclaration","scope":4706,"src":"8838:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4687,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4690,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:44","nodeType":"VariableDeclaration","scope":4706,"src":"8863:26:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4689,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:44"},"returnParameters":{"id":4692,"nodeType":"ParameterList","parameters":[],"src":"8904:0:44"},"scope":4707,"src":"8821:540:44","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4708,"src":"194:9169:44","usedErrors":[],"usedEvents":[]}],"src":"101:9263:44"},"id":44},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4737]},"id":4738,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:45"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4710,"nodeType":"StructuredDocumentation","src":"126:496:45","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4737,"linearizedBaseContracts":[4737],"name":"Context","nameLocation":"641:7:45","nodeType":"ContractDefinition","nodes":[{"body":{"id":4718,"nodeType":"Block","src":"717:34:45","statements":[{"expression":{"expression":{"id":4715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:45","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:45","memberName":"sender","nodeType":"MemberAccess","src":"734:10:45","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4714,"id":4717,"nodeType":"Return","src":"727:17:45"}]},"id":4719,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:45","nodeType":"FunctionDefinition","parameters":{"id":4711,"nodeType":"ParameterList","parameters":[],"src":"674:2:45"},"returnParameters":{"id":4714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4719,"src":"708:7:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4712,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:45"},"scope":4737,"src":"655:96:45","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4727,"nodeType":"Block","src":"824:32:45","statements":[{"expression":{"expression":{"id":4724,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:45","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:45","memberName":"data","nodeType":"MemberAccess","src":"841:8:45","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4723,"id":4726,"nodeType":"Return","src":"834:15:45"}]},"id":4728,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:45","nodeType":"FunctionDefinition","parameters":{"id":4720,"nodeType":"ParameterList","parameters":[],"src":"774:2:45"},"returnParameters":{"id":4723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4728,"src":"808:14:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4721,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:45"},"scope":4737,"src":"757:99:45","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4735,"nodeType":"Block","src":"934:25:45","statements":[{"expression":{"hexValue":"30","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:45","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4732,"id":4734,"nodeType":"Return","src":"944:8:45"}]},"id":4736,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:45","nodeType":"FunctionDefinition","parameters":{"id":4729,"nodeType":"ParameterList","parameters":[],"src":"891:2:45"},"returnParameters":{"id":4732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4736,"src":"925:7:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4730,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:45"},"scope":4737,"src":"862:97:45","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4738,"src":"623:338:45","usedErrors":[],"usedEvents":[]}],"src":"101:861:45"},"id":45},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[4847]},"id":4848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4739,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:46"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":4740,"nodeType":"StructuredDocumentation","src":"218:1201:46","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":4847,"linearizedBaseContracts":[4847],"name":"StorageSlot","nameLocation":"1428:11:46","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":4743,"members":[{"constant":false,"id":4742,"mutability":"mutable","name":"value","nameLocation":"1483:5:46","nodeType":"VariableDeclaration","scope":4743,"src":"1475:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4741,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:46","nodeType":"StructDefinition","scope":4847,"src":"1446:49:46","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":4746,"members":[{"constant":false,"id":4745,"mutability":"mutable","name":"value","nameLocation":"1535:5:46","nodeType":"VariableDeclaration","scope":4746,"src":"1530:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4744,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:46","nodeType":"StructDefinition","scope":4847,"src":"1501:46:46","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":4749,"members":[{"constant":false,"id":4748,"mutability":"mutable","name":"value","nameLocation":"1590:5:46","nodeType":"VariableDeclaration","scope":4749,"src":"1582:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:46","nodeType":"StructDefinition","scope":4847,"src":"1553:49:46","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":4752,"members":[{"constant":false,"id":4751,"mutability":"mutable","name":"value","nameLocation":"1645:5:46","nodeType":"VariableDeclaration","scope":4752,"src":"1637:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4750,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:46","nodeType":"StructDefinition","scope":4847,"src":"1608:49:46","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":4755,"members":[{"constant":false,"id":4754,"mutability":"mutable","name":"value","nameLocation":"1698:5:46","nodeType":"VariableDeclaration","scope":4755,"src":"1691:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4753,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:46","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:46","nodeType":"StructDefinition","scope":4847,"src":"1663:47:46","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":4758,"members":[{"constant":false,"id":4757,"mutability":"mutable","name":"value","nameLocation":"1749:5:46","nodeType":"VariableDeclaration","scope":4758,"src":"1743:11:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4756,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:46","nodeType":"StructDefinition","scope":4847,"src":"1716:45:46","visibility":"public"},{"body":{"id":4768,"nodeType":"Block","src":"1943:106:46","statements":[{"AST":{"nativeSrc":"2005:38:46","nodeType":"YulBlock","src":"2005:38:46","statements":[{"nativeSrc":"2019:14:46","nodeType":"YulAssignment","src":"2019:14:46","value":{"name":"slot","nativeSrc":"2029:4:46","nodeType":"YulIdentifier","src":"2029:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:46","nodeType":"YulIdentifier","src":"2019:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4765,"isOffset":false,"isSlot":true,"src":"2019:6:46","suffix":"slot","valueSize":1},{"declaration":4761,"isOffset":false,"isSlot":false,"src":"2029:4:46","valueSize":1}],"id":4767,"nodeType":"InlineAssembly","src":"1996:47:46"}]},"documentation":{"id":4759,"nodeType":"StructuredDocumentation","src":"1767:87:46","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":4769,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:46","nodeType":"FunctionDefinition","parameters":{"id":4762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4761,"mutability":"mutable","name":"slot","nameLocation":"1891:4:46","nodeType":"VariableDeclaration","scope":4769,"src":"1883:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:46"},"returnParameters":{"id":4766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"r","nameLocation":"1940:1:46","nodeType":"VariableDeclaration","scope":4769,"src":"1920:21:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4743_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":4764,"nodeType":"UserDefinedTypeName","pathNode":{"id":4763,"name":"AddressSlot","nameLocations":["1920:11:46"],"nodeType":"IdentifierPath","referencedDeclaration":4743,"src":"1920:11:46"},"referencedDeclaration":4743,"src":"1920:11:46","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4743_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:46"},"scope":4847,"src":"1859:190:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4779,"nodeType":"Block","src":"2231:106:46","statements":[{"AST":{"nativeSrc":"2293:38:46","nodeType":"YulBlock","src":"2293:38:46","statements":[{"nativeSrc":"2307:14:46","nodeType":"YulAssignment","src":"2307:14:46","value":{"name":"slot","nativeSrc":"2317:4:46","nodeType":"YulIdentifier","src":"2317:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:46","nodeType":"YulIdentifier","src":"2307:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4776,"isOffset":false,"isSlot":true,"src":"2307:6:46","suffix":"slot","valueSize":1},{"declaration":4772,"isOffset":false,"isSlot":false,"src":"2317:4:46","valueSize":1}],"id":4778,"nodeType":"InlineAssembly","src":"2284:47:46"}]},"documentation":{"id":4770,"nodeType":"StructuredDocumentation","src":"2055:87:46","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":4780,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:46","nodeType":"FunctionDefinition","parameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"slot","nameLocation":"2179:4:46","nodeType":"VariableDeclaration","scope":4780,"src":"2171:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4771,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:46"},"returnParameters":{"id":4777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4776,"mutability":"mutable","name":"r","nameLocation":"2228:1:46","nodeType":"VariableDeclaration","scope":4780,"src":"2208:21:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4746_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":4775,"nodeType":"UserDefinedTypeName","pathNode":{"id":4774,"name":"BooleanSlot","nameLocations":["2208:11:46"],"nodeType":"IdentifierPath","referencedDeclaration":4746,"src":"2208:11:46"},"referencedDeclaration":4746,"src":"2208:11:46","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4746_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:46"},"scope":4847,"src":"2147:190:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4790,"nodeType":"Block","src":"2519:106:46","statements":[{"AST":{"nativeSrc":"2581:38:46","nodeType":"YulBlock","src":"2581:38:46","statements":[{"nativeSrc":"2595:14:46","nodeType":"YulAssignment","src":"2595:14:46","value":{"name":"slot","nativeSrc":"2605:4:46","nodeType":"YulIdentifier","src":"2605:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:46","nodeType":"YulIdentifier","src":"2595:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4787,"isOffset":false,"isSlot":true,"src":"2595:6:46","suffix":"slot","valueSize":1},{"declaration":4783,"isOffset":false,"isSlot":false,"src":"2605:4:46","valueSize":1}],"id":4789,"nodeType":"InlineAssembly","src":"2572:47:46"}]},"documentation":{"id":4781,"nodeType":"StructuredDocumentation","src":"2343:87:46","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":4791,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:46","nodeType":"FunctionDefinition","parameters":{"id":4784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4783,"mutability":"mutable","name":"slot","nameLocation":"2467:4:46","nodeType":"VariableDeclaration","scope":4791,"src":"2459:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:46"},"returnParameters":{"id":4788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4787,"mutability":"mutable","name":"r","nameLocation":"2516:1:46","nodeType":"VariableDeclaration","scope":4791,"src":"2496:21:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4749_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":4786,"nodeType":"UserDefinedTypeName","pathNode":{"id":4785,"name":"Bytes32Slot","nameLocations":["2496:11:46"],"nodeType":"IdentifierPath","referencedDeclaration":4749,"src":"2496:11:46"},"referencedDeclaration":4749,"src":"2496:11:46","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4749_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:46"},"scope":4847,"src":"2435:190:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4801,"nodeType":"Block","src":"2807:106:46","statements":[{"AST":{"nativeSrc":"2869:38:46","nodeType":"YulBlock","src":"2869:38:46","statements":[{"nativeSrc":"2883:14:46","nodeType":"YulAssignment","src":"2883:14:46","value":{"name":"slot","nativeSrc":"2893:4:46","nodeType":"YulIdentifier","src":"2893:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:46","nodeType":"YulIdentifier","src":"2883:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4798,"isOffset":false,"isSlot":true,"src":"2883:6:46","suffix":"slot","valueSize":1},{"declaration":4794,"isOffset":false,"isSlot":false,"src":"2893:4:46","valueSize":1}],"id":4800,"nodeType":"InlineAssembly","src":"2860:47:46"}]},"documentation":{"id":4792,"nodeType":"StructuredDocumentation","src":"2631:87:46","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":4802,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:46","nodeType":"FunctionDefinition","parameters":{"id":4795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"slot","nameLocation":"2755:4:46","nodeType":"VariableDeclaration","scope":4802,"src":"2747:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:46"},"returnParameters":{"id":4799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4798,"mutability":"mutable","name":"r","nameLocation":"2804:1:46","nodeType":"VariableDeclaration","scope":4802,"src":"2784:21:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":4797,"nodeType":"UserDefinedTypeName","pathNode":{"id":4796,"name":"Uint256Slot","nameLocations":["2784:11:46"],"nodeType":"IdentifierPath","referencedDeclaration":4752,"src":"2784:11:46"},"referencedDeclaration":4752,"src":"2784:11:46","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4752_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:46"},"scope":4847,"src":"2723:190:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4812,"nodeType":"Block","src":"3092:106:46","statements":[{"AST":{"nativeSrc":"3154:38:46","nodeType":"YulBlock","src":"3154:38:46","statements":[{"nativeSrc":"3168:14:46","nodeType":"YulAssignment","src":"3168:14:46","value":{"name":"slot","nativeSrc":"3178:4:46","nodeType":"YulIdentifier","src":"3178:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:46","nodeType":"YulIdentifier","src":"3168:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4809,"isOffset":false,"isSlot":true,"src":"3168:6:46","suffix":"slot","valueSize":1},{"declaration":4805,"isOffset":false,"isSlot":false,"src":"3178:4:46","valueSize":1}],"id":4811,"nodeType":"InlineAssembly","src":"3145:47:46"}]},"documentation":{"id":4803,"nodeType":"StructuredDocumentation","src":"2919:86:46","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":4813,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:46","nodeType":"FunctionDefinition","parameters":{"id":4806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4805,"mutability":"mutable","name":"slot","nameLocation":"3041:4:46","nodeType":"VariableDeclaration","scope":4813,"src":"3033:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4804,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:46"},"returnParameters":{"id":4810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4809,"mutability":"mutable","name":"r","nameLocation":"3089:1:46","nodeType":"VariableDeclaration","scope":4813,"src":"3070:20:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4755_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4808,"nodeType":"UserDefinedTypeName","pathNode":{"id":4807,"name":"StringSlot","nameLocations":["3070:10:46"],"nodeType":"IdentifierPath","referencedDeclaration":4755,"src":"3070:10:46"},"referencedDeclaration":4755,"src":"3070:10:46","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4755_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:46"},"scope":4847,"src":"3010:188:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4823,"nodeType":"Block","src":"3400:112:46","statements":[{"AST":{"nativeSrc":"3462:44:46","nodeType":"YulBlock","src":"3462:44:46","statements":[{"nativeSrc":"3476:20:46","nodeType":"YulAssignment","src":"3476:20:46","value":{"name":"store.slot","nativeSrc":"3486:10:46","nodeType":"YulIdentifier","src":"3486:10:46"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:46","nodeType":"YulIdentifier","src":"3476:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4820,"isOffset":false,"isSlot":true,"src":"3476:6:46","suffix":"slot","valueSize":1},{"declaration":4816,"isOffset":false,"isSlot":true,"src":"3486:10:46","suffix":"slot","valueSize":1}],"id":4822,"nodeType":"InlineAssembly","src":"3453:53:46"}]},"documentation":{"id":4814,"nodeType":"StructuredDocumentation","src":"3204:101:46","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":4824,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:46","nodeType":"FunctionDefinition","parameters":{"id":4817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4816,"mutability":"mutable","name":"store","nameLocation":"3348:5:46","nodeType":"VariableDeclaration","scope":4824,"src":"3333:20:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4815,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:46","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:46"},"returnParameters":{"id":4821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4820,"mutability":"mutable","name":"r","nameLocation":"3397:1:46","nodeType":"VariableDeclaration","scope":4824,"src":"3378:20:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4755_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4819,"nodeType":"UserDefinedTypeName","pathNode":{"id":4818,"name":"StringSlot","nameLocations":["3378:10:46"],"nodeType":"IdentifierPath","referencedDeclaration":4755,"src":"3378:10:46"},"referencedDeclaration":4755,"src":"3378:10:46","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4755_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:46"},"scope":4847,"src":"3310:202:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4834,"nodeType":"Block","src":"3688:106:46","statements":[{"AST":{"nativeSrc":"3750:38:46","nodeType":"YulBlock","src":"3750:38:46","statements":[{"nativeSrc":"3764:14:46","nodeType":"YulAssignment","src":"3764:14:46","value":{"name":"slot","nativeSrc":"3774:4:46","nodeType":"YulIdentifier","src":"3774:4:46"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:46","nodeType":"YulIdentifier","src":"3764:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4831,"isOffset":false,"isSlot":true,"src":"3764:6:46","suffix":"slot","valueSize":1},{"declaration":4827,"isOffset":false,"isSlot":false,"src":"3774:4:46","valueSize":1}],"id":4833,"nodeType":"InlineAssembly","src":"3741:47:46"}]},"documentation":{"id":4825,"nodeType":"StructuredDocumentation","src":"3518:85:46","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":4835,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:46","nodeType":"FunctionDefinition","parameters":{"id":4828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4827,"mutability":"mutable","name":"slot","nameLocation":"3638:4:46","nodeType":"VariableDeclaration","scope":4835,"src":"3630:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:46"},"returnParameters":{"id":4832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4831,"mutability":"mutable","name":"r","nameLocation":"3685:1:46","nodeType":"VariableDeclaration","scope":4835,"src":"3667:19:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4758_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4830,"nodeType":"UserDefinedTypeName","pathNode":{"id":4829,"name":"BytesSlot","nameLocations":["3667:9:46"],"nodeType":"IdentifierPath","referencedDeclaration":4758,"src":"3667:9:46"},"referencedDeclaration":4758,"src":"3667:9:46","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4758_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:46"},"scope":4847,"src":"3608:186:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4845,"nodeType":"Block","src":"3991:112:46","statements":[{"AST":{"nativeSrc":"4053:44:46","nodeType":"YulBlock","src":"4053:44:46","statements":[{"nativeSrc":"4067:20:46","nodeType":"YulAssignment","src":"4067:20:46","value":{"name":"store.slot","nativeSrc":"4077:10:46","nodeType":"YulIdentifier","src":"4077:10:46"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:46","nodeType":"YulIdentifier","src":"4067:6:46"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4842,"isOffset":false,"isSlot":true,"src":"4067:6:46","suffix":"slot","valueSize":1},{"declaration":4838,"isOffset":false,"isSlot":true,"src":"4077:10:46","suffix":"slot","valueSize":1}],"id":4844,"nodeType":"InlineAssembly","src":"4044:53:46"}]},"documentation":{"id":4836,"nodeType":"StructuredDocumentation","src":"3800:99:46","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":4846,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:46","nodeType":"FunctionDefinition","parameters":{"id":4839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4838,"mutability":"mutable","name":"store","nameLocation":"3940:5:46","nodeType":"VariableDeclaration","scope":4846,"src":"3926:19:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4837,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:46"},"returnParameters":{"id":4843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4842,"mutability":"mutable","name":"r","nameLocation":"3988:1:46","nodeType":"VariableDeclaration","scope":4846,"src":"3970:19:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4758_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4841,"nodeType":"UserDefinedTypeName","pathNode":{"id":4840,"name":"BytesSlot","nameLocations":["3970:9:46"],"nodeType":"IdentifierPath","referencedDeclaration":4758,"src":"3970:9:46"},"referencedDeclaration":4758,"src":"3970:9:46","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4758_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:46"},"scope":4847,"src":"3904:199:46","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4848,"src":"1420:2685:46","usedErrors":[],"usedEvents":[]}],"src":"193:3913:46"},"id":46},"contracts/BCNFT.sol":{"ast":{"absolutePath":"contracts/BCNFT.sol","exportedSymbols":{"BCNFT":[4888],"ContractOwnership":[55],"ERC721":[1090],"ERC721Metadata":[1135],"ERC721MintableOnce":[1159],"ITokenMetadataResolver":[3700]},"id":4889,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4849,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:47"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":4851,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4889,"sourceUnit":56,"src":"58:101:47","symbolAliases":[{"foreign":{"id":4850,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"66:17:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol","id":4853,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4889,"sourceUnit":1091,"src":"160:85:47","symbolAliases":[{"foreign":{"id":4852,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"168:6:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","id":4855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4889,"sourceUnit":1136,"src":"246:101:47","symbolAliases":[{"foreign":{"id":4854,"name":"ERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"254:14:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol","id":4857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4889,"sourceUnit":1160,"src":"348:109:47","symbolAliases":[{"foreign":{"id":4856,"name":"ERC721MintableOnce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"356:18:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","id":4859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4889,"sourceUnit":3701,"src":"458:130:47","symbolAliases":[{"foreign":{"id":4858,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"466:22:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4860,"name":"ContractOwnership","nameLocations":["608:17:47"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"608:17:47"},"id":4861,"nodeType":"InheritanceSpecifier","src":"608:17:47"},{"baseName":{"id":4862,"name":"ERC721","nameLocations":["627:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"627:6:47"},"id":4863,"nodeType":"InheritanceSpecifier","src":"627:6:47"},{"baseName":{"id":4864,"name":"ERC721Metadata","nameLocations":["635:14:47"],"nodeType":"IdentifierPath","referencedDeclaration":1135,"src":"635:14:47"},"id":4865,"nodeType":"InheritanceSpecifier","src":"635:14:47"},{"baseName":{"id":4866,"name":"ERC721MintableOnce","nameLocations":["651:18:47"],"nodeType":"IdentifierPath","referencedDeclaration":1159,"src":"651:18:47"},"id":4867,"nodeType":"InheritanceSpecifier","src":"651:18:47"}],"canonicalName":"BCNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4888,"linearizedBaseContracts":[4888,1159,22,1135,1436,1830,3686,1090,55,892,909,227,179,1569,1356,4737,341,325,1861,1756],"name":"BCNFT","nameLocation":"599:5:47","nodeType":"ContractDefinition","nodes":[{"body":{"id":4886,"nodeType":"Block","src":"868:2:47","statements":[]},"id":4887,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4873,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"761:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"761:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4875,"kind":"baseConstructorSpecifier","modifierName":{"id":4872,"name":"ContractOwnership","nameLocations":["743:17:47"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"743:17:47"},"nodeType":"ModifierInvocation","src":"743:31:47"},{"arguments":[],"id":4877,"kind":"baseConstructorSpecifier","modifierName":{"id":4876,"name":"ERC721","nameLocations":["775:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"775:6:47"},"nodeType":"ModifierInvocation","src":"775:8:47"},{"arguments":[{"hexValue":"426f6e64696e67204375727665204e4654","id":4879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"799:19:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a94d11cea9b91804607548369adc40eb4bb76d778ee7c5d885c994ac172f4d0","typeString":"literal_string \"Bonding Curve NFT\""},"value":"Bonding Curve NFT"},{"hexValue":"42434e4654","id":4880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"820:7:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_82bc16e4daee4749820ccaada7efffa219638c17c50af162dd85872b50088cb9","typeString":"literal_string \"BCNFT\""},"value":"BCNFT"},{"id":4881,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"829:16:47","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}}],"id":4882,"kind":"baseConstructorSpecifier","modifierName":{"id":4878,"name":"ERC721Metadata","nameLocations":["784:14:47"],"nodeType":"IdentifierPath","referencedDeclaration":1135,"src":"784:14:47"},"nodeType":"ModifierInvocation","src":"784:62:47"},{"arguments":[],"id":4884,"kind":"baseConstructorSpecifier","modifierName":{"id":4883,"name":"ERC721MintableOnce","nameLocations":["847:18:47"],"nodeType":"IdentifierPath","referencedDeclaration":1159,"src":"847:18:47"},"nodeType":"ModifierInvocation","src":"847:20:47"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4870,"mutability":"mutable","name":"metadataResolver","nameLocation":"720:16:47","nodeType":"VariableDeclaration","scope":4887,"src":"697:39:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":4869,"nodeType":"UserDefinedTypeName","pathNode":{"id":4868,"name":"ITokenMetadataResolver","nameLocations":["697:22:47"],"nodeType":"IdentifierPath","referencedDeclaration":3700,"src":"697:22:47"},"referencedDeclaration":3700,"src":"697:22:47","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3700","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"687:55:47"},"returnParameters":{"id":4885,"nodeType":"ParameterList","parameters":[],"src":"868:0:47"},"scope":4888,"src":"676:194:47","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4889,"src":"590:282:47","usedErrors":[236,259,897,1576,1581,1590,1593,1598,1607,1614,1621,1624,1629,1634,1641],"usedEvents":[282,291,300,1652,1661,1670]}],"src":"32:841:47"},"id":47},"contracts/BCNFTMinter.sol":{"ast":{"absolutePath":"contracts/BCNFTMinter.sol","exportedSymbols":{"BCNFTMinter":[5024],"Context":[4737],"ERC721Minter":[5717],"ICurve":[5316],"IERC165":[909],"IERC20":[3965],"IERC721Mintable":[1861],"SafeERC20":[4377]},"id":5025,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4890,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:48"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4892,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":3966,"src":"58:70:48","symbolAliases":[{"foreign":{"id":4891,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"66:6:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":4894,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":4378,"src":"129:82:48","symbolAliases":[{"foreign":{"id":4893,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"137:9:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":4896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":4738,"src":"212:66:48","symbolAliases":[{"foreign":{"id":4895,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"220:7:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","id":4898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":910,"src":"279:99:48","symbolAliases":[{"foreign":{"id":4897,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"287:7:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","id":4900,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":1862,"src":"379:114:48","symbolAliases":[{"foreign":{"id":4899,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"387:15:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/minter/ERC721/ERC721Minter.sol","file":"./lib/minter/ERC721/ERC721Minter.sol","id":4902,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":5718,"src":"494:66:48","symbolAliases":[{"foreign":{"id":4901,"name":"ERC721Minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"502:12:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/interfaces/ICurve.sol","file":"./lib/curve/interfaces/ICurve.sol","id":4904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5025,"sourceUnit":5317,"src":"561:57:48","symbolAliases":[{"foreign":{"id":4903,"name":"ICurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"569:6:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4905,"name":"ERC721Minter","nameLocations":["644:12:48"],"nodeType":"IdentifierPath","referencedDeclaration":5717,"src":"644:12:48"},"id":4906,"nodeType":"InheritanceSpecifier","src":"644:12:48"},{"baseName":{"id":4907,"name":"Context","nameLocations":["658:7:48"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"658:7:48"},"id":4908,"nodeType":"InheritanceSpecifier","src":"658:7:48"}],"canonicalName":"BCNFTMinter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5024,"linearizedBaseContracts":[5024,4737,5717,892,909,5772,5810],"name":"BCNFTMinter","nameLocation":"629:11:48","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4912,"libraryName":{"id":4909,"name":"SafeERC20","nameLocations":["678:9:48"],"nodeType":"IdentifierPath","referencedDeclaration":4377,"src":"678:9:48"},"nodeType":"UsingForDirective","src":"672:27:48","typeName":{"id":4911,"nodeType":"UserDefinedTypeName","pathNode":{"id":4910,"name":"IERC20","nameLocations":["692:6:48"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"692:6:48"},"referencedDeclaration":3965,"src":"692:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"7165485d","id":4915,"mutability":"mutable","name":"curve","nameLocation":"719:5:48","nodeType":"VariableDeclaration","scope":5024,"src":"705:19:48","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"},"typeName":{"id":4914,"nodeType":"UserDefinedTypeName","pathNode":{"id":4913,"name":"ICurve","nameLocations":["705:6:48"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"705:6:48"},"referencedDeclaration":5316,"src":"705:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"visibility":"public"},{"constant":false,"functionSelector":"647846a5","id":4918,"mutability":"mutable","name":"feeToken","nameLocation":"744:8:48","nodeType":"VariableDeclaration","scope":5024,"src":"730:22:48","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4917,"nodeType":"UserDefinedTypeName","pathNode":{"id":4916,"name":"IERC20","nameLocations":["730:6:48"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"730:6:48"},"referencedDeclaration":3965,"src":"730:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"b3f00674","id":4920,"mutability":"mutable","name":"feeReceiver","nameLocation":"773:11:48","nodeType":"VariableDeclaration","scope":5024,"src":"758:26:48","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"errorSelector":"b4b60251","id":4924,"name":"InvalidCurveContractType","nameLocation":"797:24:48","nodeType":"ErrorDefinition","parameters":{"id":4923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"mutability":"mutable","name":"curveContract","nameLocation":"830:13:48","nodeType":"VariableDeclaration","scope":4924,"src":"822:21:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4921,"name":"address","nodeType":"ElementaryTypeName","src":"822:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"821:23:48"},"src":"791:54:48"},{"errorSelector":"d92e233d","id":4926,"name":"ZeroAddress","nameLocation":"857:11:48","nodeType":"ErrorDefinition","parameters":{"id":4925,"nodeType":"ParameterList","parameters":[],"src":"868:2:48"},"src":"851:20:48"},{"body":{"id":4991,"nodeType":"Block","src":"1019:340:48","statements":[{"condition":{"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1033:69:48","subExpression":{"arguments":[{"expression":{"arguments":[{"id":4954,"name":"ICurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"1082:6:48","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICurve_$5316_$","typeString":"type(contract ICurve)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ICurve_$5316_$","typeString":"type(contract ICurve)"}],"id":4953,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1077:4:48","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1077:12:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ICurve_$5316","typeString":"type(contract ICurve)"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1090:11:48","memberName":"interfaceId","nodeType":"MemberAccess","src":"1077:24:48","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":4949,"name":"_curve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"1050:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}],"id":4948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1042:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4947,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:48","typeDescriptions":{}}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:15:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4946,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"1034:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1034:24:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$909","typeString":"contract IERC165"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1059:17:48","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":908,"src":"1034:42:48","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1034:68:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4967,"nodeType":"IfStatement","src":"1029:148:48","trueBody":{"id":4966,"nodeType":"Block","src":"1104:73:48","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":4962,"name":"_curve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"1158:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}],"id":4961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1150:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4960,"name":"address","nodeType":"ElementaryTypeName","src":"1150:7:48","typeDescriptions":{}}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:15:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4959,"name":"InvalidCurveContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4924,"src":"1125:24:48","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1125:41:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4965,"nodeType":"RevertStatement","src":"1118:48:48"}]}},{"expression":{"id":4970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4968,"name":"curve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"1186:5:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4969,"name":"_curve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"1194:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"src":"1186:14:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"id":4971,"nodeType":"ExpressionStatement","src":"1186:14:48"},{"expression":{"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4972,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"1210:8:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4973,"name":"_feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"1221:9:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"src":"1210:20:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":4975,"nodeType":"ExpressionStatement","src":"1210:20:48"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4976,"name":"_feeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"1244:12:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1268:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1260:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4977,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:48","typeDescriptions":{}}},"id":4980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1260:10:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1244:26:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4986,"nodeType":"IfStatement","src":"1240:77:48","trueBody":{"id":4985,"nodeType":"Block","src":"1272:45:48","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4982,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4926,"src":"1293:11:48","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1293:13:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4984,"nodeType":"RevertStatement","src":"1286:20:48"}]}},{"expression":{"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4987,"name":"feeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"1326:11:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4988,"name":"_feeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"1340:12:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1326:26:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4990,"nodeType":"ExpressionStatement","src":"1326:26:48"}]},"id":4992,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4942,"name":"maxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"1000:10:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4943,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"1012:5:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"id":4944,"kind":"baseConstructorSpecifier","modifierName":{"id":4941,"name":"ERC721Minter","nameLocations":["987:12:48"],"nodeType":"IdentifierPath","referencedDeclaration":5717,"src":"987:12:48"},"nodeType":"ModifierInvocation","src":"987:31:48"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4929,"mutability":"mutable","name":"_curve","nameLocation":"896:6:48","nodeType":"VariableDeclaration","scope":4992,"src":"889:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"},"typeName":{"id":4928,"nodeType":"UserDefinedTypeName","pathNode":{"id":4927,"name":"ICurve","nameLocations":["889:6:48"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"889:6:48"},"referencedDeclaration":5316,"src":"889:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"visibility":"internal"},{"constant":false,"id":4932,"mutability":"mutable","name":"_feeToken","nameLocation":"911:9:48","nodeType":"VariableDeclaration","scope":4992,"src":"904:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"},"typeName":{"id":4931,"nodeType":"UserDefinedTypeName","pathNode":{"id":4930,"name":"IERC20","nameLocations":["904:6:48"],"nodeType":"IdentifierPath","referencedDeclaration":3965,"src":"904:6:48"},"referencedDeclaration":3965,"src":"904:6:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4934,"mutability":"mutable","name":"_feeReceiver","nameLocation":"930:12:48","nodeType":"VariableDeclaration","scope":4992,"src":"922:20:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4933,"name":"address","nodeType":"ElementaryTypeName","src":"922:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4936,"mutability":"mutable","name":"maxTokenId","nameLocation":"952:10:48","nodeType":"VariableDeclaration","scope":4992,"src":"944:18:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4935,"name":"uint256","nodeType":"ElementaryTypeName","src":"944:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4939,"mutability":"mutable","name":"token","nameLocation":"980:5:48","nodeType":"VariableDeclaration","scope":4992,"src":"964:21:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"},"typeName":{"id":4938,"nodeType":"UserDefinedTypeName","pathNode":{"id":4937,"name":"IERC721Mintable","nameLocations":["964:15:48"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"964:15:48"},"referencedDeclaration":1861,"src":"964:15:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"visibility":"internal"}],"src":"888:98:48"},"returnParameters":{"id":4945,"nodeType":"ParameterList","parameters":[],"src":"1019:0:48"},"scope":5024,"src":"877:482:48","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5745],"body":{"id":5022,"nodeType":"Block","src":"1407:167:48","statements":[{"assignments":[4999],"declarations":[{"constant":false,"id":4999,"mutability":"mutable","name":"price","nameLocation":"1425:5:48","nodeType":"VariableDeclaration","scope":5022,"src":"1417:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4998,"name":"uint256","nodeType":"ElementaryTypeName","src":"1417:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5006,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5002,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5758,"src":"1454:14:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1454:16:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":5004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1472:1:48","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5000,"name":"curve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"1433:5:48","typeDescriptions":{"typeIdentifier":"t_contract$_ICurve_$5316","typeString":"contract ICurve"}},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1439:14:48","memberName":"calculatePrice","nodeType":"MemberAccess","referencedDeclaration":5315,"src":"1433:20:48","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view external returns (uint256)"}},"id":5005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:41:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1417:57:48"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5010,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1510:10:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1510:12:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5012,"name":"feeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"1524:11:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5013,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"1537:5:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5007,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"1484:8:48","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3965","typeString":"contract IERC20"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1493:16:48","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":4061,"src":"1484:25:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3965_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$3965_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:59:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5015,"nodeType":"ExpressionStatement","src":"1484:59:48"},{"expression":{"arguments":[{"id":5019,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4994,"src":"1564:2:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5016,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1553:5:48","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_BCNFTMinter_$5024_$","typeString":"type(contract super BCNFTMinter)"}},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:4:48","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":5745,"src":"1553:10:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1553:14:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5021,"nodeType":"ExpressionStatement","src":"1553:14:48"}]},"functionSelector":"6a627842","id":5023,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1374:4:48","nodeType":"FunctionDefinition","overrides":{"id":4996,"nodeType":"OverrideSpecifier","overrides":[],"src":"1398:8:48"},"parameters":{"id":4995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4994,"mutability":"mutable","name":"to","nameLocation":"1387:2:48","nodeType":"VariableDeclaration","scope":5023,"src":"1379:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4993,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1378:12:48"},"returnParameters":{"id":4997,"nodeType":"ParameterList","parameters":[],"src":"1407:0:48"},"scope":5024,"src":"1365:209:48","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5025,"src":"620:956:48","usedErrors":[897,4924,4926,5777,5780,5785,5788],"usedEvents":[]}],"src":"32:1545:48"},"id":48},"contracts/BondingCurve.sol":{"ast":{"absolutePath":"contracts/BondingCurve.sol","exportedSymbols":{"BondingCurve":[5048],"LinearCurve":[5098]},"id":5049,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5026,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:49"},{"absolutePath":"contracts/lib/curve/LinearCurve.sol","file":"./lib/curve/LinearCurve.sol","id":5028,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5049,"sourceUnit":5099,"src":"58:56:49","symbolAliases":[{"foreign":{"id":5027,"name":"LinearCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"66:11:49","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5029,"name":"LinearCurve","nameLocations":["141:11:49"],"nodeType":"IdentifierPath","referencedDeclaration":5098,"src":"141:11:49"},"id":5030,"nodeType":"InheritanceSpecifier","src":"141:11:49"}],"canonicalName":"BondingCurve","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5048,"linearizedBaseContracts":[5048,5098,55,892,909,227,5271,4737,341,5356,5316],"name":"BondingCurve","nameLocation":"125:12:49","nodeType":"ContractDefinition","nodes":[{"body":{"id":5046,"nodeType":"Block","src":"283:2:49","statements":[]},"id":5047,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5039,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"238:10:49","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"238:12:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5041,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"252:5:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5042,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"259:9:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5043,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"270:11:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5044,"kind":"baseConstructorSpecifier","modifierName":{"id":5038,"name":"LinearCurve","nameLocations":["226:11:49"],"nodeType":"IdentifierPath","referencedDeclaration":5098,"src":"226:11:49"},"nodeType":"ModifierInvocation","src":"226:56:49"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"price","nameLocation":"179:5:49","nodeType":"VariableDeclaration","scope":5047,"src":"171:13:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5031,"name":"uint256","nodeType":"ElementaryTypeName","src":"171:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5034,"mutability":"mutable","name":"numerator","nameLocation":"194:9:49","nodeType":"VariableDeclaration","scope":5047,"src":"186:17:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5033,"name":"uint256","nodeType":"ElementaryTypeName","src":"186:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5036,"mutability":"mutable","name":"denominator","nameLocation":"213:11:49","nodeType":"VariableDeclaration","scope":5047,"src":"205:19:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5035,"name":"uint256","nodeType":"ElementaryTypeName","src":"205:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"170:55:49"},"returnParameters":{"id":5045,"nodeType":"ParameterList","parameters":[],"src":"283:0:49"},"scope":5048,"src":"159:126:49","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5049,"src":"116:171:49","usedErrors":[259,897,5276,5279],"usedEvents":[300,5288,5295,5302]}],"src":"32:256:49"},"id":49},"contracts/lib/curve/LinearCurve.sol":{"ast":{"absolutePath":"contracts/lib/curve/LinearCurve.sol","exportedSymbols":{"ContractOwnership":[55],"InterfaceDetection":[892],"LinearCurve":[5098],"LinearCurveBase":[5271],"LinearCurveStorage":[5678]},"id":5099,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5050,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:50"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","id":5052,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5099,"sourceUnit":893,"src":"58:110:50","symbolAliases":[{"foreign":{"id":5051,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"66:18:50","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":5054,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5099,"sourceUnit":56,"src":"169:101:50","symbolAliases":[{"foreign":{"id":5053,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"177:17:50","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/base/LinearCurveBase.sol","file":"./base/LinearCurveBase.sol","id":5056,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5099,"sourceUnit":5272,"src":"271:59:50","symbolAliases":[{"foreign":{"id":5055,"name":"LinearCurveBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"279:15:50","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/libraries/LinearCurveStorage.sol","file":"./libraries/LinearCurveStorage.sol","id":5058,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5099,"sourceUnit":5679,"src":"331:70:50","symbolAliases":[{"foreign":{"id":5057,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"339:18:50","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5060,"name":"LinearCurveBase","nameLocations":["589:15:50"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"589:15:50"},"id":5061,"nodeType":"InheritanceSpecifier","src":"589:15:50"},{"baseName":{"id":5062,"name":"InterfaceDetection","nameLocations":["606:18:50"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"606:18:50"},"id":5063,"nodeType":"InheritanceSpecifier","src":"606:18:50"},{"baseName":{"id":5064,"name":"ContractOwnership","nameLocations":["626:17:50"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"626:17:50"},"id":5065,"nodeType":"InheritanceSpecifier","src":"626:17:50"}],"canonicalName":"LinearCurve","contractDependencies":[],"contractKind":"contract","documentation":{"id":5059,"nodeType":"StructuredDocumentation","src":"403:153:50","text":"@title Linear Curve contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":5098,"linearizedBaseContracts":[5098,55,892,909,227,5271,4737,341,5356,5316],"name":"LinearCurve","nameLocation":"574:11:50","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5069,"libraryName":{"id":5066,"name":"LinearCurveStorage","nameLocations":["656:18:50"],"nodeType":"IdentifierPath","referencedDeclaration":5678,"src":"656:18:50"},"nodeType":"UsingForDirective","src":"650:55:50","typeName":{"id":5068,"nodeType":"UserDefinedTypeName","pathNode":{"id":5067,"name":"LinearCurveStorage.Layout","nameLocations":["679:18:50","698:6:50"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"679:25:50"},"referencedDeclaration":5388,"src":"679:25:50","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}}},{"body":{"id":5096,"nodeType":"Block","src":"1431:105:50","statements":[{"expression":{"arguments":[{"id":5089,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"1485:5:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5090,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"1492:9:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5091,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"1503:11:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5092,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1516:10:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1516:12:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5084,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1441:18:50","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1460:6:50","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"1441:25:50","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1441:27:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1469:15:50","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":5475,"src":"1441:43:50","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,uint256,uint256,address)"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1441:88:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5095,"nodeType":"ExpressionStatement","src":"1441:88:50"}]},"documentation":{"id":5070,"nodeType":"StructuredDocumentation","src":"711:594:50","text":"@notice Initializes the storage with an initial price, slope numerator, and slope denominator.\n @notice Initializes the contract ownership with `initialOwner` as the initial contract owner.\n @dev Emits an {InitialPriceSet}.\n @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n @param initialOwner The address to receive the contract ownership.\n @param price The initial price.\n @param numerator The slope numerator.\n @param denominator The slope denominator."},"id":5097,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5081,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"1417:12:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5082,"kind":"baseConstructorSpecifier","modifierName":{"id":5080,"name":"ContractOwnership","nameLocations":["1399:17:50"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"1399:17:50"},"nodeType":"ModifierInvocation","src":"1399:31:50"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5072,"mutability":"mutable","name":"initialOwner","nameLocation":"1330:12:50","nodeType":"VariableDeclaration","scope":5097,"src":"1322:20:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5071,"name":"address","nodeType":"ElementaryTypeName","src":"1322:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5074,"mutability":"mutable","name":"price","nameLocation":"1352:5:50","nodeType":"VariableDeclaration","scope":5097,"src":"1344:13:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1344:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5076,"mutability":"mutable","name":"numerator","nameLocation":"1367:9:50","nodeType":"VariableDeclaration","scope":5097,"src":"1359:17:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1359:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5078,"mutability":"mutable","name":"denominator","nameLocation":"1386:11:50","nodeType":"VariableDeclaration","scope":5097,"src":"1378:19:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1378:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1321:77:50"},"returnParameters":{"id":5083,"nodeType":"ParameterList","parameters":[],"src":"1431:0:50"},"scope":5098,"src":"1310:226:50","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5099,"src":"556:982:50","usedErrors":[259,897,5276,5279],"usedEvents":[300,5288,5295,5302]}],"src":"32:1507:50"},"id":50},"contracts/lib/curve/base/LinearCurveBase.sol":{"ast":{"absolutePath":"contracts/lib/curve/base/LinearCurveBase.sol","exportedSymbols":{"Context":[4737],"ContractOwnershipStorage":[862],"ICurve":[5316],"ILinearCurve":[5356],"LinearCurveBase":[5271],"LinearCurveStorage":[5678]},"id":5272,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5100,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:51"},{"absolutePath":"contracts/lib/curve/interfaces/ICurve.sol","file":"../interfaces/ICurve.sol","id":5102,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5272,"sourceUnit":5317,"src":"58:48:51","symbolAliases":[{"foreign":{"id":5101,"name":"ICurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"66:6:51","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/interfaces/ILinearCurve.sol","file":"../interfaces/ILinearCurve.sol","id":5104,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5272,"sourceUnit":5357,"src":"107:60:51","symbolAliases":[{"foreign":{"id":5103,"name":"ILinearCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"115:12:51","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/libraries/LinearCurveStorage.sol","file":"../libraries/LinearCurveStorage.sol","id":5106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5272,"sourceUnit":5679,"src":"168:71:51","symbolAliases":[{"foreign":{"id":5105,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"176:18:51","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":5108,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5272,"sourceUnit":4738,"src":"240:66:51","symbolAliases":[{"foreign":{"id":5107,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"248:7:51","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":5110,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5272,"sourceUnit":863,"src":"307:125:51","symbolAliases":[{"foreign":{"id":5109,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"315:24:51","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5112,"name":"ICurve","nameLocations":["793:6:51"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"793:6:51"},"id":5113,"nodeType":"InheritanceSpecifier","src":"793:6:51"},{"baseName":{"id":5114,"name":"ILinearCurve","nameLocations":["801:12:51"],"nodeType":"IdentifierPath","referencedDeclaration":5356,"src":"801:12:51"},"id":5115,"nodeType":"InheritanceSpecifier","src":"801:12:51"},{"baseName":{"id":5116,"name":"Context","nameLocations":["815:7:51"],"nodeType":"IdentifierPath","referencedDeclaration":4737,"src":"815:7:51"},"id":5117,"nodeType":"InheritanceSpecifier","src":"815:7:51"}],"canonicalName":"LinearCurveBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":5111,"nodeType":"StructuredDocumentation","src":"434:322:51","text":"@title Linear Curve contract for calculating the price of a token.\n @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":5271,"linearizedBaseContracts":[5271,4737,5356,5316],"name":"LinearCurveBase","nameLocation":"774:15:51","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5121,"libraryName":{"id":5118,"name":"LinearCurveStorage","nameLocations":["835:18:51"],"nodeType":"IdentifierPath","referencedDeclaration":5678,"src":"835:18:51"},"nodeType":"UsingForDirective","src":"829:55:51","typeName":{"id":5120,"nodeType":"UserDefinedTypeName","pathNode":{"id":5119,"name":"LinearCurveStorage.Layout","nameLocations":["858:18:51","877:6:51"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"858:25:51"},"referencedDeclaration":5388,"src":"858:25:51","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}}},{"global":false,"id":5125,"libraryName":{"id":5122,"name":"ContractOwnershipStorage","nameLocations":["895:24:51"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"895:24:51"},"nodeType":"UsingForDirective","src":"889:67:51","typeName":{"id":5124,"nodeType":"UserDefinedTypeName","pathNode":{"id":5123,"name":"ContractOwnershipStorage.Layout","nameLocations":["924:24:51","949:6:51"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"924:31:51"},"referencedDeclaration":635,"src":"924:31:51","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[5343],"body":{"id":5153,"nodeType":"Block","src":"1044:194:51","statements":[{"assignments":[5132],"declarations":[{"constant":false,"id":5132,"mutability":"mutable","name":"operator","nameLocation":"1062:8:51","nodeType":"VariableDeclaration","scope":5153,"src":"1054:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5131,"name":"address","nodeType":"ElementaryTypeName","src":"1054:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5135,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5133,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1073:10:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1073:12:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1054:31:51"},{"expression":{"arguments":[{"id":5141,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1152:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5136,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1095:24:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1120:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1095:31:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1095:33:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1129:22:51","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1095:56:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1095:66:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5143,"nodeType":"ExpressionStatement","src":"1095:66:51"},{"expression":{"arguments":[{"id":5149,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"1215:5:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5150,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1222:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5144,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1171:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1190:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"1171:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1171:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1199:15:51","memberName":"setInitialPrice","nodeType":"MemberAccess","referencedDeclaration":5530,"src":"1171:43:51","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1171:60:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5152,"nodeType":"ExpressionStatement","src":"1171:60:51"}]},"documentation":{"id":5126,"nodeType":"StructuredDocumentation","src":"962:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"9f4ba0ee","id":5154,"implemented":true,"kind":"function","modifiers":[],"name":"setInitialPrice","nameLocation":"1004:15:51","nodeType":"FunctionDefinition","parameters":{"id":5129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5128,"mutability":"mutable","name":"price","nameLocation":"1028:5:51","nodeType":"VariableDeclaration","scope":5154,"src":"1020:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1020:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1019:15:51"},"returnParameters":{"id":5130,"nodeType":"ParameterList","parameters":[],"src":"1044:0:51"},"scope":5271,"src":"995:243:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5349],"body":{"id":5182,"nodeType":"Block","src":"1332:200:51","statements":[{"assignments":[5161],"declarations":[{"constant":false,"id":5161,"mutability":"mutable","name":"operator","nameLocation":"1350:8:51","nodeType":"VariableDeclaration","scope":5182,"src":"1342:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5160,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5164,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5162,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1361:10:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:12:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1342:31:51"},{"expression":{"arguments":[{"id":5170,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"1440:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5165,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1383:24:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1408:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1383:31:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:33:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1417:22:51","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1383:56:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:66:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5172,"nodeType":"ExpressionStatement","src":"1383:66:51"},{"expression":{"arguments":[{"id":5178,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5157,"src":"1505:9:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5179,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5161,"src":"1516:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5173,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1459:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"1459:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1459:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1487:17:51","memberName":"setSlopeNumerator","nodeType":"MemberAccess","referencedDeclaration":5561,"src":"1459:45:51","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1459:66:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5181,"nodeType":"ExpressionStatement","src":"1459:66:51"}]},"documentation":{"id":5155,"nodeType":"StructuredDocumentation","src":"1244:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"1de7223b","id":5183,"implemented":true,"kind":"function","modifiers":[],"name":"setSlopeNumerator","nameLocation":"1286:17:51","nodeType":"FunctionDefinition","parameters":{"id":5158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5157,"mutability":"mutable","name":"numerator","nameLocation":"1312:9:51","nodeType":"VariableDeclaration","scope":5183,"src":"1304:17:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1304:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1303:19:51"},"returnParameters":{"id":5159,"nodeType":"ParameterList","parameters":[],"src":"1332:0:51"},"scope":5271,"src":"1277:255:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5355],"body":{"id":5211,"nodeType":"Block","src":"1630:204:51","statements":[{"assignments":[5190],"declarations":[{"constant":false,"id":5190,"mutability":"mutable","name":"operator","nameLocation":"1648:8:51","nodeType":"VariableDeclaration","scope":5211,"src":"1640:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5189,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5193,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5191,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"1659:10:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1659:12:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1640:31:51"},{"expression":{"arguments":[{"id":5199,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"1738:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5194,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1681:24:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1706:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1681:31:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:33:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5198,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1715:22:51","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1681:56:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:66:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5201,"nodeType":"ExpressionStatement","src":"1681:66:51"},{"expression":{"arguments":[{"id":5207,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"1805:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5208,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"1818:8:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5202,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1757:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1776:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"1757:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1785:19:51","memberName":"setSlopeDenominator","nodeType":"MemberAccess","referencedDeclaration":5592,"src":"1757:47:51","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:70:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5210,"nodeType":"ExpressionStatement","src":"1757:70:51"}]},"documentation":{"id":5184,"nodeType":"StructuredDocumentation","src":"1538:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"d58ee471","id":5212,"implemented":true,"kind":"function","modifiers":[],"name":"setSlopeDenominator","nameLocation":"1580:19:51","nodeType":"FunctionDefinition","parameters":{"id":5187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5186,"mutability":"mutable","name":"denominator","nameLocation":"1608:11:51","nodeType":"VariableDeclaration","scope":5212,"src":"1600:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1600:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1599:21:51"},"returnParameters":{"id":5188,"nodeType":"ParameterList","parameters":[],"src":"1630:0:51"},"scope":5271,"src":"1571:263:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5315],"body":{"id":5230,"nodeType":"Block","src":"1966:87:51","statements":[{"expression":{"arguments":[{"id":5226,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"2026:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5227,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"2039:6:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5222,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1983:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2002:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"1983:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2011:14:51","memberName":"calculatePrice","nodeType":"MemberAccess","referencedDeclaration":5626,"src":"1983:42:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,uint256) view returns (uint256)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:63:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5221,"id":5229,"nodeType":"Return","src":"1976:70:51"}]},"documentation":{"id":5213,"nodeType":"StructuredDocumentation","src":"1840:22:51","text":"@inheritdoc ICurve"},"functionSelector":"a6413a27","id":5231,"implemented":true,"kind":"function","modifiers":[],"name":"calculatePrice","nameLocation":"1876:14:51","nodeType":"FunctionDefinition","parameters":{"id":5218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5215,"mutability":"mutable","name":"totalSupply","nameLocation":"1899:11:51","nodeType":"VariableDeclaration","scope":5231,"src":"1891:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1891:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5217,"mutability":"mutable","name":"amount","nameLocation":"1920:6:51","nodeType":"VariableDeclaration","scope":5231,"src":"1912:14:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1912:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1890:37:51"},"returnParameters":{"id":5221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5220,"mutability":"mutable","name":"price","nameLocation":"1959:5:51","nodeType":"VariableDeclaration","scope":5231,"src":"1951:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1951:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1950:15:51"},"scope":5271,"src":"1867:186:51","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5325],"body":{"id":5243,"nodeType":"Block","src":"2154:66:51","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5237,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"2171:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2190:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"2171:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2171:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2199:12:51","memberName":"initialPrice","nodeType":"MemberAccess","referencedDeclaration":5639,"src":"2171:40:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5388_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer) view returns (uint256)"}},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2171:42:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5236,"id":5242,"nodeType":"Return","src":"2164:49:51"}]},"documentation":{"id":5232,"nodeType":"StructuredDocumentation","src":"2059:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"1d0806ae","id":5244,"implemented":true,"kind":"function","modifiers":[],"name":"initialPrice","nameLocation":"2101:12:51","nodeType":"FunctionDefinition","parameters":{"id":5233,"nodeType":"ParameterList","parameters":[],"src":"2113:2:51"},"returnParameters":{"id":5236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5235,"mutability":"mutable","name":"price","nameLocation":"2147:5:51","nodeType":"VariableDeclaration","scope":5244,"src":"2139:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5234,"name":"uint256","nodeType":"ElementaryTypeName","src":"2139:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2138:15:51"},"scope":5271,"src":"2092:128:51","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5331],"body":{"id":5256,"nodeType":"Block","src":"2327:68:51","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5250,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"2344:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2363:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"2344:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2344:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2372:14:51","memberName":"slopeNumerator","nodeType":"MemberAccess","referencedDeclaration":5652,"src":"2344:42:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5388_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer) view returns (uint256)"}},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2344:44:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5249,"id":5255,"nodeType":"Return","src":"2337:51:51"}]},"documentation":{"id":5245,"nodeType":"StructuredDocumentation","src":"2226:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"21800fc3","id":5257,"implemented":true,"kind":"function","modifiers":[],"name":"slopeNumerator","nameLocation":"2268:14:51","nodeType":"FunctionDefinition","parameters":{"id":5246,"nodeType":"ParameterList","parameters":[],"src":"2282:2:51"},"returnParameters":{"id":5249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"numerator","nameLocation":"2316:9:51","nodeType":"VariableDeclaration","scope":5257,"src":"2308:17:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2307:19:51"},"scope":5271,"src":"2259:136:51","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5337],"body":{"id":5269,"nodeType":"Block","src":"2506:70:51","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5263,"name":"LinearCurveStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"2523:18:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearCurveStorage_$5678_$","typeString":"type(library LinearCurveStorage)"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2542:6:51","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"2523:25:51","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function () pure returns (struct LinearCurveStorage.Layout storage pointer)"}},"id":5265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:27:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2551:16:51","memberName":"slopeDenominator","nodeType":"MemberAccess","referencedDeclaration":5665,"src":"2523:44:51","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5388_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer) view returns (uint256)"}},"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:46:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5262,"id":5268,"nodeType":"Return","src":"2516:53:51"}]},"documentation":{"id":5258,"nodeType":"StructuredDocumentation","src":"2401:28:51","text":"@inheritdoc ILinearCurve"},"functionSelector":"65a3ea5f","id":5270,"implemented":true,"kind":"function","modifiers":[],"name":"slopeDenominator","nameLocation":"2443:16:51","nodeType":"FunctionDefinition","parameters":{"id":5259,"nodeType":"ParameterList","parameters":[],"src":"2459:2:51"},"returnParameters":{"id":5262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5261,"mutability":"mutable","name":"denominator","nameLocation":"2493:11:51","nodeType":"VariableDeclaration","scope":5270,"src":"2485:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5260,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2484:21:51"},"scope":5271,"src":"2434:142:51","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5272,"src":"756:1822:51","usedErrors":[259,5276,5279],"usedEvents":[5288,5295,5302]}],"src":"32:2547:51"},"id":51},"contracts/lib/curve/errors/LinearCurveErrors.sol":{"ast":{"absolutePath":"contracts/lib/curve/errors/LinearCurveErrors.sol","exportedSymbols":{"LinearCurveZeroDenominator":[5279],"LinearCurveZeroNumerator":[5276]},"id":5280,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5273,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:52"},{"documentation":{"id":5274,"nodeType":"StructuredDocumentation","src":"58:67:52","text":"@notice Thrown when the numerator of the linear curve is zero."},"errorSelector":"1ba57062","id":5276,"name":"LinearCurveZeroNumerator","nameLocation":"131:24:52","nodeType":"ErrorDefinition","parameters":{"id":5275,"nodeType":"ParameterList","parameters":[],"src":"155:2:52"},"src":"125:33:52"},{"documentation":{"id":5277,"nodeType":"StructuredDocumentation","src":"160:69:52","text":"@notice Thrown when the denominator of the linear curve is zero."},"errorSelector":"ed859e7c","id":5279,"name":"LinearCurveZeroDenominator","nameLocation":"235:26:52","nodeType":"ErrorDefinition","parameters":{"id":5278,"nodeType":"ParameterList","parameters":[],"src":"261:2:52"},"src":"229:35:52"}],"src":"32:233:52"},"id":52},"contracts/lib/curve/events/LinearCurveEvents.sol":{"ast":{"absolutePath":"contracts/lib/curve/events/LinearCurveEvents.sol","exportedSymbols":{"InitialPriceSet":[5288],"SlopeDenominatorSet":[5302],"SlopeNumeratorSet":[5295]},"id":5303,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5281,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:53"},{"anonymous":false,"documentation":{"id":5282,"nodeType":"StructuredDocumentation","src":"58:159:53","text":"@notice Emitted when the initial price of the curve is set.\n @param price The initial price.\n @param operator The address setting the initial price."},"eventSelector":"c9743acbde4009119d240bc9a916fb878829a363cf97bf446e3b6ae6a942bf2e","id":5288,"name":"InitialPriceSet","nameLocation":"223:15:53","nodeType":"EventDefinition","parameters":{"id":5287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5284,"indexed":true,"mutability":"mutable","name":"price","nameLocation":"255:5:53","nodeType":"VariableDeclaration","scope":5288,"src":"239:21:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5283,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5286,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"278:8:53","nodeType":"VariableDeclaration","scope":5288,"src":"262:24:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5285,"name":"address","nodeType":"ElementaryTypeName","src":"262:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"238:49:53"},"src":"217:71:53"},{"anonymous":false,"documentation":{"id":5289,"nodeType":"StructuredDocumentation","src":"290:169:53","text":"@notice Emitted when the slope numerator of the curve is set.\n @param numerator The slope numerator.\n @param operator The address setting the slope numerator."},"eventSelector":"57e9b94ca9a18b4ab6b4c06a7888ffbaf6d53a7902cea0c6084989d4b9155446","id":5295,"name":"SlopeNumeratorSet","nameLocation":"465:17:53","nodeType":"EventDefinition","parameters":{"id":5294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5291,"indexed":true,"mutability":"mutable","name":"numerator","nameLocation":"499:9:53","nodeType":"VariableDeclaration","scope":5295,"src":"483:25:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5290,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5293,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"526:8:53","nodeType":"VariableDeclaration","scope":5295,"src":"510:24:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5292,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"482:53:53"},"src":"459:77:53"},{"anonymous":false,"documentation":{"id":5296,"nodeType":"StructuredDocumentation","src":"538:177:53","text":"@notice Emitted when the slope denominator of the curve is set.\n @param denominator The slope denominator.\n @param operator The address setting the slope denominator."},"eventSelector":"af9c43ff06c74ca8197f8512b0129a3c1ab15740723f041fda4563e8332d7a0f","id":5302,"name":"SlopeDenominatorSet","nameLocation":"721:19:53","nodeType":"EventDefinition","parameters":{"id":5301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5298,"indexed":true,"mutability":"mutable","name":"denominator","nameLocation":"757:11:53","nodeType":"VariableDeclaration","scope":5302,"src":"741:27:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5297,"name":"uint256","nodeType":"ElementaryTypeName","src":"741:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5300,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"786:8:53","nodeType":"VariableDeclaration","scope":5302,"src":"770:24:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5299,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"740:55:53"},"src":"715:81:53"}],"src":"32:765:53"},"id":53},"contracts/lib/curve/interfaces/ICurve.sol":{"ast":{"absolutePath":"contracts/lib/curve/interfaces/ICurve.sol","exportedSymbols":{"ICurve":[5316]},"id":5317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5304,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:54"},{"abstract":false,"baseContracts":[],"canonicalName":"ICurve","contractDependencies":[],"contractKind":"interface","documentation":{"id":5305,"nodeType":"StructuredDocumentation","src":"58:207:54","text":"@title Curve interface for calculating the price of a token.\n @dev The curve is defined by the price function `calculatePrice`.\n @dev Note: The ERC-165 identifier for this interface is 0xa6413a27."},"fullyImplemented":false,"id":5316,"linearizedBaseContracts":[5316],"name":"ICurve","nameLocation":"275:6:54","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5306,"nodeType":"StructuredDocumentation","src":"288:284:54","text":"@notice Calculates the price of a token given the total supply and the amount to mint.\n @dev The price is calculated based on bonding curve mathematical function.\n @param totalSupply The total supply of the tokens.\n @param amount The amount of tokens to mint."},"functionSelector":"a6413a27","id":5315,"implemented":false,"kind":"function","modifiers":[],"name":"calculatePrice","nameLocation":"586:14:54","nodeType":"FunctionDefinition","parameters":{"id":5311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5308,"mutability":"mutable","name":"totalSupply","nameLocation":"609:11:54","nodeType":"VariableDeclaration","scope":5315,"src":"601:19:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5307,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5310,"mutability":"mutable","name":"amount","nameLocation":"630:6:54","nodeType":"VariableDeclaration","scope":5315,"src":"622:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5309,"name":"uint256","nodeType":"ElementaryTypeName","src":"622:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:37:54"},"returnParameters":{"id":5314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5313,"mutability":"mutable","name":"price","nameLocation":"669:5:54","nodeType":"VariableDeclaration","scope":5315,"src":"661:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5312,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"660:15:54"},"scope":5316,"src":"577:99:54","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5317,"src":"265:413:54","usedErrors":[],"usedEvents":[]}],"src":"32:647:54"},"id":54},"contracts/lib/curve/interfaces/ILinearCurve.sol":{"ast":{"absolutePath":"contracts/lib/curve/interfaces/ILinearCurve.sol","exportedSymbols":{"ILinearCurve":[5356]},"id":5357,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5318,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:55"},{"abstract":false,"baseContracts":[],"canonicalName":"ILinearCurve","contractDependencies":[],"contractKind":"interface","documentation":{"id":5319,"nodeType":"StructuredDocumentation","src":"58:236:55","text":"@title Linear Curve interface for calculating the price of a token.\n @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\n @dev Note: The ERC-165 identifier for this interface is 0x0e098596."},"fullyImplemented":false,"id":5356,"linearizedBaseContracts":[5356],"name":"ILinearCurve","nameLocation":"304:12:55","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5320,"nodeType":"StructuredDocumentation","src":"323:92:55","text":"@notice Returns the initial price of the curve.\n @return price The initial price."},"functionSelector":"1d0806ae","id":5325,"implemented":false,"kind":"function","modifiers":[],"name":"initialPrice","nameLocation":"429:12:55","nodeType":"FunctionDefinition","parameters":{"id":5321,"nodeType":"ParameterList","parameters":[],"src":"441:2:55"},"returnParameters":{"id":5324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5323,"mutability":"mutable","name":"price","nameLocation":"475:5:55","nodeType":"VariableDeclaration","scope":5325,"src":"467:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5322,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"466:15:55"},"scope":5356,"src":"420:62:55","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5326,"nodeType":"StructuredDocumentation","src":"488:100:55","text":"@notice Returns the slope numerator of the curve.\n @return numerator The slope numerator."},"functionSelector":"21800fc3","id":5331,"implemented":false,"kind":"function","modifiers":[],"name":"slopeNumerator","nameLocation":"602:14:55","nodeType":"FunctionDefinition","parameters":{"id":5327,"nodeType":"ParameterList","parameters":[],"src":"616:2:55"},"returnParameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5329,"mutability":"mutable","name":"numerator","nameLocation":"650:9:55","nodeType":"VariableDeclaration","scope":5331,"src":"642:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5328,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"641:19:55"},"scope":5356,"src":"593:68:55","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5332,"nodeType":"StructuredDocumentation","src":"667:106:55","text":"@notice Returns the slope denominator of the curve.\n @return denominator The slope denominator."},"functionSelector":"65a3ea5f","id":5337,"implemented":false,"kind":"function","modifiers":[],"name":"slopeDenominator","nameLocation":"787:16:55","nodeType":"FunctionDefinition","parameters":{"id":5333,"nodeType":"ParameterList","parameters":[],"src":"803:2:55"},"returnParameters":{"id":5336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5335,"mutability":"mutable","name":"denominator","nameLocation":"837:11:55","nodeType":"VariableDeclaration","scope":5337,"src":"829:19:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5334,"name":"uint256","nodeType":"ElementaryTypeName","src":"829:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"828:21:55"},"scope":5356,"src":"778:72:55","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5338,"nodeType":"StructuredDocumentation","src":"856:134:55","text":"@notice Sets the initial price of the curve.\n @dev Emits a {InitialPriceSet} event.\n @param price The initial price."},"functionSelector":"9f4ba0ee","id":5343,"implemented":false,"kind":"function","modifiers":[],"name":"setInitialPrice","nameLocation":"1004:15:55","nodeType":"FunctionDefinition","parameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5340,"mutability":"mutable","name":"price","nameLocation":"1028:5:55","nodeType":"VariableDeclaration","scope":5343,"src":"1020:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1020:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1019:15:55"},"returnParameters":{"id":5342,"nodeType":"ParameterList","parameters":[],"src":"1043:0:55"},"scope":5356,"src":"995:49:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5344,"nodeType":"StructuredDocumentation","src":"1050:189:55","text":"@notice Sets the slope numerator of the curve.\n @dev Reverts if `numerator` is zero.\n @dev Emits a {SlopeNumeratorSet} event.\n @param numerator The slope numerator."},"functionSelector":"1de7223b","id":5349,"implemented":false,"kind":"function","modifiers":[],"name":"setSlopeNumerator","nameLocation":"1253:17:55","nodeType":"FunctionDefinition","parameters":{"id":5347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5346,"mutability":"mutable","name":"numerator","nameLocation":"1279:9:55","nodeType":"VariableDeclaration","scope":5349,"src":"1271:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5345,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1270:19:55"},"returnParameters":{"id":5348,"nodeType":"ParameterList","parameters":[],"src":"1298:0:55"},"scope":5356,"src":"1244:55:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5350,"nodeType":"StructuredDocumentation","src":"1305:199:55","text":"@notice Sets the slope denominator of the curve.\n @dev Reverts if `denominator` is zero.\n @dev Emits a {SlopeDenominatorSet} event.\n @param denominator The slope denominator."},"functionSelector":"d58ee471","id":5355,"implemented":false,"kind":"function","modifiers":[],"name":"setSlopeDenominator","nameLocation":"1518:19:55","nodeType":"FunctionDefinition","parameters":{"id":5353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5352,"mutability":"mutable","name":"denominator","nameLocation":"1546:11:55","nodeType":"VariableDeclaration","scope":5355,"src":"1538:19:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5351,"name":"uint256","nodeType":"ElementaryTypeName","src":"1538:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1537:21:55"},"returnParameters":{"id":5354,"nodeType":"ParameterList","parameters":[],"src":"1567:0:55"},"scope":5356,"src":"1509:59:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5357,"src":"294:1276:55","usedErrors":[],"usedEvents":[]}],"src":"32:1539:55"},"id":55},"contracts/lib/curve/libraries/LinearCurveStorage.sol":{"ast":{"absolutePath":"contracts/lib/curve/libraries/LinearCurveStorage.sol","exportedSymbols":{"ICurve":[5316],"ILinearCurve":[5356],"InitialPriceSet":[5288],"InterfaceDetectionStorage":[1010],"LinearCurveStorage":[5678],"LinearCurveZeroDenominator":[5279],"LinearCurveZeroNumerator":[5276],"ProxyInitialization":[1066],"SlopeDenominatorSet":[5302],"SlopeNumeratorSet":[5295]},"id":5679,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5358,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:56"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","id":5360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":1011,"src":"58:134:56","symbolAliases":[{"foreign":{"id":5359,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"66:25:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","id":5362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":1067,"src":"193:114:56","symbolAliases":[{"foreign":{"id":5361,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"201:19:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/interfaces/ICurve.sol","file":"../interfaces/ICurve.sol","id":5364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":5317,"src":"308:48:56","symbolAliases":[{"foreign":{"id":5363,"name":"ICurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"316:6:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/interfaces/ILinearCurve.sol","file":"../interfaces/ILinearCurve.sol","id":5366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":5357,"src":"357:60:56","symbolAliases":[{"foreign":{"id":5365,"name":"ILinearCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"365:12:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/events/LinearCurveEvents.sol","file":"../events/LinearCurveEvents.sol","id":5370,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":5303,"src":"418:104:56","symbolAliases":[{"foreign":{"id":5367,"name":"InitialPriceSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"426:15:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5368,"name":"SlopeNumeratorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"443:17:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5369,"name":"SlopeDenominatorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"462:19:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/curve/errors/LinearCurveErrors.sol","file":"../errors/LinearCurveErrors.sol","id":5373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5679,"sourceUnit":5280,"src":"523:101:56","symbolAliases":[{"foreign":{"id":5371,"name":"LinearCurveZeroNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"531:24:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5372,"name":"LinearCurveZeroDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5279,"src":"557:26:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LinearCurveStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5678,"linearizedBaseContracts":[5678],"name":"LinearCurveStorage","nameLocation":"634:18:56","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5377,"libraryName":{"id":5374,"name":"LinearCurveStorage","nameLocations":["665:18:56"],"nodeType":"IdentifierPath","referencedDeclaration":5678,"src":"665:18:56"},"nodeType":"UsingForDirective","src":"659:55:56","typeName":{"id":5376,"nodeType":"UserDefinedTypeName","pathNode":{"id":5375,"name":"LinearCurveStorage.Layout","nameLocations":["688:18:56","707:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"688:25:56"},"referencedDeclaration":5388,"src":"688:25:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}}},{"global":false,"id":5381,"libraryName":{"id":5378,"name":"InterfaceDetectionStorage","nameLocations":["725:25:56"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"725:25:56"},"nodeType":"UsingForDirective","src":"719:69:56","typeName":{"id":5380,"nodeType":"UserDefinedTypeName","pathNode":{"id":5379,"name":"InterfaceDetectionStorage.Layout","nameLocations":["755:25:56","781:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"755:32:56"},"referencedDeclaration":920,"src":"755:32:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"LinearCurveStorage.Layout","id":5388,"members":[{"constant":false,"id":5383,"mutability":"mutable","name":"price","nameLocation":"826:5:56","nodeType":"VariableDeclaration","scope":5388,"src":"818:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5382,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5385,"mutability":"mutable","name":"numerator","nameLocation":"849:9:56","nodeType":"VariableDeclaration","scope":5388,"src":"841:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5384,"name":"uint256","nodeType":"ElementaryTypeName","src":"841:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5387,"mutability":"mutable","name":"denominator","nameLocation":"876:11:56","nodeType":"VariableDeclaration","scope":5388,"src":"868:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5386,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Layout","nameLocation":"801:6:56","nodeType":"StructDefinition","scope":5678,"src":"794:100:56","visibility":"public"},{"constant":true,"id":5401,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"926:19:56","nodeType":"VariableDeclaration","scope":5678,"src":"900:117:56","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5389,"name":"bytes32","nodeType":"ElementaryTypeName","src":"900:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"79757261323130302e63757276652e4c696e65617243757276652e73746f72616765","id":5395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"974:36:56","typeDescriptions":{"typeIdentifier":"t_stringliteral_039d70c9b3f52605681bdc7fbd50a477b2d981df84c34b96fc10bf20b415c738","typeString":"literal_string \"yura2100.curve.LinearCurve.storage\""},"value":"yura2100.curve.LinearCurve.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_039d70c9b3f52605681bdc7fbd50a477b2d981df84c34b96fc10bf20b415c738","typeString":"literal_string \"yura2100.curve.LinearCurve.storage\""}],"id":5394,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"964:9:56","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"964:47:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"956:7:56","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5392,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:56","typeDescriptions":{}}},"id":5397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"956:56:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1015:1:56","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"956:60:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"948:7:56","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"948:7:56","typeDescriptions":{}}},"id":5400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:69:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":5414,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1049:21:56","nodeType":"VariableDeclaration","scope":5678,"src":"1023:117:56","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1023:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"79757261323130302e63757276652e4c696e65617243757276652e7068617365","id":5408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1099:34:56","typeDescriptions":{"typeIdentifier":"t_stringliteral_930786d45e1bbb08036fea071eb522a769b4d1f517843fc112eb0f43e263ef46","typeString":"literal_string \"yura2100.curve.LinearCurve.phase\""},"value":"yura2100.curve.LinearCurve.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_930786d45e1bbb08036fea071eb522a769b4d1f517843fc112eb0f43e263ef46","typeString":"literal_string \"yura2100.curve.LinearCurve.phase\""}],"id":5407,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1089:9:56","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:45:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1081:7:56","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5405,"name":"uint256","nodeType":"ElementaryTypeName","src":"1081:7:56","typeDescriptions":{}}},"id":5410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1081:54:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:56","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1081:58:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1073:7:56","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1073:7:56","typeDescriptions":{}}},"id":5413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1073:67:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":5474,"nodeType":"Block","src":"2003:357:56","statements":[{"expression":{"arguments":[{"id":5432,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"2031:5:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5433,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2038:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5429,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"2013:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2015:15:56","memberName":"setInitialPrice","nodeType":"MemberAccess","referencedDeclaration":5530,"src":"2013:17:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2013:34:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5435,"nodeType":"ExpressionStatement","src":"2013:34:56"},{"expression":{"arguments":[{"id":5439,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"2077:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5440,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2088:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5436,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"2057:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2059:17:56","memberName":"setSlopeNumerator","nodeType":"MemberAccess","referencedDeclaration":5561,"src":"2057:19:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2057:40:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5442,"nodeType":"ExpressionStatement","src":"2057:40:56"},{"expression":{"arguments":[{"id":5446,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2129:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5447,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2142:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5443,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"2107:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2109:19:56","memberName":"setSlopeDenominator","nodeType":"MemberAccess","referencedDeclaration":5592,"src":"2107:21:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,address)"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2107:44:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5449,"nodeType":"ExpressionStatement","src":"2107:44:56"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":5456,"name":"ICurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"2223:6:56","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICurve_$5316_$","typeString":"type(contract ICurve)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ICurve_$5316_$","typeString":"type(contract ICurve)"}],"id":5455,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2218:4:56","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:12:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ICurve_$5316","typeString":"type(contract ICurve)"}},"id":5458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2231:11:56","memberName":"interfaceId","nodeType":"MemberAccess","src":"2218:24:56","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":5459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2244:4:56","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5450,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2161:25:56","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2187:6:56","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"2161:32:56","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:34:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":5454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2196:21:56","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"2161:56:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":5460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:88:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5461,"nodeType":"ExpressionStatement","src":"2161:88:56"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":5468,"name":"ILinearCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"2321:12:56","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILinearCurve_$5356_$","typeString":"type(contract ILinearCurve)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ILinearCurve_$5356_$","typeString":"type(contract ILinearCurve)"}],"id":5467,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2316:4:56","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:18:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ILinearCurve_$5356","typeString":"type(contract ILinearCurve)"}},"id":5470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2335:11:56","memberName":"interfaceId","nodeType":"MemberAccess","src":"2316:30:56","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":5471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2348:4:56","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5462,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2259:25:56","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2285:6:56","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"2259:32:56","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:34:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":5466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2294:21:56","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"2259:56:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:94:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5473,"nodeType":"ExpressionStatement","src":"2259:94:56"}]},"documentation":{"id":5415,"nodeType":"StructuredDocumentation","src":"1147:726:56","text":"@notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {InitialPriceSet}.\n @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n @param price The initial price.\n @param numerator The slope numerator.\n @param denominator The slope denominator.\n @param operator The address of the operator performing the initialization."},"id":5475,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1887:15:56","nodeType":"FunctionDefinition","parameters":{"id":5427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5418,"mutability":"mutable","name":"s","nameLocation":"1918:1:56","nodeType":"VariableDeclaration","scope":5475,"src":"1903:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5417,"nodeType":"UserDefinedTypeName","pathNode":{"id":5416,"name":"Layout","nameLocations":["1903:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"1903:6:56"},"referencedDeclaration":5388,"src":"1903:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5420,"mutability":"mutable","name":"price","nameLocation":"1929:5:56","nodeType":"VariableDeclaration","scope":5475,"src":"1921:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5419,"name":"uint256","nodeType":"ElementaryTypeName","src":"1921:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5422,"mutability":"mutable","name":"numerator","nameLocation":"1944:9:56","nodeType":"VariableDeclaration","scope":5475,"src":"1936:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1936:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5424,"mutability":"mutable","name":"denominator","nameLocation":"1963:11:56","nodeType":"VariableDeclaration","scope":5475,"src":"1955:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1955:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5426,"mutability":"mutable","name":"operator","nameLocation":"1984:8:56","nodeType":"VariableDeclaration","scope":5475,"src":"1976:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5425,"name":"address","nodeType":"ElementaryTypeName","src":"1976:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1902:91:56"},"returnParameters":{"id":5428,"nodeType":"ParameterList","parameters":[],"src":"2003:0:56"},"scope":5678,"src":"1878:482:56","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5506,"nodeType":"Block","src":"3296:139:56","statements":[{"expression":{"arguments":[{"id":5493,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5414,"src":"3335:21:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":5494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3358:1:56","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5490,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"3306:19:56","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1066_$","typeString":"type(library ProxyInitialization)"}},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3326:8:56","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1065,"src":"3306:28:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:54:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5496,"nodeType":"ExpressionStatement","src":"3306:54:56"},{"expression":{"arguments":[{"id":5500,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"3388:5:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5501,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"3395:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5502,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"3406:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5503,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5487,"src":"3419:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5497,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5479,"src":"3370:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3372:15:56","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":5475,"src":"3370:17:56","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5388_storage_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5388_storage_ptr_$","typeString":"function (struct LinearCurveStorage.Layout storage pointer,uint256,uint256,uint256,address)"}},"id":5504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3370:58:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5505,"nodeType":"ExpressionStatement","src":"3370:58:56"}]},"documentation":{"id":5476,"nodeType":"StructuredDocumentation","src":"2366:806:56","text":"@notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {InitialPriceSet}.\n @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\n @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\n @param price The initial price.\n @param numerator The slope numerator.\n @param denominator The slope denominator."},"id":5507,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"3186:9:56","nodeType":"FunctionDefinition","parameters":{"id":5488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5479,"mutability":"mutable","name":"s","nameLocation":"3211:1:56","nodeType":"VariableDeclaration","scope":5507,"src":"3196:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5478,"nodeType":"UserDefinedTypeName","pathNode":{"id":5477,"name":"Layout","nameLocations":["3196:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"3196:6:56"},"referencedDeclaration":5388,"src":"3196:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5481,"mutability":"mutable","name":"price","nameLocation":"3222:5:56","nodeType":"VariableDeclaration","scope":5507,"src":"3214:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5480,"name":"uint256","nodeType":"ElementaryTypeName","src":"3214:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5483,"mutability":"mutable","name":"numerator","nameLocation":"3237:9:56","nodeType":"VariableDeclaration","scope":5507,"src":"3229:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5482,"name":"uint256","nodeType":"ElementaryTypeName","src":"3229:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5485,"mutability":"mutable","name":"denominator","nameLocation":"3256:11:56","nodeType":"VariableDeclaration","scope":5507,"src":"3248:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5484,"name":"uint256","nodeType":"ElementaryTypeName","src":"3248:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5487,"mutability":"mutable","name":"operator","nameLocation":"3277:8:56","nodeType":"VariableDeclaration","scope":5507,"src":"3269:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5486,"name":"address","nodeType":"ElementaryTypeName","src":"3269:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3195:91:56"},"returnParameters":{"id":5489,"nodeType":"ParameterList","parameters":[],"src":"3296:0:56"},"scope":5678,"src":"3177:258:56","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5529,"nodeType":"Block","src":"3743:79:56","statements":[{"expression":{"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5518,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"3753:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3755:5:56","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":5383,"src":"3753:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5521,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5513,"src":"3763:5:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3753:15:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5523,"nodeType":"ExpressionStatement","src":"3753:15:56"},{"eventCall":{"arguments":[{"id":5525,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5513,"src":"3799:5:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5526,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"3806:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5524,"name":"InitialPriceSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"3783:15:56","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3783:32:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5528,"nodeType":"EmitStatement","src":"3778:37:56"}]},"documentation":{"id":5508,"nodeType":"StructuredDocumentation","src":"3441:212:56","text":"@notice Sets the initial price of the curve.\n @dev Emits a {InitialPriceSet} event.\n @param price The initial price.\n @param operator The address of the operator performing the operation."},"id":5530,"implemented":true,"kind":"function","modifiers":[],"name":"setInitialPrice","nameLocation":"3667:15:56","nodeType":"FunctionDefinition","parameters":{"id":5516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5511,"mutability":"mutable","name":"s","nameLocation":"3698:1:56","nodeType":"VariableDeclaration","scope":5530,"src":"3683:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5510,"nodeType":"UserDefinedTypeName","pathNode":{"id":5509,"name":"Layout","nameLocations":["3683:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"3683:6:56"},"referencedDeclaration":5388,"src":"3683:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5513,"mutability":"mutable","name":"price","nameLocation":"3709:5:56","nodeType":"VariableDeclaration","scope":5530,"src":"3701:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5512,"name":"uint256","nodeType":"ElementaryTypeName","src":"3701:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5515,"mutability":"mutable","name":"operator","nameLocation":"3724:8:56","nodeType":"VariableDeclaration","scope":5530,"src":"3716:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5514,"name":"address","nodeType":"ElementaryTypeName","src":"3716:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3682:51:56"},"returnParameters":{"id":5517,"nodeType":"ParameterList","parameters":[],"src":"3743:0:56"},"scope":5678,"src":"3658:164:56","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5560,"nodeType":"Block","src":"4223:181:56","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5541,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"4237:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4250:1:56","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4237:14:56","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5548,"nodeType":"IfStatement","src":"4233:78:56","trueBody":{"id":5547,"nodeType":"Block","src":"4253:58:56","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5544,"name":"LinearCurveZeroNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"4274:24:56","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4274:26:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5546,"nodeType":"RevertStatement","src":"4267:33:56"}]}},{"expression":{"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5549,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"4321:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5551,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4323:9:56","memberName":"numerator","nodeType":"MemberAccess","referencedDeclaration":5385,"src":"4321:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5552,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"4335:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4321:23:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5554,"nodeType":"ExpressionStatement","src":"4321:23:56"},{"eventCall":{"arguments":[{"id":5556,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"4377:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5557,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"4388:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5555,"name":"SlopeNumeratorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"4359:17:56","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:38:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5559,"nodeType":"EmitStatement","src":"4354:43:56"}]},"documentation":{"id":5531,"nodeType":"StructuredDocumentation","src":"3828:299:56","text":"@notice Sets the slope numerator of the curve.\n @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\n @dev Emits a {SlopeNumeratorSet} event.\n @param numerator The slope numerator.\n @param operator The address of the operator performing the operation."},"id":5561,"implemented":true,"kind":"function","modifiers":[],"name":"setSlopeNumerator","nameLocation":"4141:17:56","nodeType":"FunctionDefinition","parameters":{"id":5539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5534,"mutability":"mutable","name":"s","nameLocation":"4174:1:56","nodeType":"VariableDeclaration","scope":5561,"src":"4159:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5533,"nodeType":"UserDefinedTypeName","pathNode":{"id":5532,"name":"Layout","nameLocations":["4159:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"4159:6:56"},"referencedDeclaration":5388,"src":"4159:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5536,"mutability":"mutable","name":"numerator","nameLocation":"4185:9:56","nodeType":"VariableDeclaration","scope":5561,"src":"4177:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5535,"name":"uint256","nodeType":"ElementaryTypeName","src":"4177:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5538,"mutability":"mutable","name":"operator","nameLocation":"4204:8:56","nodeType":"VariableDeclaration","scope":5561,"src":"4196:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5537,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4158:55:56"},"returnParameters":{"id":5540,"nodeType":"ParameterList","parameters":[],"src":"4223:0:56"},"scope":5678,"src":"4132:272:56","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5591,"nodeType":"Block","src":"4821:193:56","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5572,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"4835:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4850:1:56","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4835:16:56","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5579,"nodeType":"IfStatement","src":"4831:82:56","trueBody":{"id":5578,"nodeType":"Block","src":"4853:60:56","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5575,"name":"LinearCurveZeroDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5279,"src":"4874:26:56","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4874:28:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5577,"nodeType":"RevertStatement","src":"4867:35:56"}]}},{"expression":{"id":5584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5580,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"4923:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4925:11:56","memberName":"denominator","nodeType":"MemberAccess","referencedDeclaration":5387,"src":"4923:13:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5583,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"4939:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4923:27:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5585,"nodeType":"ExpressionStatement","src":"4923:27:56"},{"eventCall":{"arguments":[{"id":5587,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"4985:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5588,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"4998:8:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5586,"name":"SlopeDenominatorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"4965:19:56","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4965:42:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5590,"nodeType":"EmitStatement","src":"4960:47:56"}]},"documentation":{"id":5562,"nodeType":"StructuredDocumentation","src":"4410:311:56","text":"@notice Sets the slope denominator of the curve.\n @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\n @dev Emits a {SlopeDenominatorSet} event.\n @param denominator The slope denominator.\n @param operator The address of the operator performing the operation."},"id":5592,"implemented":true,"kind":"function","modifiers":[],"name":"setSlopeDenominator","nameLocation":"4735:19:56","nodeType":"FunctionDefinition","parameters":{"id":5570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5565,"mutability":"mutable","name":"s","nameLocation":"4770:1:56","nodeType":"VariableDeclaration","scope":5592,"src":"4755:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5564,"nodeType":"UserDefinedTypeName","pathNode":{"id":5563,"name":"Layout","nameLocations":["4755:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"4755:6:56"},"referencedDeclaration":5388,"src":"4755:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5567,"mutability":"mutable","name":"denominator","nameLocation":"4781:11:56","nodeType":"VariableDeclaration","scope":5592,"src":"4773:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5566,"name":"uint256","nodeType":"ElementaryTypeName","src":"4773:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5569,"mutability":"mutable","name":"operator","nameLocation":"4802:8:56","nodeType":"VariableDeclaration","scope":5592,"src":"4794:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5568,"name":"address","nodeType":"ElementaryTypeName","src":"4794:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4754:57:56"},"returnParameters":{"id":5571,"nodeType":"ParameterList","parameters":[],"src":"4821:0:56"},"scope":5678,"src":"4726:288:56","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5625,"nodeType":"Block","src":"5379:129:56","statements":[{"assignments":[5606],"declarations":[{"constant":false,"id":5606,"mutability":"mutable","name":"newSupply","nameLocation":"5397:9:56","nodeType":"VariableDeclaration","scope":5625,"src":"5389:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5605,"name":"uint256","nodeType":"ElementaryTypeName","src":"5389:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5612,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5607,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"5409:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5608,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"5423:6:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5409:20:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5432:1:56","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5409:24:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5389:44:56"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5613,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"5450:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5452:5:56","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":5383,"src":"5450:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5615,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5606,"src":"5461:9:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":5616,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"5473:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5617,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5475:9:56","memberName":"numerator","nodeType":"MemberAccess","referencedDeclaration":5385,"src":"5473:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5461:23:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5460:25:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"expression":{"id":5620,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"5488:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5621,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5490:11:56","memberName":"denominator","nodeType":"MemberAccess","referencedDeclaration":5387,"src":"5488:13:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5460:41:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5450:51:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5604,"id":5624,"nodeType":"Return","src":"5443:58:56"}]},"documentation":{"id":5593,"nodeType":"StructuredDocumentation","src":"5020:237:56","text":"@notice Calculates the price of a token given the total supply and the amount to mint.\n @param totalSupply The total supply of the tokens.\n @param amount The amount to mint.\n @return price The price of the token."},"id":5626,"implemented":true,"kind":"function","modifiers":[],"name":"calculatePrice","nameLocation":"5271:14:56","nodeType":"FunctionDefinition","parameters":{"id":5601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5596,"mutability":"mutable","name":"s","nameLocation":"5301:1:56","nodeType":"VariableDeclaration","scope":5626,"src":"5286:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5595,"nodeType":"UserDefinedTypeName","pathNode":{"id":5594,"name":"Layout","nameLocations":["5286:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"5286:6:56"},"referencedDeclaration":5388,"src":"5286:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5598,"mutability":"mutable","name":"totalSupply","nameLocation":"5312:11:56","nodeType":"VariableDeclaration","scope":5626,"src":"5304:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"5304:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5600,"mutability":"mutable","name":"amount","nameLocation":"5333:6:56","nodeType":"VariableDeclaration","scope":5626,"src":"5325:14:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5599,"name":"uint256","nodeType":"ElementaryTypeName","src":"5325:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5285:55:56"},"returnParameters":{"id":5604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5603,"mutability":"mutable","name":"price","nameLocation":"5372:5:56","nodeType":"VariableDeclaration","scope":5626,"src":"5364:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5602,"name":"uint256","nodeType":"ElementaryTypeName","src":"5364:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5363:15:56"},"scope":5678,"src":"5262:246:56","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5638,"nodeType":"Block","src":"5689:31:56","statements":[{"expression":{"expression":{"id":5635,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"5706:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5708:5:56","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":5383,"src":"5706:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5634,"id":5637,"nodeType":"Return","src":"5699:14:56"}]},"documentation":{"id":5627,"nodeType":"StructuredDocumentation","src":"5514:92:56","text":"@notice Returns the initial price of the curve.\n @return price The initial price."},"id":5639,"implemented":true,"kind":"function","modifiers":[],"name":"initialPrice","nameLocation":"5620:12:56","nodeType":"FunctionDefinition","parameters":{"id":5631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5630,"mutability":"mutable","name":"s","nameLocation":"5648:1:56","nodeType":"VariableDeclaration","scope":5639,"src":"5633:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5629,"nodeType":"UserDefinedTypeName","pathNode":{"id":5628,"name":"Layout","nameLocations":["5633:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"5633:6:56"},"referencedDeclaration":5388,"src":"5633:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"}],"src":"5632:18:56"},"returnParameters":{"id":5634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5633,"mutability":"mutable","name":"price","nameLocation":"5682:5:56","nodeType":"VariableDeclaration","scope":5639,"src":"5674:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5632,"name":"uint256","nodeType":"ElementaryTypeName","src":"5674:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5673:15:56"},"scope":5678,"src":"5611:109:56","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5651,"nodeType":"Block","src":"5915:35:56","statements":[{"expression":{"expression":{"id":5648,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"5932:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5934:9:56","memberName":"numerator","nodeType":"MemberAccess","referencedDeclaration":5385,"src":"5932:11:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5647,"id":5650,"nodeType":"Return","src":"5925:18:56"}]},"documentation":{"id":5640,"nodeType":"StructuredDocumentation","src":"5726:100:56","text":"@notice Returns the slope numerator of the curve.\n @return numerator The slope numerator."},"id":5652,"implemented":true,"kind":"function","modifiers":[],"name":"slopeNumerator","nameLocation":"5840:14:56","nodeType":"FunctionDefinition","parameters":{"id":5644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"s","nameLocation":"5870:1:56","nodeType":"VariableDeclaration","scope":5652,"src":"5855:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5642,"nodeType":"UserDefinedTypeName","pathNode":{"id":5641,"name":"Layout","nameLocations":["5855:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"5855:6:56"},"referencedDeclaration":5388,"src":"5855:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"}],"src":"5854:18:56"},"returnParameters":{"id":5647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5646,"mutability":"mutable","name":"numerator","nameLocation":"5904:9:56","nodeType":"VariableDeclaration","scope":5652,"src":"5896:17:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5645,"name":"uint256","nodeType":"ElementaryTypeName","src":"5896:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5895:19:56"},"scope":5678,"src":"5831:119:56","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5664,"nodeType":"Block","src":"6155:37:56","statements":[{"expression":{"expression":{"id":5661,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5656,"src":"6172:1:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout storage pointer"}},"id":5662,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6174:11:56","memberName":"denominator","nodeType":"MemberAccess","referencedDeclaration":5387,"src":"6172:13:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5660,"id":5663,"nodeType":"Return","src":"6165:20:56"}]},"documentation":{"id":5653,"nodeType":"StructuredDocumentation","src":"5956:106:56","text":"@notice Returns the slope denominator of the curve.\n @return denominator The slope denominator."},"id":5665,"implemented":true,"kind":"function","modifiers":[],"name":"slopeDenominator","nameLocation":"6076:16:56","nodeType":"FunctionDefinition","parameters":{"id":5657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5656,"mutability":"mutable","name":"s","nameLocation":"6108:1:56","nodeType":"VariableDeclaration","scope":5665,"src":"6093:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5655,"nodeType":"UserDefinedTypeName","pathNode":{"id":5654,"name":"Layout","nameLocations":["6093:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"6093:6:56"},"referencedDeclaration":5388,"src":"6093:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"}],"src":"6092:18:56"},"returnParameters":{"id":5660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5659,"mutability":"mutable","name":"denominator","nameLocation":"6142:11:56","nodeType":"VariableDeclaration","scope":5665,"src":"6134:19:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5658,"name":"uint256","nodeType":"ElementaryTypeName","src":"6134:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6133:21:56"},"scope":5678,"src":"6067:125:56","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5676,"nodeType":"Block","src":"6257:115:56","statements":[{"assignments":[5672],"declarations":[{"constant":false,"id":5672,"mutability":"mutable","name":"position","nameLocation":"6275:8:56","nodeType":"VariableDeclaration","scope":5676,"src":"6267:16:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6267:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5674,"initialValue":{"id":5673,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5401,"src":"6286:19:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6267:38:56"},{"AST":{"nativeSrc":"6324:42:56","nodeType":"YulBlock","src":"6324:42:56","statements":[{"nativeSrc":"6338:18:56","nodeType":"YulAssignment","src":"6338:18:56","value":{"name":"position","nativeSrc":"6348:8:56","nodeType":"YulIdentifier","src":"6348:8:56"},"variableNames":[{"name":"s.slot","nativeSrc":"6338:6:56","nodeType":"YulIdentifier","src":"6338:6:56"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5672,"isOffset":false,"isSlot":false,"src":"6348:8:56","valueSize":1},{"declaration":5669,"isOffset":false,"isSlot":true,"src":"6338:6:56","suffix":"slot","valueSize":1}],"id":5675,"nodeType":"InlineAssembly","src":"6315:51:56"}]},"id":5677,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"6207:6:56","nodeType":"FunctionDefinition","parameters":{"id":5666,"nodeType":"ParameterList","parameters":[],"src":"6213:2:56"},"returnParameters":{"id":5670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5669,"mutability":"mutable","name":"s","nameLocation":"6254:1:56","nodeType":"VariableDeclaration","scope":5677,"src":"6239:16:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"},"typeName":{"id":5668,"nodeType":"UserDefinedTypeName","pathNode":{"id":5667,"name":"Layout","nameLocations":["6239:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":5388,"src":"6239:6:56"},"referencedDeclaration":5388,"src":"6239:6:56","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5388_storage_ptr","typeString":"struct LinearCurveStorage.Layout"}},"visibility":"internal"}],"src":"6238:18:56"},"scope":5678,"src":"6198:174:56","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5679,"src":"626:5748:56","usedErrors":[],"usedEvents":[]}],"src":"32:6343:56"},"id":56},"contracts/lib/minter/ERC721/ERC721Minter.sol":{"ast":{"absolutePath":"contracts/lib/minter/ERC721/ERC721Minter.sol","exportedSymbols":{"ERC721Minter":[5717],"ERC721MinterBase":[5772],"ERC721MinterStorage":[6057],"IERC721Mintable":[1861],"InterfaceDetection":[892]},"id":5718,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5680,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:57"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","id":5682,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5718,"sourceUnit":893,"src":"58:110:57","symbolAliases":[{"foreign":{"id":5681,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"66:18:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","id":5684,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5718,"sourceUnit":1862,"src":"169:114:57","symbolAliases":[{"foreign":{"id":5683,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"177:15:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol","file":"./base/ERC721MinterBase.sol","id":5686,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5718,"sourceUnit":5773,"src":"284:61:57","symbolAliases":[{"foreign":{"id":5685,"name":"ERC721MinterBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5772,"src":"292:16:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol","file":"./libraries/ERC721MinterStorage.sol","id":5688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5718,"sourceUnit":6058,"src":"346:72:57","symbolAliases":[{"foreign":{"id":5687,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"354:19:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5690,"name":"ERC721MinterBase","nameLocations":["509:16:57"],"nodeType":"IdentifierPath","referencedDeclaration":5772,"src":"509:16:57"},"id":5691,"nodeType":"InheritanceSpecifier","src":"509:16:57"},{"baseName":{"id":5692,"name":"InterfaceDetection","nameLocations":["527:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"527:18:57"},"id":5693,"nodeType":"InheritanceSpecifier","src":"527:18:57"}],"canonicalName":"ERC721Minter","contractDependencies":[],"contractKind":"contract","documentation":{"id":5689,"nodeType":"StructuredDocumentation","src":"420:55:57","text":"@title ERC721 Minter contract (immutable version)."},"fullyImplemented":true,"id":5717,"linearizedBaseContracts":[5717,892,909,5772,5810],"name":"ERC721Minter","nameLocation":"493:12:57","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5697,"libraryName":{"id":5694,"name":"ERC721MinterStorage","nameLocations":["558:19:57"],"nodeType":"IdentifierPath","referencedDeclaration":6057,"src":"558:19:57"},"nodeType":"UsingForDirective","src":"552:57:57","typeName":{"id":5696,"nodeType":"UserDefinedTypeName","pathNode":{"id":5695,"name":"ERC721MinterStorage.Layout","nameLocations":["582:19:57","602:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"582:26:57"},"referencedDeclaration":5843,"src":"582:26:57","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}}},{"body":{"id":5715,"nodeType":"Block","src":"1186:80:57","statements":[{"expression":{"arguments":[{"id":5711,"name":"maxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5700,"src":"1241:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5712,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"1253:5:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5706,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"1196:19:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721MinterStorage_$6057_$","typeString":"type(library ERC721MinterStorage)"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1216:6:57","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":6056,"src":"1196:26:57","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function () pure returns (struct ERC721MinterStorage.Layout storage pointer)"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1196:28:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1225:15:57","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":5950,"src":"1196:44:57","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5843_storage_ptr_$_t_uint256_$_t_contract$_IERC721Mintable_$1861_$returns$__$attached_to$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function (struct ERC721MinterStorage.Layout storage pointer,uint256,contract IERC721Mintable)"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1196:63:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5714,"nodeType":"ExpressionStatement","src":"1196:63:57"}]},"documentation":{"id":5698,"nodeType":"StructuredDocumentation","src":"615:511:57","text":"@notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\n @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\n @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\n @param maxTokenId The maximum token ID that can be minted.\n @param token The ERC721 token contract."},"id":5716,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5700,"mutability":"mutable","name":"maxTokenId","nameLocation":"1151:10:57","nodeType":"VariableDeclaration","scope":5716,"src":"1143:18:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5699,"name":"uint256","nodeType":"ElementaryTypeName","src":"1143:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5703,"mutability":"mutable","name":"token","nameLocation":"1179:5:57","nodeType":"VariableDeclaration","scope":5716,"src":"1163:21:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"},"typeName":{"id":5702,"nodeType":"UserDefinedTypeName","pathNode":{"id":5701,"name":"IERC721Mintable","nameLocations":["1163:15:57"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"1163:15:57"},"referencedDeclaration":1861,"src":"1163:15:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"visibility":"internal"}],"src":"1142:43:57"},"returnParameters":{"id":5705,"nodeType":"ParameterList","parameters":[],"src":"1186:0:57"},"scope":5717,"src":"1131:135:57","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5718,"src":"475:793:57","usedErrors":[897,5777,5780,5785,5788],"usedEvents":[]}],"src":"32:1237:57"},"id":57},"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol":{"ast":{"absolutePath":"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol","exportedSymbols":{"ERC721MinterBase":[5772],"ERC721MinterStorage":[6057],"IERC721Minter":[5810]},"id":5773,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5719,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:58"},{"absolutePath":"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol","file":"../interfaces/IERC721Minter.sol","id":5721,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5773,"sourceUnit":5811,"src":"58:62:58","symbolAliases":[{"foreign":{"id":5720,"name":"IERC721Minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"66:13:58","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol","file":"../libraries/ERC721MinterStorage.sol","id":5723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5773,"sourceUnit":6058,"src":"121:73:58","symbolAliases":[{"foreign":{"id":5722,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"129:19:58","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5725,"name":"IERC721Minter","nameLocations":["484:13:58"],"nodeType":"IdentifierPath","referencedDeclaration":5810,"src":"484:13:58"},"id":5726,"nodeType":"InheritanceSpecifier","src":"484:13:58"}],"canonicalName":"ERC721MinterBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":5724,"nodeType":"StructuredDocumentation","src":"196:250:58","text":"@title ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":5772,"linearizedBaseContracts":[5772,5810],"name":"ERC721MinterBase","nameLocation":"464:16:58","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5730,"libraryName":{"id":5727,"name":"ERC721MinterStorage","nameLocations":["510:19:58"],"nodeType":"IdentifierPath","referencedDeclaration":6057,"src":"510:19:58"},"nodeType":"UsingForDirective","src":"504:57:58","typeName":{"id":5729,"nodeType":"UserDefinedTypeName","pathNode":{"id":5728,"name":"ERC721MinterStorage.Layout","nameLocations":["534:19:58","554:6:58"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"534:26:58"},"referencedDeclaration":5843,"src":"534:26:58","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}}},{"baseFunctions":[5809],"body":{"id":5744,"nodeType":"Block","src":"642:54:58","statements":[{"expression":{"arguments":[{"id":5741,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"686:2:58","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5736,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"652:19:58","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721MinterStorage_$6057_$","typeString":"type(library ERC721MinterStorage)"}},"id":5738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"672:6:58","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":6056,"src":"652:26:58","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function () pure returns (struct ERC721MinterStorage.Layout storage pointer)"}},"id":5739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:28:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"681:4:58","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":6018,"src":"652:33:58","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5843_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function (struct ERC721MinterStorage.Layout storage pointer,address)"}},"id":5742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:37:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5743,"nodeType":"ExpressionStatement","src":"652:37:58"}]},"documentation":{"id":5731,"nodeType":"StructuredDocumentation","src":"567:29:58","text":"@inheritdoc IERC721Minter"},"functionSelector":"6a627842","id":5745,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"610:4:58","nodeType":"FunctionDefinition","parameters":{"id":5734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5733,"mutability":"mutable","name":"to","nameLocation":"623:2:58","nodeType":"VariableDeclaration","scope":5745,"src":"615:10:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5732,"name":"address","nodeType":"ElementaryTypeName","src":"615:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"614:12:58"},"returnParameters":{"id":5735,"nodeType":"ParameterList","parameters":[],"src":"642:0:58"},"scope":5772,"src":"601:95:58","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[5797],"body":{"id":5757,"nodeType":"Block","src":"800:64:58","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5751,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"817:19:58","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721MinterStorage_$6057_$","typeString":"type(library ERC721MinterStorage)"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"837:6:58","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":6056,"src":"817:26:58","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function () pure returns (struct ERC721MinterStorage.Layout storage pointer)"}},"id":5753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:28:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"846:9:58","memberName":"currentId","nodeType":"MemberAccess","referencedDeclaration":6031,"src":"817:38:58","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5843_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function (struct ERC721MinterStorage.Layout storage pointer) view returns (uint256)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:40:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5750,"id":5756,"nodeType":"Return","src":"810:47:58"}]},"documentation":{"id":5746,"nodeType":"StructuredDocumentation","src":"702:29:58","text":"@inheritdoc IERC721Minter"},"functionSelector":"009a9b7b","id":5758,"implemented":true,"kind":"function","modifiers":[],"name":"currentTokenId","nameLocation":"745:14:58","nodeType":"FunctionDefinition","parameters":{"id":5747,"nodeType":"ParameterList","parameters":[],"src":"759:2:58"},"returnParameters":{"id":5750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5749,"mutability":"mutable","name":"tokenId","nameLocation":"791:7:58","nodeType":"VariableDeclaration","scope":5758,"src":"783:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5748,"name":"uint256","nodeType":"ElementaryTypeName","src":"783:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"782:17:58"},"scope":5772,"src":"736:128:58","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[5803],"body":{"id":5770,"nodeType":"Block","src":"964:60:58","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5764,"name":"ERC721MinterStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"981:19:58","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721MinterStorage_$6057_$","typeString":"type(library ERC721MinterStorage)"}},"id":5765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1001:6:58","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":6056,"src":"981:26:58","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function () pure returns (struct ERC721MinterStorage.Layout storage pointer)"}},"id":5766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"981:28:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5767,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1010:5:58","memberName":"maxId","nodeType":"MemberAccess","referencedDeclaration":6044,"src":"981:34:58","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$5843_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function (struct ERC721MinterStorage.Layout storage pointer) view returns (uint256)"}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"981:36:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5763,"id":5769,"nodeType":"Return","src":"974:43:58"}]},"documentation":{"id":5759,"nodeType":"StructuredDocumentation","src":"870:29:58","text":"@inheritdoc IERC721Minter"},"functionSelector":"91ba317a","id":5771,"implemented":true,"kind":"function","modifiers":[],"name":"maxTokenId","nameLocation":"913:10:58","nodeType":"FunctionDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[],"src":"923:2:58"},"returnParameters":{"id":5763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5762,"mutability":"mutable","name":"tokenId","nameLocation":"955:7:58","nodeType":"VariableDeclaration","scope":5771,"src":"947:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5761,"name":"uint256","nodeType":"ElementaryTypeName","src":"947:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"946:17:58"},"scope":5772,"src":"904:120:58","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5773,"src":"446:580:58","usedErrors":[5788],"usedEvents":[]}],"src":"32:995:58"},"id":58},"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol":{"ast":{"absolutePath":"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol","exportedSymbols":{"ERC721MinterMaxTokenIdExceeded":[5788],"ERC721MinterUnsupportedContractType":[5785],"ERC721MinterZeroMaxTokenId":[5777],"ERC721MinterZeroTokenAddress":[5780]},"id":5789,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5774,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:59"},{"documentation":{"id":5775,"nodeType":"StructuredDocumentation","src":"58:46:59","text":"@notice Thrown when the token ID is zero."},"errorSelector":"c14cb6f5","id":5777,"name":"ERC721MinterZeroMaxTokenId","nameLocation":"110:26:59","nodeType":"ErrorDefinition","parameters":{"id":5776,"nodeType":"ParameterList","parameters":[],"src":"136:2:59"},"src":"104:35:59"},{"documentation":{"id":5778,"nodeType":"StructuredDocumentation","src":"141:51:59","text":"@notice Thrown when the token address is zero."},"errorSelector":"9e7ef708","id":5780,"name":"ERC721MinterZeroTokenAddress","nameLocation":"198:28:59","nodeType":"ErrorDefinition","parameters":{"id":5779,"nodeType":"ParameterList","parameters":[],"src":"226:2:59"},"src":"192:37:59"},{"documentation":{"id":5781,"nodeType":"StructuredDocumentation","src":"231:76:59","text":"@notice Thrown when the token contract interface id does not supported."},"errorSelector":"dbca5b38","id":5785,"name":"ERC721MinterUnsupportedContractType","nameLocation":"313:35:59","nodeType":"ErrorDefinition","parameters":{"id":5784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5783,"mutability":"mutable","name":"tokenContract","nameLocation":"357:13:59","nodeType":"VariableDeclaration","scope":5785,"src":"349:21:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5782,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:59","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:23:59"},"src":"307:65:59"},{"documentation":{"id":5786,"nodeType":"StructuredDocumentation","src":"374:58:59","text":"@notice Thrown when the maximum token ID is exceeded."},"errorSelector":"4594a700","id":5788,"name":"ERC721MinterMaxTokenIdExceeded","nameLocation":"438:30:59","nodeType":"ErrorDefinition","parameters":{"id":5787,"nodeType":"ParameterList","parameters":[],"src":"468:2:59"},"src":"432:39:59"}],"src":"32:440:59"},"id":59},"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol":{"ast":{"absolutePath":"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol","exportedSymbols":{"IERC721Minter":[5810]},"id":5811,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5790,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:60"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Minter","contractDependencies":[],"contractKind":"interface","documentation":{"id":5791,"nodeType":"StructuredDocumentation","src":"58:134:60","text":"@title ERC721 Minter interface for minting ERC721 tokens.\n @dev Note: The ERC-165 identifier for this interface is 0x4f859546."},"fullyImplemented":false,"id":5810,"linearizedBaseContracts":[5810],"name":"IERC721Minter","nameLocation":"202:13:60","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5792,"nodeType":"StructuredDocumentation","src":"222:87:60","text":"@notice Returns the current token ID.\n @return tokenId The current token ID."},"functionSelector":"009a9b7b","id":5797,"implemented":false,"kind":"function","modifiers":[],"name":"currentTokenId","nameLocation":"323:14:60","nodeType":"FunctionDefinition","parameters":{"id":5793,"nodeType":"ParameterList","parameters":[],"src":"337:2:60"},"returnParameters":{"id":5796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5795,"mutability":"mutable","name":"tokenId","nameLocation":"371:7:60","nodeType":"VariableDeclaration","scope":5797,"src":"363:15:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5794,"name":"uint256","nodeType":"ElementaryTypeName","src":"363:7:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"362:17:60"},"scope":5810,"src":"314:66:60","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5798,"nodeType":"StructuredDocumentation","src":"386:87:60","text":"@notice Returns the maximum token ID.\n @return tokenId The maximum token ID."},"functionSelector":"91ba317a","id":5803,"implemented":false,"kind":"function","modifiers":[],"name":"maxTokenId","nameLocation":"487:10:60","nodeType":"FunctionDefinition","parameters":{"id":5799,"nodeType":"ParameterList","parameters":[],"src":"497:2:60"},"returnParameters":{"id":5802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5801,"mutability":"mutable","name":"tokenId","nameLocation":"531:7:60","nodeType":"VariableDeclaration","scope":5803,"src":"523:15:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5800,"name":"uint256","nodeType":"ElementaryTypeName","src":"523:7:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:17:60"},"scope":5810,"src":"478:62:60","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5804,"nodeType":"StructuredDocumentation","src":"546:103:60","text":"@notice Mints a token to the specified address.\n @param to The address to receive the token."},"functionSelector":"6a627842","id":5809,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"663:4:60","nodeType":"FunctionDefinition","parameters":{"id":5807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5806,"mutability":"mutable","name":"to","nameLocation":"676:2:60","nodeType":"VariableDeclaration","scope":5809,"src":"668:10:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5805,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"667:12:60"},"returnParameters":{"id":5808,"nodeType":"ParameterList","parameters":[],"src":"688:0:60"},"scope":5810,"src":"654:35:60","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5811,"src":"192:499:60","usedErrors":[],"usedEvents":[]}],"src":"32:660:60"},"id":60},"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol":{"ast":{"absolutePath":"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol","exportedSymbols":{"ERC721MinterMaxTokenIdExceeded":[5788],"ERC721MinterStorage":[6057],"ERC721MinterUnsupportedContractType":[5785],"ERC721MinterZeroMaxTokenId":[5777],"ERC721MinterZeroTokenAddress":[5780],"IERC165":[909],"IERC721Mintable":[1861],"IERC721Minter":[5810],"InterfaceDetectionStorage":[1010],"ProxyInitialization":[1066]},"id":6058,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5812,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:61"},{"absolutePath":"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol","file":"../errors/ERC721MinterErrors.sol","id":5817,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":5789,"src":"103:175:61","symbolAliases":[{"foreign":{"id":5813,"name":"ERC721MinterZeroMaxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"111:26:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5814,"name":"ERC721MinterUnsupportedContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5785,"src":"139:35:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5815,"name":"ERC721MinterMaxTokenIdExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"176:30:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5816,"name":"ERC721MinterZeroTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"208:28:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","id":5819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":1011,"src":"279:134:61","symbolAliases":[{"foreign":{"id":5818,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"287:25:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","id":5821,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":910,"src":"414:99:61","symbolAliases":[{"foreign":{"id":5820,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"422:7:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","id":5823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":1862,"src":"514:114:61","symbolAliases":[{"foreign":{"id":5822,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"522:15:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","id":5825,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":1067,"src":"629:114:61","symbolAliases":[{"foreign":{"id":5824,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"637:19:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol","file":"../interfaces/IERC721Minter.sol","id":5827,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6058,"sourceUnit":5811,"src":"744:62:61","symbolAliases":[{"foreign":{"id":5826,"name":"IERC721Minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"752:13:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721MinterStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":6057,"linearizedBaseContracts":[6057],"name":"ERC721MinterStorage","nameLocation":"816:19:61","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5831,"libraryName":{"id":5828,"name":"ERC721MinterStorage","nameLocations":["848:19:61"],"nodeType":"IdentifierPath","referencedDeclaration":6057,"src":"848:19:61"},"nodeType":"UsingForDirective","src":"842:57:61","typeName":{"id":5830,"nodeType":"UserDefinedTypeName","pathNode":{"id":5829,"name":"ERC721MinterStorage.Layout","nameLocations":["872:19:61","892:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"872:26:61"},"referencedDeclaration":5843,"src":"872:26:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}}},{"global":false,"id":5835,"libraryName":{"id":5832,"name":"InterfaceDetectionStorage","nameLocations":["910:25:61"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"910:25:61"},"nodeType":"UsingForDirective","src":"904:69:61","typeName":{"id":5834,"nodeType":"UserDefinedTypeName","pathNode":{"id":5833,"name":"InterfaceDetectionStorage.Layout","nameLocations":["940:25:61","966:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"940:32:61"},"referencedDeclaration":920,"src":"940:32:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC721MinterStorage.Layout","id":5843,"members":[{"constant":false,"id":5837,"mutability":"mutable","name":"currentTokenId","nameLocation":"1011:14:61","nodeType":"VariableDeclaration","scope":5843,"src":"1003:22:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5836,"name":"uint256","nodeType":"ElementaryTypeName","src":"1003:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5839,"mutability":"mutable","name":"maxTokenId","nameLocation":"1043:10:61","nodeType":"VariableDeclaration","scope":5843,"src":"1035:18:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1035:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5842,"mutability":"mutable","name":"token","nameLocation":"1079:5:61","nodeType":"VariableDeclaration","scope":5843,"src":"1063:21:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"},"typeName":{"id":5841,"nodeType":"UserDefinedTypeName","pathNode":{"id":5840,"name":"IERC721Mintable","nameLocations":["1063:15:61"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"1063:15:61"},"referencedDeclaration":1861,"src":"1063:15:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"visibility":"internal"}],"name":"Layout","nameLocation":"986:6:61","nodeType":"StructDefinition","scope":6057,"src":"979:112:61","visibility":"public"},{"constant":true,"id":5856,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1123:19:61","nodeType":"VariableDeclaration","scope":6057,"src":"1097:125:61","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1097:7:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"79757261323130302e746f6b656e2e4552433732312e4552433732314d696e7465722e73746f72616765","id":5850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1171:44:61","typeDescriptions":{"typeIdentifier":"t_stringliteral_693bcdae20ebbf8c20ad73778252483eb64f50287e6e826c8678109643b49176","typeString":"literal_string \"yura2100.token.ERC721.ERC721Minter.storage\""},"value":"yura2100.token.ERC721.ERC721Minter.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_693bcdae20ebbf8c20ad73778252483eb64f50287e6e826c8678109643b49176","typeString":"literal_string \"yura2100.token.ERC721.ERC721Minter.storage\""}],"id":5849,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1161:9:61","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1161:55:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1153:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1153:7:61","typeDescriptions":{}}},"id":5852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1153:64:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1220:1:61","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1153:68:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1145:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1145:7:61","typeDescriptions":{}}},"id":5855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:77:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":5869,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1254:21:61","nodeType":"VariableDeclaration","scope":6057,"src":"1228:125:61","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1228:7:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"79757261323130302e746f6b656e2e4552433732312e4552433732314d696e7465722e7068617365","id":5863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1304:42:61","typeDescriptions":{"typeIdentifier":"t_stringliteral_45d439c902da5ba33f98e10a3a9e80a454ed74a1b14c49a6e476fcd1db4ddd6c","typeString":"literal_string \"yura2100.token.ERC721.ERC721Minter.phase\""},"value":"yura2100.token.ERC721.ERC721Minter.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_45d439c902da5ba33f98e10a3a9e80a454ed74a1b14c49a6e476fcd1db4ddd6c","typeString":"literal_string \"yura2100.token.ERC721.ERC721Minter.phase\""}],"id":5862,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1294:9:61","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1294:53:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1286:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5860,"name":"uint256","nodeType":"ElementaryTypeName","src":"1286:7:61","typeDescriptions":{}}},"id":5865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1286:62:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1351:1:61","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1286:66:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1278:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1278:7:61","typeDescriptions":{}}},"id":5868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1278:75:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":5949,"nodeType":"Block","src":"2167:543:61","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5881,"name":"maxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"2181:10:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2195:1:61","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2181:15:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5888,"nodeType":"IfStatement","src":"2177:81:61","trueBody":{"id":5887,"nodeType":"Block","src":"2198:60:61","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5884,"name":"ERC721MinterZeroMaxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"2219:26:61","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2219:28:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5886,"nodeType":"RevertStatement","src":"2212:35:61"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5891,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"2279:5:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}],"id":5890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2271:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5889,"name":"address","nodeType":"ElementaryTypeName","src":"2271:7:61","typeDescriptions":{}}},"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2271:14:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:1:61","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2289:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5893,"name":"address","nodeType":"ElementaryTypeName","src":"2289:7:61","typeDescriptions":{}}},"id":5896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2289:10:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2271:28:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5902,"nodeType":"IfStatement","src":"2267:96:61","trueBody":{"id":5901,"nodeType":"Block","src":"2301:62:61","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5898,"name":"ERC721MinterZeroTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"2322:28:61","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2322:30:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5900,"nodeType":"RevertStatement","src":"2315:37:61"}]}},{"condition":{"id":5915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2377:77:61","subExpression":{"arguments":[{"expression":{"arguments":[{"id":5911,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"2425:15:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1861_$","typeString":"type(contract IERC721Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1861_$","typeString":"type(contract IERC721Mintable)"}],"id":5910,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2420:4:61","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:21:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Mintable_$1861","typeString":"type(contract IERC721Mintable)"}},"id":5913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2442:11:61","memberName":"interfaceId","nodeType":"MemberAccess","src":"2420:33:61","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":5906,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"2394:5:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}],"id":5905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2386:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5904,"name":"address","nodeType":"ElementaryTypeName","src":"2386:7:61","typeDescriptions":{}}},"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2386:14:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5903,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"2378:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}},"id":5908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2378:23:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$909","typeString":"contract IERC165"}},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2402:17:61","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":908,"src":"2378:41:61","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2378:76:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5924,"nodeType":"IfStatement","src":"2373:166:61","trueBody":{"id":5923,"nodeType":"Block","src":"2456:83:61","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":5919,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"2521:5:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}],"id":5918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2513:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5917,"name":"address","nodeType":"ElementaryTypeName","src":"2513:7:61","typeDescriptions":{}}},"id":5920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2513:14:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5916,"name":"ERC721MinterUnsupportedContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5785,"src":"2477:35:61","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:51:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5922,"nodeType":"RevertStatement","src":"2470:58:61"}]}},{"expression":{"id":5929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5925,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5873,"src":"2548:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2550:10:61","memberName":"maxTokenId","nodeType":"MemberAccess","referencedDeclaration":5839,"src":"2548:12:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5928,"name":"maxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5875,"src":"2563:10:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2548:25:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5930,"nodeType":"ExpressionStatement","src":"2548:25:61"},{"expression":{"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5931,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5873,"src":"2583:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2585:5:61","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5842,"src":"2583:7:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5934,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"2593:5:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"src":"2583:15:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"id":5936,"nodeType":"ExpressionStatement","src":"2583:15:61"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":5943,"name":"IERC721Minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"2670:13:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Minter_$5810_$","typeString":"type(contract IERC721Minter)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Minter_$5810_$","typeString":"type(contract IERC721Minter)"}],"id":5942,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2665:4:61","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2665:19:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Minter_$5810","typeString":"type(contract IERC721Minter)"}},"id":5945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2685:11:61","memberName":"interfaceId","nodeType":"MemberAccess","src":"2665:31:61","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":5946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2698:4:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5937,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2608:25:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":5939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2634:6:61","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"2608:32:61","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2608:34:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":5941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:21:61","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"2608:56:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":5947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2608:95:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5948,"nodeType":"ExpressionStatement","src":"2608:95:61"}]},"documentation":{"id":5870,"nodeType":"StructuredDocumentation","src":"1360:707:61","text":"@notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\n @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\n @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\n @param maxTokenId The maximum token ID that can be minted.\n @param token The ERC721 token contract."},"id":5950,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"2081:15:61","nodeType":"FunctionDefinition","parameters":{"id":5879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"s","nameLocation":"2112:1:61","nodeType":"VariableDeclaration","scope":5950,"src":"2097:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":5872,"nodeType":"UserDefinedTypeName","pathNode":{"id":5871,"name":"Layout","nameLocations":["2097:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"2097:6:61"},"referencedDeclaration":5843,"src":"2097:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5875,"mutability":"mutable","name":"maxTokenId","nameLocation":"2123:10:61","nodeType":"VariableDeclaration","scope":5950,"src":"2115:18:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5874,"name":"uint256","nodeType":"ElementaryTypeName","src":"2115:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5878,"mutability":"mutable","name":"token","nameLocation":"2151:5:61","nodeType":"VariableDeclaration","scope":5950,"src":"2135:21:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"},"typeName":{"id":5877,"nodeType":"UserDefinedTypeName","pathNode":{"id":5876,"name":"IERC721Mintable","nameLocations":["2135:15:61"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"2135:15:61"},"referencedDeclaration":1861,"src":"2135:15:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"visibility":"internal"}],"src":"2096:61:61"},"returnParameters":{"id":5880,"nodeType":"ParameterList","parameters":[],"src":"2167:0:61"},"scope":6057,"src":"2072:638:61","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5976,"nodeType":"Block","src":"3378:117:61","statements":[{"expression":{"arguments":[{"id":5965,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"3417:21:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":5966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3440:1:61","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5962,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"3388:19:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1066_$","typeString":"type(library ProxyInitialization)"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3408:8:61","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1065,"src":"3388:28:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:54:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5968,"nodeType":"ExpressionStatement","src":"3388:54:61"},{"expression":{"arguments":[{"id":5972,"name":"maxTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"3470:10:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5973,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"3482:5:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}],"expression":{"id":5969,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5954,"src":"3452:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3454:15:61","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":5950,"src":"3452:17:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$5843_storage_ptr_$_t_uint256_$_t_contract$_IERC721Mintable_$1861_$returns$__$attached_to$_t_struct$_Layout_$5843_storage_ptr_$","typeString":"function (struct ERC721MinterStorage.Layout storage pointer,uint256,contract IERC721Mintable)"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3452:36:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5975,"nodeType":"ExpressionStatement","src":"3452:36:61"}]},"documentation":{"id":5951,"nodeType":"StructuredDocumentation","src":"2716:568:61","text":"@notice Initializes the storage with the maximum token ID and the ERC721 token contract.\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @param maxTokenId The maximum token ID that can be minted.\n @param token The ERC721 token contract."},"id":5977,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"3298:9:61","nodeType":"FunctionDefinition","parameters":{"id":5960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5954,"mutability":"mutable","name":"s","nameLocation":"3323:1:61","nodeType":"VariableDeclaration","scope":5977,"src":"3308:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":5953,"nodeType":"UserDefinedTypeName","pathNode":{"id":5952,"name":"Layout","nameLocations":["3308:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"3308:6:61"},"referencedDeclaration":5843,"src":"3308:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5956,"mutability":"mutable","name":"maxTokenId","nameLocation":"3334:10:61","nodeType":"VariableDeclaration","scope":5977,"src":"3326:18:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5955,"name":"uint256","nodeType":"ElementaryTypeName","src":"3326:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5959,"mutability":"mutable","name":"token","nameLocation":"3362:5:61","nodeType":"VariableDeclaration","scope":5977,"src":"3346:21:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"},"typeName":{"id":5958,"nodeType":"UserDefinedTypeName","pathNode":{"id":5957,"name":"IERC721Mintable","nameLocations":["3346:15:61"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"3346:15:61"},"referencedDeclaration":1861,"src":"3346:15:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"visibility":"internal"}],"src":"3307:61:61"},"returnParameters":{"id":5961,"nodeType":"ParameterList","parameters":[],"src":"3378:0:61"},"scope":6057,"src":"3289:206:61","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6017,"nodeType":"Block","src":"3788:223:61","statements":[{"assignments":[5987],"declarations":[{"constant":false,"id":5987,"mutability":"mutable","name":"nextId","nameLocation":"3806:6:61","nodeType":"VariableDeclaration","scope":6017,"src":"3798:14:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5986,"name":"uint256","nodeType":"ElementaryTypeName","src":"3798:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5992,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5988,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"3815:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3817:14:61","memberName":"currentTokenId","nodeType":"MemberAccess","referencedDeclaration":5837,"src":"3815:16:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3834:1:61","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3815:20:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3798:37:61"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5993,"name":"nextId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5987,"src":"3849:6:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5994,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"3858:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":5995,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3860:10:61","memberName":"maxTokenId","nodeType":"MemberAccess","referencedDeclaration":5839,"src":"3858:12:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3849:21:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6001,"nodeType":"IfStatement","src":"3845:91:61","trueBody":{"id":6000,"nodeType":"Block","src":"3872:64:61","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5997,"name":"ERC721MinterMaxTokenIdExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"3893:30:61","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3893:32:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5999,"nodeType":"RevertStatement","src":"3886:39:61"}]}},{"expression":{"arguments":[{"id":6007,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5983,"src":"3958:2:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6008,"name":"nextId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5987,"src":"3962:6:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6002,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"3945:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":6005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3947:5:61","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":5842,"src":"3945:7:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Mintable_$1861","typeString":"contract IERC721Mintable"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3953:4:61","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"3945:12:61","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3945:24:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6010,"nodeType":"ExpressionStatement","src":"3945:24:61"},{"expression":{"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6011,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"3979:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":6013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3981:14:61","memberName":"currentTokenId","nodeType":"MemberAccess","referencedDeclaration":5837,"src":"3979:16:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6014,"name":"nextId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5987,"src":"3998:6:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3979:25:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6016,"nodeType":"ExpressionStatement","src":"3979:25:61"}]},"documentation":{"id":5978,"nodeType":"StructuredDocumentation","src":"3501:229:61","text":"@notice Mints a token to the specified address.\n @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\n @param to The address to which the token will be minted."},"id":6018,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"3744:4:61","nodeType":"FunctionDefinition","parameters":{"id":5984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5981,"mutability":"mutable","name":"s","nameLocation":"3764:1:61","nodeType":"VariableDeclaration","scope":6018,"src":"3749:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":5980,"nodeType":"UserDefinedTypeName","pathNode":{"id":5979,"name":"Layout","nameLocations":["3749:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"3749:6:61"},"referencedDeclaration":5843,"src":"3749:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":5983,"mutability":"mutable","name":"to","nameLocation":"3775:2:61","nodeType":"VariableDeclaration","scope":6018,"src":"3767:10:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5982,"name":"address","nodeType":"ElementaryTypeName","src":"3767:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3748:30:61"},"returnParameters":{"id":5985,"nodeType":"ParameterList","parameters":[],"src":"3788:0:61"},"scope":6057,"src":"3735:276:61","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6030,"nodeType":"Block","src":"4186:40:61","statements":[{"expression":{"expression":{"id":6027,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"4203:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":6028,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4205:14:61","memberName":"currentTokenId","nodeType":"MemberAccess","referencedDeclaration":5837,"src":"4203:16:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6026,"id":6029,"nodeType":"Return","src":"4196:23:61"}]},"documentation":{"id":6019,"nodeType":"StructuredDocumentation","src":"4017:87:61","text":"@notice Returns the current token ID.\n @return tokenId The current token ID."},"id":6031,"implemented":true,"kind":"function","modifiers":[],"name":"currentId","nameLocation":"4118:9:61","nodeType":"FunctionDefinition","parameters":{"id":6023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6022,"mutability":"mutable","name":"s","nameLocation":"4143:1:61","nodeType":"VariableDeclaration","scope":6031,"src":"4128:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":6021,"nodeType":"UserDefinedTypeName","pathNode":{"id":6020,"name":"Layout","nameLocations":["4128:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"4128:6:61"},"referencedDeclaration":5843,"src":"4128:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"}],"src":"4127:18:61"},"returnParameters":{"id":6026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6025,"mutability":"mutable","name":"tokenId","nameLocation":"4177:7:61","nodeType":"VariableDeclaration","scope":6031,"src":"4169:15:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6024,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:61"},"scope":6057,"src":"4109:117:61","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6043,"nodeType":"Block","src":"4397:36:61","statements":[{"expression":{"expression":{"id":6040,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6035,"src":"4414:1:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout storage pointer"}},"id":6041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4416:10:61","memberName":"maxTokenId","nodeType":"MemberAccess","referencedDeclaration":5839,"src":"4414:12:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6039,"id":6042,"nodeType":"Return","src":"4407:19:61"}]},"documentation":{"id":6032,"nodeType":"StructuredDocumentation","src":"4232:87:61","text":"@notice Returns the maximum token ID.\n @return tokenId The maximum token ID."},"id":6044,"implemented":true,"kind":"function","modifiers":[],"name":"maxId","nameLocation":"4333:5:61","nodeType":"FunctionDefinition","parameters":{"id":6036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6035,"mutability":"mutable","name":"s","nameLocation":"4354:1:61","nodeType":"VariableDeclaration","scope":6044,"src":"4339:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":6034,"nodeType":"UserDefinedTypeName","pathNode":{"id":6033,"name":"Layout","nameLocations":["4339:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"4339:6:61"},"referencedDeclaration":5843,"src":"4339:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"}],"src":"4338:18:61"},"returnParameters":{"id":6039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6038,"mutability":"mutable","name":"tokenId","nameLocation":"4388:7:61","nodeType":"VariableDeclaration","scope":6044,"src":"4380:15:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6037,"name":"uint256","nodeType":"ElementaryTypeName","src":"4380:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4379:17:61"},"scope":6057,"src":"4324:109:61","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6055,"nodeType":"Block","src":"4498:115:61","statements":[{"assignments":[6051],"declarations":[{"constant":false,"id":6051,"mutability":"mutable","name":"position","nameLocation":"4516:8:61","nodeType":"VariableDeclaration","scope":6055,"src":"4508:16:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4508:7:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6053,"initialValue":{"id":6052,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"4527:19:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4508:38:61"},{"AST":{"nativeSrc":"4565:42:61","nodeType":"YulBlock","src":"4565:42:61","statements":[{"nativeSrc":"4579:18:61","nodeType":"YulAssignment","src":"4579:18:61","value":{"name":"position","nativeSrc":"4589:8:61","nodeType":"YulIdentifier","src":"4589:8:61"},"variableNames":[{"name":"s.slot","nativeSrc":"4579:6:61","nodeType":"YulIdentifier","src":"4579:6:61"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6051,"isOffset":false,"isSlot":false,"src":"4589:8:61","valueSize":1},{"declaration":6048,"isOffset":false,"isSlot":true,"src":"4579:6:61","suffix":"slot","valueSize":1}],"id":6054,"nodeType":"InlineAssembly","src":"4556:51:61"}]},"id":6056,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4448:6:61","nodeType":"FunctionDefinition","parameters":{"id":6045,"nodeType":"ParameterList","parameters":[],"src":"4454:2:61"},"returnParameters":{"id":6049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6048,"mutability":"mutable","name":"s","nameLocation":"4495:1:61","nodeType":"VariableDeclaration","scope":6056,"src":"4480:16:61","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"},"typeName":{"id":6047,"nodeType":"UserDefinedTypeName","pathNode":{"id":6046,"name":"Layout","nameLocations":["4480:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":5843,"src":"4480:6:61"},"referencedDeclaration":5843,"src":"4480:6:61","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$5843_storage_ptr","typeString":"struct ERC721MinterStorage.Layout"}},"visibility":"internal"}],"src":"4479:18:61"},"scope":6057,"src":"4439:174:61","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6058,"src":"808:3807:61","usedErrors":[],"usedEvents":[]}],"src":"32:4584:61"},"id":61}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x975e348e090c7f844de2c9428f8f5747ea1e3b2d7513acb5f86f33b171ff1414\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x7d60a63e39121f769f53d6132706e80be62df0805faccf1abf80947e5a7cf293\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x7d60a63e39121f769f53d6132706e80be62df0805faccf1abf80947e5a7cf293\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053bcf057a686ae4c563d58c3ec85060391fa5d6e548d7e48cb8036a58c15802364736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xBC CREATE JUMPI 0xA6 DUP7 0xAE 0x4C JUMP RETURNDATASIZE PC 0xC3 0xEC DUP6 MOD SUB SWAP2 STATICCALL TSTORE PUSH15 0x548D7E48CB8036A58C15802364736F PUSH13 0x63430008180033000000000000 ","sourceMap":"428:4129:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;428:4129:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053bcf057a686ae4c563d58c3ec85060391fa5d6e548d7e48cb8036a58c15802364736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xBC CREATE JUMPI 0xA6 DUP7 0xAE 0x4C JUMP RETURNDATASIZE PC 0xC3 0xEC DUP6 MOD SUB SWAP2 STATICCALL TSTORE PUSH15 0x548D7E48CB8036A58C15802364736F PUSH13 0x63430008180033000000000000 ","sourceMap":"428:4129:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f841beaacca61a1216a9b81984b7aee3e53f01e548e9ec9f89a0bf42ff141ab64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF DUP5 SHL 0xEA 0xAC 0xCA PUSH2 0xA121 PUSH11 0x9B81984B7AEE3E53F01E54 DUP15 SWAP15 0xC9 0xF8 SWAP11 SIGNEXTEND DELEGATECALL 0x2F CALL COINBASE 0xAB PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"595:4646:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f841beaacca61a1216a9b81984b7aee3e53f01e548e9ec9f89a0bf42ff141ab64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF DUP5 SHL 0xEA 0xAC 0xCA PUSH2 0xA121 PUSH11 0x9B81984B7AEE3E53F01E54 DUP15 SWAP15 0xC9 0xF8 SWAP11 SIGNEXTEND DELEGATECALL 0x2F CALL COINBASE 0xAB PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"595:4646:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c0c0dfd480c4e6d4103f13d28779e78659bb5d70eb8a6a76c59ac57d1f539eb964736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 0xC0 0xDF 0xD4 DUP1 0xC4 0xE6 0xD4 LT EXTCODEHASH SGT 0xD2 DUP8 PUSH26 0xE78659BB5D70EB8A6A76C59AC57D1F539EB964736F6C63430008 XOR STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c0c0dfd480c4e6d4103f13d28779e78659bb5d70eb8a6a76c59ac57d1f539eb964736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 0xC0 0xDF 0xD4 DUP1 0xC4 0xE6 0xD4 LT EXTCODEHASH SGT 0xD2 DUP8 PUSH26 0xE78659BB5D70EB8A6A76C59AC57D1F539EB964736F6C63430008 XOR STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c32ae6fb144cf2522146d0bb0e06527ef45be949d72328140e670a77bc6958ac64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x2A 0xE6 0xFB EQ 0x4C CALLCODE MSTORE 0x21 CHAINID 0xD0 0xBB 0xE MOD MSTORE PUSH31 0xF45BE949D72328140E670A77BC6958AC64736F6C6343000818003300000000 ","sourceMap":"319:712:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c32ae6fb144cf2522146d0bb0e06527ef45be949d72328140e670a77bc6958ac64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x2A 0xE6 0xFB EQ 0x4C CALLCODE MSTORE 0x21 CHAINID 0xD0 0xBB 0xE MOD MSTORE PUSH31 0xF45BE949D72328140E670A77BC6958AC64736F6C6343000818003300000000 ","sourceMap":"319:712:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForApproval","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApproval","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApprovalForAll","type":"error"},{"inputs":[],"name":"ERC721TransferToAddressZero","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"ERC721NonApprovedForApproval(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"ERC721SelfApproval(address)":[{"params":{"account":"The account trying to approve itself."}}],"ERC721SelfApprovalForAll(address)":[{"params":{"account":"The account trying to approveForAll itself."}}]},"events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SelfApproval(address)\":[{\"params\":{\"account\":\"The account trying to approve itself.\"}}],\"ERC721SelfApprovalForAll(address)\":[{\"params\":{\"account\":\"The account trying to approveForAll itself.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC721SelfApproval(address)\":[{\"notice\":\"Thrown when trying to approve oneself.\"}],\"ERC721SelfApprovalForAll(address)\":[{\"notice\":\"Thrown when trying to approveForAll oneself.\"}],\"ERC721TransferToAddressZero()\":[{\"notice\":\"Thrown when transferring a token to the zero address.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC721.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721Base} from \\\"./base/ERC721Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721 is ERC721Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\\n    constructor() {\\n        ERC721Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0xd5df47b537a6dec0cd4998aa1ae6a660a6a38588d4961ecb16f3ace99d9aa276\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721Base is IERC721, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external virtual {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        ERC721Storage.layout().transferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddec388526c95c4c631794ec27915d8df67373c0be17eee950e2e09769b8990\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"notice":"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"ERC721SelfApproval(address)":[{"notice":"Thrown when trying to approve oneself."}],"ERC721SelfApprovalForAll(address)":[{"notice":"Thrown when trying to approveForAll oneself."}],"ERC721TransferToAddressZero()":[{"notice":"Thrown when transferring a token to the zero address."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"constructor":{"notice":"Marks the following ERC165 interfaces as supported: ERC721."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ERC721Metadata":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"constructor":{"params":{"metadataResolver":"The address of the metadata resolver contract.","name":"The name of the token.","symbol":"The symbol of the token."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"metadataResolver\":\"The address of the metadata resolver contract.\",\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC721Metadata.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":\"ERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0x8affc8678def409d5eff9a82be2deb2302ddcedd3014612ff9b4633cd24b6b43\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xeed9259228d3848a7483aac389f492923abe970217ffe10664246fe15b889b2a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xd1489acc99fc085c1aab9fe7c4c025ddc5f3eae9c5fef03c30e5bddcb49d4e8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90cb5c5b4f3cfcd18b0913c68d57ea6b4a1dff7dcdbf1abec8c52c5f076ee764\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interfaces as supported: ERC721Metadata."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol":{"ERC721MintableOnce":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721BurntToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"wasBurnt","outputs":[{"internalType":"bool","name":"tokenWasBurnt","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"ERC721BurntToken(uint256)":[{"params":{"tokenId":"The identifier of the token that has been burnt before."}}],"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"batchMint(address,uint256[])":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"mint(address,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeMint(address,uint256,bytes)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"wasBurnt(uint256)":{"params":{"tokenId":"The token identifier."},"returns":{"tokenWasBurnt":"Whether the token was burnt."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","batchMint(address,uint256[])":"4684d7e9","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","mint(address,uint256)":"40c10f19","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeMint(address,uint256,bytes)":"8832e6e3","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","wasBurnt(uint256)":"c77c6955"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721BurntToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wasBurnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenWasBurnt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"ERC721BurntToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that has been burnt before.\"}}],\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[])\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"wasBurnt(uint256)\":{\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenWasBurnt\":\"Whether the token was burnt.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BurntToken(uint256)\":[{\"notice\":\"Thrown when minting a token which has been burnt before (MintableOnce implementation).\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC721Mintable.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"wasBurnt(uint256)\":{\"notice\":\"Gets whether a token was burnt.\"}},\"notice\":\"ERC721Mintable implementation where burnt tokens cannot be minted again.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol\":\"ERC721MintableOnce\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x975e348e090c7f844de2c9428f8f5747ea1e3b2d7513acb5f86f33b171ff1414\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x7d60a63e39121f769f53d6132706e80be62df0805faccf1abf80947e5a7cf293\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MintableOnceBase} from \\\"./base/ERC721MintableOnceBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721MintableOnce is ERC721MintableOnceBase, AccessControl {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    constructor() {\\n        ERC721Storage.initERC721Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xd9ecba5ba30e82585db25e7ebb39a94b893f3a1e01289cc5b595f375626008f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC721MintableOnceBase is IERC721Mintable, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function mint(address to, uint256 tokenId) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().mintOnce(to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().safeMintOnce(_msgSender(), to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().batchMintOnce(to, tokenIds);\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(uint256 tokenId) external view virtual returns (bool tokenWasBurnt) {\\n        return ERC721Storage.layout().wasBurnt(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x94ffd27c4631eaf9c16567e964b3b818c8f75179f9473b9b91a990b5b16efbc5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721BurntToken(uint256)":[{"notice":"Thrown when minting a token which has been burnt before (MintableOnce implementation)."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC721Mintable."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"wasBurnt(uint256)":{"notice":"Gets whether a token was burnt."}},"notice":"ERC721Mintable implementation where burnt tokens cannot be minted again.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol":{"ERC721Base":{"abi":[{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForApproval","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApproval","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApprovalForAll","type":"error"},{"inputs":[],"name":"ERC721TransferToAddressZero","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"ERC721NonApprovedForApproval(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"ERC721SelfApproval(address)":[{"params":{"account":"The account trying to approve itself."}}],"ERC721SelfApprovalForAll(address)":[{"params":{"account":"The account trying to approveForAll itself."}}]},"events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SelfApproval(address)\":[{\"params\":{\"account\":\"The account trying to approve itself.\"}}],\"ERC721SelfApprovalForAll(address)\":[{\"params\":{\"account\":\"The account trying to approveForAll itself.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC721SelfApproval(address)\":[{\"notice\":\"Thrown when trying to approve oneself.\"}],\"ERC721SelfApprovalForAll(address)\":[{\"notice\":\"Thrown when trying to approveForAll oneself.\"}],\"ERC721TransferToAddressZero()\":[{\"notice\":\"Thrown when transferring a token to the zero address.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol\":\"ERC721Base\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721Base is IERC721, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external virtual {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        ERC721Storage.layout().transferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddec388526c95c4c631794ec27915d8df67373c0be17eee950e2e09769b8990\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"notice":"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"ERC721SelfApproval(address)":[{"notice":"Thrown when trying to approve oneself."}],"ERC721SelfApprovalForAll(address)":[{"notice":"Thrown when trying to approveForAll oneself."}],"ERC721TransferToAddressZero()":[{"notice":"Thrown when transferring a token to the zero address."}]},"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ERC721MetadataBase":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":\"ERC721MetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xeed9259228d3848a7483aac389f492923abe970217ffe10664246fe15b889b2a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xd1489acc99fc085c1aab9fe7c4c025ddc5f3eae9c5fef03c30e5bddcb49d4e8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90cb5c5b4f3cfcd18b0913c68d57ea6b4a1dff7dcdbf1abec8c52c5f076ee764\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}]},"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol":{"ERC721MintableOnceBase":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721BurntToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"wasBurnt","outputs":[{"internalType":"bool","name":"tokenWasBurnt","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).Note: This contract requires AccessControl.","errors":{"ERC721BurntToken(uint256)":[{"params":{"tokenId":"The identifier of the token that has been burnt before."}}],"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"batchMint(address,uint256[])":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"mint(address,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"safeMint(address,uint256,bytes)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"wasBurnt(uint256)":{"params":{"tokenId":"The token identifier."},"returns":{"tokenWasBurnt":"Whether the token was burnt."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","batchMint(address,uint256[])":"4684d7e9","mint(address,uint256)":"40c10f19","safeMint(address,uint256,bytes)":"8832e6e3","wasBurnt(uint256)":"c77c6955"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721BurntToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wasBurnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenWasBurnt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).Note: This contract requires AccessControl.\",\"errors\":{\"ERC721BurntToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that has been burnt before.\"}}],\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[])\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"wasBurnt(uint256)\":{\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenWasBurnt\":\"Whether the token was burnt.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BurntToken(uint256)\":[{\"notice\":\"Thrown when minting a token which has been burnt before (MintableOnce implementation).\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"},\"wasBurnt(uint256)\":{\"notice\":\"Gets whether a token was burnt.\"}},\"notice\":\"ERC721Mintable implementation where burnt tokens cannot be minted again.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol\":\"ERC721MintableOnceBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC721MintableOnceBase is IERC721Mintable, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function mint(address to, uint256 tokenId) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().mintOnce(to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().safeMintOnce(_msgSender(), to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().batchMintOnce(to, tokenIds);\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(uint256 tokenId) external view virtual returns (bool tokenWasBurnt) {\\n        return ERC721Storage.layout().wasBurnt(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x94ffd27c4631eaf9c16567e964b3b818c8f75179f9473b9b91a990b5b16efbc5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721BurntToken(uint256)":[{"notice":"Thrown when minting a token which has been burnt before (MintableOnce implementation)."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."},"wasBurnt(uint256)":{"notice":"Gets whether a token was burnt."}},"notice":"ERC721Mintable implementation where burnt tokens cannot be minted again.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"IERC721BatchTransfer":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.","kind":"dev","methods":{"batchTransferFrom(address,address,uint256[])":{"details":"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.","params":{"from":"Current tokens owner.","to":"Address of the new token owner.","tokenIds":"Identifiers of the tokens to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransferFrom(address,address,uint256[])":"f3993d11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.\",\"kind\":\"dev\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"details\":\"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.\",\"params\":{\"from\":\"Current tokens owner.\",\"to\":\"Address of the new token owner.\",\"tokenIds\":\"Identifiers of the tokens to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"notice\":\"Unsafely transfers a batch of tokens to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":\"IERC721BatchTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransferFrom(address,address,uint256[])":{"notice":"Unsafely transfers a batch of tokens to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"IERC721Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.","kind":"dev","methods":{"batchBurnFrom(address,uint256[])":{"details":"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.","params":{"from":"The current tokens owner.","tokenIds":"The identifiers of the tokens to burn."}},"burnFrom(address,uint256)":{"details":"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.","params":{"from":"The current token owner.","tokenId":"The identifier of the token to burn."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[])":"f2472965","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"details\":\"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\",\"params\":{\"from\":\"The current tokens owner.\",\"tokenIds\":\"The identifiers of the tokens to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.\",\"params\":{\"from\":\"The current token owner.\",\"tokenId\":\"The identifier of the token to burn.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"notice\":\"Burns a batch of tokens.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":\"IERC721Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[])":{"notice":"Burns a batch of tokens."},"burnFrom(address,uint256)":{"notice":"Burns a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"IERC721Deliverable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"deliver","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.","kind":"dev","methods":{"deliver(address[],uint256[])":{"details":"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.","params":{"recipients":"Addresses of the new tokens owners.","tokenIds":"Identifiers of the tokens to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deliver(address[],uint256[])":"9da5e832"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.\",\"kind\":\"dev\",\"methods\":{\"deliver(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\",\"params\":{\"recipients\":\"Addresses of the new tokens owners.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(address[],uint256[])\":{\"notice\":\"Unsafely mints tokens to multiple recipients.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":\"IERC721Deliverable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deliver(address[],uint256[])":{"notice":"Unsafely mints tokens to multiple recipients."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.","kind":"dev","methods":{"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.\",\"kind\":\"dev\",\"methods\":{\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"IERC721Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.","kind":"dev","methods":{"batchMint(address,uint256[])":{"details":"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"safeMint(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address,uint256[])":"4684d7e9","mint(address,uint256)":"40c10f19","safeMint(address,uint256,bytes)":"8832e6e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[])\":{\"details\":\"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":\"IERC721Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.","params":{"data":"Optional additional data with no specified format.","from":"The previous token owner.","operator":"The initiator of the safe transfer.","tokenId":"The token identifier."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."}}},"title":"ERC721 Non-Fungible Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous token owner.\",\"operator\":\"The initiator of the safe transfer.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of an ERC721 token.\"}},\"notice\":\"Interface for supporting safe transfers from ERC721 contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of an ERC721 token."}},"notice":"Interface for supporting safe transfers from ERC721 contracts.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ERC721Storage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb1b6a34d05b671f945d6ec69974eb5f117d0c3f255a8e1894e0d56eee3493b064736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SHL PUSH11 0x34D05B671F945D6EC69974 0xEB PUSH0 GT PUSH30 0xC3F255A8E1894E0D56EEE3493B064736F6C634300081800330000000000 ","sourceMap":"1368:29619:37:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1368:29619:37;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb1b6a34d05b671f945d6ec69974eb5f117d0c3f255a8e1894e0d56eee3493b064736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SHL PUSH11 0x34D05B671F945D6EC69974 0xEB PUSH0 GT PUSH30 0xC3F255A8E1894E0D56EEE3493B064736F6C634300081800330000000000 ","sourceMap":"1368:29619:37:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOnERC721Received(address,address,address,uint256,bytes memory)":"infinite","_isOperatable(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","_tokenExists(uint256)":"infinite","_tokenHasApproval(uint256)":"infinite","_tokenOwner(uint256)":"infinite","_tokenWasBurnt(uint256)":"infinite","approve(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","balanceOf(struct ERC721Storage.Layout storage pointer,address)":"infinite","batchBurnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256[] calldata)":"infinite","batchMint(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchMintOnce(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256[] calldata)":"infinite","burnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","deliver(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","deliverOnce(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","getApproved(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","init()":"infinite","initERC721BatchTransfer()":"infinite","initERC721Burnable()":"infinite","initERC721Deliverable()":"infinite","initERC721Metadata()":"infinite","initERC721Mintable()":"infinite","isApprovedForAll(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","layout()":"infinite","mint(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","mintOnce(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","ownerOf(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","safeMint(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeMintOnce(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)":"infinite","setApprovalForAll(struct ERC721Storage.Layout storage pointer,address,address,bool)":"infinite","transferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","wasBurnt(struct ERC721Storage.Layout storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":\"ERC721Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"TokenMetadataBase":{"abi":[{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.","kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The token name."}},"symbol()":{"returns":{"tokenSymbol":"The token symbol."}}},"title":"TokenMetadataBase (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The token name.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The token symbol.\"}}},\"title\":\"TokenMetadataBase (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the token name. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the token symbol. E.g. \\\"TOK\\\".\"}},\"notice\":\"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":\"TokenMetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xd1489acc99fc085c1aab9fe7c4c025ddc5f3eae9c5fef03c30e5bddcb49d4e8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90cb5c5b4f3cfcd18b0913c68d57ea6b4a1dff7dcdbf1abec8c52c5f076ee764\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the token name. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the token symbol. E.g. \"TOK\"."}},"notice":"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ITokenMetadataResolver":{"abi":[{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenMetadataURI","outputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"tokenMetadataURI(address,uint256)":{"params":{"tokenContract":"The token contract for which to retrieve the token URI.","tokenId":"The token identifier."},"returns":{"tokenURI":"The token metadata URI."}}},"title":"ITokenMetadataResolver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokenMetadataURI(address,uint256)":"f724dad7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"params\":{\"tokenContract\":\"The token contract for which to retrieve the token URI.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenURI\":\"The token metadata URI.\"}}},\"title\":\"ITokenMetadataResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"notice\":\"Gets the token metadata URI for a token.\"}},\"notice\":\"Interface for Token Metadata Resolvers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":\"ITokenMetadataResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"tokenMetadataURI(address,uint256)":{"notice":"Gets the token metadata URI for a token."}},"notice":"Interface for Token Metadata Resolvers.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"TokenMetadataStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220181f3115d25c3039bdd8068ef0c47b3d242685c9999a3ae9da08c302b72725e164736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0x1F BALANCE ISZERO 0xD2 TLOAD ADDRESS CODECOPY 0xBD 0xD8 MOD DUP15 CREATE 0xC4 PUSH28 0x3D242685C9999A3AE9DA08C302B72725E164736F6C63430008180033 ","sourceMap":"230:3387:40:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;230:3387:40;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220181f3115d25c3039bdd8068ef0c47b3d242685c9999a3ae9da08c302b72725e164736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0x1F BALANCE ISZERO 0xD2 TLOAD ADDRESS CODECOPY 0xBD 0xD8 MOD DUP15 CREATE 0xC4 PUSH28 0x3D242685C9999A3AE9DA08C302B72725E164736F6C63430008180033 ","sourceMap":"230:3387:40:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)":"infinite","layout()":"infinite","metadataResolver(struct TokenMetadataStorage.Layout storage pointer)":"infinite","name(struct TokenMetadataStorage.Layout storage pointer)":"infinite","proxyInit(struct TokenMetadataStorage.Layout storage pointer,string calldata,string calldata,contract ITokenMetadataResolver)":"infinite","symbol(struct TokenMetadataStorage.Layout storage pointer)":"infinite","tokenMetadataURI(struct TokenMetadataStorage.Layout storage pointer,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":\"TokenMetadataStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90cb5c5b4f3cfcd18b0913c68d57ea6b4a1dff7dcdbf1abec8c52c5f076ee764\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd9cd3d268a91120b197d2ecf0b43ebbfd4fbe82bc28f0f0e3dbc4c274683be464736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD SWAP13 0xD3 0xD2 PUSH9 0xA91120B197D2ECF0B4 RETURNDATACOPY 0xBB REVERT 0x4F 0xBE DUP3 0xBC 0x28 CREATE CREATE 0xE3 0xDB 0xC4 0xC2 PUSH21 0x683BE464736F6C6343000818003300000000000000 ","sourceMap":"701:6234:43:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:43;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd9cd3d268a91120b197d2ecf0b43ebbfd4fbe82bc28f0f0e3dbc4c274683be464736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD SWAP13 0xD3 0xD2 PUSH9 0xA91120B197D2ECF0B4 RETURNDATACOPY 0xBB REVERT 0x4F 0xBE DUP3 0xBC 0x28 CREATE CREATE 0xE3 0xDB 0xC4 0xC2 PUSH21 0x683BE464736F6C6343000818003300000000000000 ","sourceMap":"701:6234:43:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035e741880155a00a450010f8897dbcc40400ae4bd572acd341dd4c7548b441db64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xE7 COINBASE DUP9 ADD SSTORE LOG0 EXP GASLIMIT STOP LT 0xF8 DUP10 PUSH30 0xBCC40400AE4BD572ACD341DD4C7548B441DB64736F6C6343000818003300 ","sourceMap":"194:9169:44:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:44;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035e741880155a00a450010f8897dbcc40400ae4bd572acd341dd4c7548b441db64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xE7 COINBASE DUP9 ADD SSTORE LOG0 EXP GASLIMIT STOP LT 0xF8 DUP10 PUSH30 0xBCC40400AE4BD572ACD341DD4C7548B441DB64736F6C6343000818003300 ","sourceMap":"194:9169:44:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204da9532eb27e46010b75e0f62c99ea54c8a53f7b2526626fe65c8488c9629a3e64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xA9 MSTORE8 0x2E 0xB2 PUSH31 0x46010B75E0F62C99EA54C8A53F7B2526626FE65C8488C9629A3E64736F6C63 NUMBER STOP ADDMOD XOR STOP CALLER ","sourceMap":"1420:2685:46:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:46;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204da9532eb27e46010b75e0f62c99ea54c8a53f7b2526626fe65c8488c9629a3e64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xA9 MSTORE8 0x2E 0xB2 PUSH31 0x46010B75E0F62C99EA54C8A53F7B2526626FE65C8488C9629A3E64736F6C63 NUMBER STOP ADDMOD XOR STOP CALLER ","sourceMap":"1420:2685:46:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BCNFT.sol":{"BCNFT":{"abi":[{"inputs":[{"internalType":"contract ITokenMetadataResolver","name":"metadataResolver","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721BurntToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForApproval","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApproval","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApprovalForAll","type":"error"},{"inputs":[],"name":"ERC721TransferToAddressZero","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"wasBurnt","outputs":[{"internalType":"bool","name":"tokenWasBurnt","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721BurntToken(uint256)":[{"params":{"tokenId":"The identifier of the token that has been burnt before."}}],"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"ERC721SelfApproval(address)":[{"params":{"account":"The account trying to approve itself."}}],"ERC721SelfApprovalForAll(address)":[{"params":{"account":"The account trying to approveForAll itself."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"batchMint(address,uint256[])":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"mint(address,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"name()":{"returns":{"tokenName":"The name of the token."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeMint(address,uint256,bytes)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"wasBurnt(uint256)":{"params":{"tokenId":"The token identifier."},"returns":{"tokenWasBurnt":"Whether the token was burnt."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1089":{"entryPoint":null,"id":1089,"parameterSlots":0,"returnSlots":0},"@_1134":{"entryPoint":null,"id":1134,"parameterSlots":3,"returnSlots":0},"@_1158":{"entryPoint":null,"id":1158,"parameterSlots":0,"returnSlots":0},"@_4887":{"entryPoint":null,"id":4887,"parameterSlots":1,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_msgSender_4719":{"entryPoint":231,"id":4719,"parameterSlots":0,"returnSlots":1},"@constructorInit_3773":{"entryPoint":486,"id":3773,"parameterSlots":4,"returnSlots":0},"@constructorInit_705":{"entryPoint":289,"id":705,"parameterSlots":2,"returnSlots":0},"@initERC721Metadata_2027":{"entryPoint":557,"id":2027,"parameterSlots":0,"returnSlots":0},"@initERC721Mintable_2044":{"entryPoint":581,"id":2044,"parameterSlots":0,"returnSlots":0},"@init_1993":{"entryPoint":412,"id":1993,"parameterSlots":0,"returnSlots":0},"@layout_1009":{"entryPoint":600,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_3886":{"entryPoint":438,"id":3886,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":235,"id":861,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_963":{"entryPoint":648,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_ITokenMetadataResolver_$3700_fromMemory":{"entryPoint":741,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":791,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":907,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":992,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":847,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":825,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3279:62","nodeType":"YulBlock","src":"0:3279:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"126:209:62","nodeType":"YulBlock","src":"126:209:62","statements":[{"body":{"nativeSrc":"172:16:62","nodeType":"YulBlock","src":"172:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"181:1:62","nodeType":"YulLiteral","src":"181:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"184:1:62","nodeType":"YulLiteral","src":"184:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"174:6:62","nodeType":"YulIdentifier","src":"174:6:62"},"nativeSrc":"174:12:62","nodeType":"YulFunctionCall","src":"174:12:62"},"nativeSrc":"174:12:62","nodeType":"YulExpressionStatement","src":"174:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"147:7:62","nodeType":"YulIdentifier","src":"147:7:62"},{"name":"headStart","nativeSrc":"156:9:62","nodeType":"YulIdentifier","src":"156:9:62"}],"functionName":{"name":"sub","nativeSrc":"143:3:62","nodeType":"YulIdentifier","src":"143:3:62"},"nativeSrc":"143:23:62","nodeType":"YulFunctionCall","src":"143:23:62"},{"kind":"number","nativeSrc":"168:2:62","nodeType":"YulLiteral","src":"168:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"139:3:62","nodeType":"YulIdentifier","src":"139:3:62"},"nativeSrc":"139:32:62","nodeType":"YulFunctionCall","src":"139:32:62"},"nativeSrc":"136:52:62","nodeType":"YulIf","src":"136:52:62"},{"nativeSrc":"197:29:62","nodeType":"YulVariableDeclaration","src":"197:29:62","value":{"arguments":[{"name":"headStart","nativeSrc":"216:9:62","nodeType":"YulIdentifier","src":"216:9:62"}],"functionName":{"name":"mload","nativeSrc":"210:5:62","nodeType":"YulIdentifier","src":"210:5:62"},"nativeSrc":"210:16:62","nodeType":"YulFunctionCall","src":"210:16:62"},"variables":[{"name":"value","nativeSrc":"201:5:62","nodeType":"YulTypedName","src":"201:5:62","type":""}]},{"body":{"nativeSrc":"289:16:62","nodeType":"YulBlock","src":"289:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"298:1:62","nodeType":"YulLiteral","src":"298:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"301:1:62","nodeType":"YulLiteral","src":"301:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"291:6:62","nodeType":"YulIdentifier","src":"291:6:62"},"nativeSrc":"291:12:62","nodeType":"YulFunctionCall","src":"291:12:62"},"nativeSrc":"291:12:62","nodeType":"YulExpressionStatement","src":"291:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"248:5:62","nodeType":"YulIdentifier","src":"248:5:62"},{"arguments":[{"name":"value","nativeSrc":"259:5:62","nodeType":"YulIdentifier","src":"259:5:62"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"274:3:62","nodeType":"YulLiteral","src":"274:3:62","type":"","value":"160"},{"kind":"number","nativeSrc":"279:1:62","nodeType":"YulLiteral","src":"279:1:62","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"270:3:62","nodeType":"YulIdentifier","src":"270:3:62"},"nativeSrc":"270:11:62","nodeType":"YulFunctionCall","src":"270:11:62"},{"kind":"number","nativeSrc":"283:1:62","nodeType":"YulLiteral","src":"283:1:62","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"266:3:62","nodeType":"YulIdentifier","src":"266:3:62"},"nativeSrc":"266:19:62","nodeType":"YulFunctionCall","src":"266:19:62"}],"functionName":{"name":"and","nativeSrc":"255:3:62","nodeType":"YulIdentifier","src":"255:3:62"},"nativeSrc":"255:31:62","nodeType":"YulFunctionCall","src":"255:31:62"}],"functionName":{"name":"eq","nativeSrc":"245:2:62","nodeType":"YulIdentifier","src":"245:2:62"},"nativeSrc":"245:42:62","nodeType":"YulFunctionCall","src":"245:42:62"}],"functionName":{"name":"iszero","nativeSrc":"238:6:62","nodeType":"YulIdentifier","src":"238:6:62"},"nativeSrc":"238:50:62","nodeType":"YulFunctionCall","src":"238:50:62"},"nativeSrc":"235:70:62","nodeType":"YulIf","src":"235:70:62"},{"nativeSrc":"314:15:62","nodeType":"YulAssignment","src":"314:15:62","value":{"name":"value","nativeSrc":"324:5:62","nodeType":"YulIdentifier","src":"324:5:62"},"variableNames":[{"name":"value0","nativeSrc":"314:6:62","nodeType":"YulIdentifier","src":"314:6:62"}]}]},"name":"abi_decode_tuple_t_contract$_ITokenMetadataResolver_$3700_fromMemory","nativeSrc":"14:321:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"92:9:62","nodeType":"YulTypedName","src":"92:9:62","type":""},{"name":"dataEnd","nativeSrc":"103:7:62","nodeType":"YulTypedName","src":"103:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"115:6:62","nodeType":"YulTypedName","src":"115:6:62","type":""}],"src":"14:321:62"},{"body":{"nativeSrc":"389:176:62","nodeType":"YulBlock","src":"389:176:62","statements":[{"nativeSrc":"399:17:62","nodeType":"YulAssignment","src":"399:17:62","value":{"arguments":[{"name":"x","nativeSrc":"411:1:62","nodeType":"YulIdentifier","src":"411:1:62"},{"name":"y","nativeSrc":"414:1:62","nodeType":"YulIdentifier","src":"414:1:62"}],"functionName":{"name":"sub","nativeSrc":"407:3:62","nodeType":"YulIdentifier","src":"407:3:62"},"nativeSrc":"407:9:62","nodeType":"YulFunctionCall","src":"407:9:62"},"variableNames":[{"name":"diff","nativeSrc":"399:4:62","nodeType":"YulIdentifier","src":"399:4:62"}]},{"body":{"nativeSrc":"448:111:62","nodeType":"YulBlock","src":"448:111:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"469:1:62","nodeType":"YulLiteral","src":"469:1:62","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"476:3:62","nodeType":"YulLiteral","src":"476:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"481:10:62","nodeType":"YulLiteral","src":"481:10:62","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"472:3:62","nodeType":"YulIdentifier","src":"472:3:62"},"nativeSrc":"472:20:62","nodeType":"YulFunctionCall","src":"472:20:62"}],"functionName":{"name":"mstore","nativeSrc":"462:6:62","nodeType":"YulIdentifier","src":"462:6:62"},"nativeSrc":"462:31:62","nodeType":"YulFunctionCall","src":"462:31:62"},"nativeSrc":"462:31:62","nodeType":"YulExpressionStatement","src":"462:31:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"513:1:62","nodeType":"YulLiteral","src":"513:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"516:4:62","nodeType":"YulLiteral","src":"516:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"506:6:62","nodeType":"YulIdentifier","src":"506:6:62"},"nativeSrc":"506:15:62","nodeType":"YulFunctionCall","src":"506:15:62"},"nativeSrc":"506:15:62","nodeType":"YulExpressionStatement","src":"506:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"541:1:62","nodeType":"YulLiteral","src":"541:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"544:4:62","nodeType":"YulLiteral","src":"544:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"534:6:62","nodeType":"YulIdentifier","src":"534:6:62"},"nativeSrc":"534:15:62","nodeType":"YulFunctionCall","src":"534:15:62"},"nativeSrc":"534:15:62","nodeType":"YulExpressionStatement","src":"534:15:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"431:4:62","nodeType":"YulIdentifier","src":"431:4:62"},{"name":"x","nativeSrc":"437:1:62","nodeType":"YulIdentifier","src":"437:1:62"}],"functionName":{"name":"gt","nativeSrc":"428:2:62","nodeType":"YulIdentifier","src":"428:2:62"},"nativeSrc":"428:11:62","nodeType":"YulFunctionCall","src":"428:11:62"},"nativeSrc":"425:134:62","nodeType":"YulIf","src":"425:134:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"340:225:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"371:1:62","nodeType":"YulTypedName","src":"371:1:62","type":""},{"name":"y","nativeSrc":"374:1:62","nodeType":"YulTypedName","src":"374:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"380:4:62","nodeType":"YulTypedName","src":"380:4:62","type":""}],"src":"340:225:62"},{"body":{"nativeSrc":"602:95:62","nodeType":"YulBlock","src":"602:95:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"619:1:62","nodeType":"YulLiteral","src":"619:1:62","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"626:3:62","nodeType":"YulLiteral","src":"626:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"631:10:62","nodeType":"YulLiteral","src":"631:10:62","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"622:3:62","nodeType":"YulIdentifier","src":"622:3:62"},"nativeSrc":"622:20:62","nodeType":"YulFunctionCall","src":"622:20:62"}],"functionName":{"name":"mstore","nativeSrc":"612:6:62","nodeType":"YulIdentifier","src":"612:6:62"},"nativeSrc":"612:31:62","nodeType":"YulFunctionCall","src":"612:31:62"},"nativeSrc":"612:31:62","nodeType":"YulExpressionStatement","src":"612:31:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"659:1:62","nodeType":"YulLiteral","src":"659:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"662:4:62","nodeType":"YulLiteral","src":"662:4:62","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"652:6:62","nodeType":"YulIdentifier","src":"652:6:62"},"nativeSrc":"652:15:62","nodeType":"YulFunctionCall","src":"652:15:62"},"nativeSrc":"652:15:62","nodeType":"YulExpressionStatement","src":"652:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"683:1:62","nodeType":"YulLiteral","src":"683:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"686:4:62","nodeType":"YulLiteral","src":"686:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"676:6:62","nodeType":"YulIdentifier","src":"676:6:62"},"nativeSrc":"676:15:62","nodeType":"YulFunctionCall","src":"676:15:62"},"nativeSrc":"676:15:62","nodeType":"YulExpressionStatement","src":"676:15:62"}]},"name":"panic_error_0x41","nativeSrc":"570:127:62","nodeType":"YulFunctionDefinition","src":"570:127:62"},{"body":{"nativeSrc":"757:325:62","nodeType":"YulBlock","src":"757:325:62","statements":[{"nativeSrc":"767:22:62","nodeType":"YulAssignment","src":"767:22:62","value":{"arguments":[{"kind":"number","nativeSrc":"781:1:62","nodeType":"YulLiteral","src":"781:1:62","type":"","value":"1"},{"name":"data","nativeSrc":"784:4:62","nodeType":"YulIdentifier","src":"784:4:62"}],"functionName":{"name":"shr","nativeSrc":"777:3:62","nodeType":"YulIdentifier","src":"777:3:62"},"nativeSrc":"777:12:62","nodeType":"YulFunctionCall","src":"777:12:62"},"variableNames":[{"name":"length","nativeSrc":"767:6:62","nodeType":"YulIdentifier","src":"767:6:62"}]},{"nativeSrc":"798:38:62","nodeType":"YulVariableDeclaration","src":"798:38:62","value":{"arguments":[{"name":"data","nativeSrc":"828:4:62","nodeType":"YulIdentifier","src":"828:4:62"},{"kind":"number","nativeSrc":"834:1:62","nodeType":"YulLiteral","src":"834:1:62","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"824:3:62","nodeType":"YulIdentifier","src":"824:3:62"},"nativeSrc":"824:12:62","nodeType":"YulFunctionCall","src":"824:12:62"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"802:18:62","nodeType":"YulTypedName","src":"802:18:62","type":""}]},{"body":{"nativeSrc":"875:31:62","nodeType":"YulBlock","src":"875:31:62","statements":[{"nativeSrc":"877:27:62","nodeType":"YulAssignment","src":"877:27:62","value":{"arguments":[{"name":"length","nativeSrc":"891:6:62","nodeType":"YulIdentifier","src":"891:6:62"},{"kind":"number","nativeSrc":"899:4:62","nodeType":"YulLiteral","src":"899:4:62","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"887:3:62","nodeType":"YulIdentifier","src":"887:3:62"},"nativeSrc":"887:17:62","nodeType":"YulFunctionCall","src":"887:17:62"},"variableNames":[{"name":"length","nativeSrc":"877:6:62","nodeType":"YulIdentifier","src":"877:6:62"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"855:18:62","nodeType":"YulIdentifier","src":"855:18:62"}],"functionName":{"name":"iszero","nativeSrc":"848:6:62","nodeType":"YulIdentifier","src":"848:6:62"},"nativeSrc":"848:26:62","nodeType":"YulFunctionCall","src":"848:26:62"},"nativeSrc":"845:61:62","nodeType":"YulIf","src":"845:61:62"},{"body":{"nativeSrc":"965:111:62","nodeType":"YulBlock","src":"965:111:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"986:1:62","nodeType":"YulLiteral","src":"986:1:62","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"993:3:62","nodeType":"YulLiteral","src":"993:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"998:10:62","nodeType":"YulLiteral","src":"998:10:62","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"989:3:62","nodeType":"YulIdentifier","src":"989:3:62"},"nativeSrc":"989:20:62","nodeType":"YulFunctionCall","src":"989:20:62"}],"functionName":{"name":"mstore","nativeSrc":"979:6:62","nodeType":"YulIdentifier","src":"979:6:62"},"nativeSrc":"979:31:62","nodeType":"YulFunctionCall","src":"979:31:62"},"nativeSrc":"979:31:62","nodeType":"YulExpressionStatement","src":"979:31:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1030:1:62","nodeType":"YulLiteral","src":"1030:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"1033:4:62","nodeType":"YulLiteral","src":"1033:4:62","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1023:6:62","nodeType":"YulIdentifier","src":"1023:6:62"},"nativeSrc":"1023:15:62","nodeType":"YulFunctionCall","src":"1023:15:62"},"nativeSrc":"1023:15:62","nodeType":"YulExpressionStatement","src":"1023:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1058:1:62","nodeType":"YulLiteral","src":"1058:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1061:4:62","nodeType":"YulLiteral","src":"1061:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1051:6:62","nodeType":"YulIdentifier","src":"1051:6:62"},"nativeSrc":"1051:15:62","nodeType":"YulFunctionCall","src":"1051:15:62"},"nativeSrc":"1051:15:62","nodeType":"YulExpressionStatement","src":"1051:15:62"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"921:18:62","nodeType":"YulIdentifier","src":"921:18:62"},{"arguments":[{"name":"length","nativeSrc":"944:6:62","nodeType":"YulIdentifier","src":"944:6:62"},{"kind":"number","nativeSrc":"952:2:62","nodeType":"YulLiteral","src":"952:2:62","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"941:2:62","nodeType":"YulIdentifier","src":"941:2:62"},"nativeSrc":"941:14:62","nodeType":"YulFunctionCall","src":"941:14:62"}],"functionName":{"name":"eq","nativeSrc":"918:2:62","nodeType":"YulIdentifier","src":"918:2:62"},"nativeSrc":"918:38:62","nodeType":"YulFunctionCall","src":"918:38:62"},"nativeSrc":"915:161:62","nodeType":"YulIf","src":"915:161:62"}]},"name":"extract_byte_array_length","nativeSrc":"702:380:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"737:4:62","nodeType":"YulTypedName","src":"737:4:62","type":""}],"returnVariables":[{"name":"length","nativeSrc":"746:6:62","nodeType":"YulTypedName","src":"746:6:62","type":""}],"src":"702:380:62"},{"body":{"nativeSrc":"1143:65:62","nodeType":"YulBlock","src":"1143:65:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1160:1:62","nodeType":"YulLiteral","src":"1160:1:62","type":"","value":"0"},{"name":"ptr","nativeSrc":"1163:3:62","nodeType":"YulIdentifier","src":"1163:3:62"}],"functionName":{"name":"mstore","nativeSrc":"1153:6:62","nodeType":"YulIdentifier","src":"1153:6:62"},"nativeSrc":"1153:14:62","nodeType":"YulFunctionCall","src":"1153:14:62"},"nativeSrc":"1153:14:62","nodeType":"YulExpressionStatement","src":"1153:14:62"},{"nativeSrc":"1176:26:62","nodeType":"YulAssignment","src":"1176:26:62","value":{"arguments":[{"kind":"number","nativeSrc":"1194:1:62","nodeType":"YulLiteral","src":"1194:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1197:4:62","nodeType":"YulLiteral","src":"1197:4:62","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1184:9:62","nodeType":"YulIdentifier","src":"1184:9:62"},"nativeSrc":"1184:18:62","nodeType":"YulFunctionCall","src":"1184:18:62"},"variableNames":[{"name":"data","nativeSrc":"1176:4:62","nodeType":"YulIdentifier","src":"1176:4:62"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"1087:121:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"1126:3:62","nodeType":"YulTypedName","src":"1126:3:62","type":""}],"returnVariables":[{"name":"data","nativeSrc":"1134:4:62","nodeType":"YulTypedName","src":"1134:4:62","type":""}],"src":"1087:121:62"},{"body":{"nativeSrc":"1294:462:62","nodeType":"YulBlock","src":"1294:462:62","statements":[{"body":{"nativeSrc":"1327:423:62","nodeType":"YulBlock","src":"1327:423:62","statements":[{"nativeSrc":"1341:11:62","nodeType":"YulVariableDeclaration","src":"1341:11:62","value":{"kind":"number","nativeSrc":"1351:1:62","nodeType":"YulLiteral","src":"1351:1:62","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"1345:2:62","nodeType":"YulTypedName","src":"1345:2:62","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1372:1:62","nodeType":"YulLiteral","src":"1372:1:62","type":"","value":"0"},{"name":"array","nativeSrc":"1375:5:62","nodeType":"YulIdentifier","src":"1375:5:62"}],"functionName":{"name":"mstore","nativeSrc":"1365:6:62","nodeType":"YulIdentifier","src":"1365:6:62"},"nativeSrc":"1365:16:62","nodeType":"YulFunctionCall","src":"1365:16:62"},"nativeSrc":"1365:16:62","nodeType":"YulExpressionStatement","src":"1365:16:62"},{"nativeSrc":"1394:30:62","nodeType":"YulVariableDeclaration","src":"1394:30:62","value":{"arguments":[{"kind":"number","nativeSrc":"1416:1:62","nodeType":"YulLiteral","src":"1416:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1419:4:62","nodeType":"YulLiteral","src":"1419:4:62","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1406:9:62","nodeType":"YulIdentifier","src":"1406:9:62"},"nativeSrc":"1406:18:62","nodeType":"YulFunctionCall","src":"1406:18:62"},"variables":[{"name":"data","nativeSrc":"1398:4:62","nodeType":"YulTypedName","src":"1398:4:62","type":""}]},{"nativeSrc":"1437:57:62","nodeType":"YulVariableDeclaration","src":"1437:57:62","value":{"arguments":[{"name":"data","nativeSrc":"1460:4:62","nodeType":"YulIdentifier","src":"1460:4:62"},{"arguments":[{"kind":"number","nativeSrc":"1470:1:62","nodeType":"YulLiteral","src":"1470:1:62","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"1477:10:62","nodeType":"YulIdentifier","src":"1477:10:62"},{"kind":"number","nativeSrc":"1489:2:62","nodeType":"YulLiteral","src":"1489:2:62","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1473:3:62","nodeType":"YulIdentifier","src":"1473:3:62"},"nativeSrc":"1473:19:62","nodeType":"YulFunctionCall","src":"1473:19:62"}],"functionName":{"name":"shr","nativeSrc":"1466:3:62","nodeType":"YulIdentifier","src":"1466:3:62"},"nativeSrc":"1466:27:62","nodeType":"YulFunctionCall","src":"1466:27:62"}],"functionName":{"name":"add","nativeSrc":"1456:3:62","nodeType":"YulIdentifier","src":"1456:3:62"},"nativeSrc":"1456:38:62","nodeType":"YulFunctionCall","src":"1456:38:62"},"variables":[{"name":"deleteStart","nativeSrc":"1441:11:62","nodeType":"YulTypedName","src":"1441:11:62","type":""}]},{"body":{"nativeSrc":"1531:23:62","nodeType":"YulBlock","src":"1531:23:62","statements":[{"nativeSrc":"1533:19:62","nodeType":"YulAssignment","src":"1533:19:62","value":{"name":"data","nativeSrc":"1548:4:62","nodeType":"YulIdentifier","src":"1548:4:62"},"variableNames":[{"name":"deleteStart","nativeSrc":"1533:11:62","nodeType":"YulIdentifier","src":"1533:11:62"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"1513:10:62","nodeType":"YulIdentifier","src":"1513:10:62"},{"kind":"number","nativeSrc":"1525:4:62","nodeType":"YulLiteral","src":"1525:4:62","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"1510:2:62","nodeType":"YulIdentifier","src":"1510:2:62"},"nativeSrc":"1510:20:62","nodeType":"YulFunctionCall","src":"1510:20:62"},"nativeSrc":"1507:47:62","nodeType":"YulIf","src":"1507:47:62"},{"nativeSrc":"1567:41:62","nodeType":"YulVariableDeclaration","src":"1567:41:62","value":{"arguments":[{"name":"data","nativeSrc":"1581:4:62","nodeType":"YulIdentifier","src":"1581:4:62"},{"arguments":[{"kind":"number","nativeSrc":"1591:1:62","nodeType":"YulLiteral","src":"1591:1:62","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"1598:3:62","nodeType":"YulIdentifier","src":"1598:3:62"},{"kind":"number","nativeSrc":"1603:2:62","nodeType":"YulLiteral","src":"1603:2:62","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1594:3:62","nodeType":"YulIdentifier","src":"1594:3:62"},"nativeSrc":"1594:12:62","nodeType":"YulFunctionCall","src":"1594:12:62"}],"functionName":{"name":"shr","nativeSrc":"1587:3:62","nodeType":"YulIdentifier","src":"1587:3:62"},"nativeSrc":"1587:20:62","nodeType":"YulFunctionCall","src":"1587:20:62"}],"functionName":{"name":"add","nativeSrc":"1577:3:62","nodeType":"YulIdentifier","src":"1577:3:62"},"nativeSrc":"1577:31:62","nodeType":"YulFunctionCall","src":"1577:31:62"},"variables":[{"name":"_2","nativeSrc":"1571:2:62","nodeType":"YulTypedName","src":"1571:2:62","type":""}]},{"nativeSrc":"1621:24:62","nodeType":"YulVariableDeclaration","src":"1621:24:62","value":{"name":"deleteStart","nativeSrc":"1634:11:62","nodeType":"YulIdentifier","src":"1634:11:62"},"variables":[{"name":"start","nativeSrc":"1625:5:62","nodeType":"YulTypedName","src":"1625:5:62","type":""}]},{"body":{"nativeSrc":"1719:21:62","nodeType":"YulBlock","src":"1719:21:62","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"1728:5:62","nodeType":"YulIdentifier","src":"1728:5:62"},{"name":"_1","nativeSrc":"1735:2:62","nodeType":"YulIdentifier","src":"1735:2:62"}],"functionName":{"name":"sstore","nativeSrc":"1721:6:62","nodeType":"YulIdentifier","src":"1721:6:62"},"nativeSrc":"1721:17:62","nodeType":"YulFunctionCall","src":"1721:17:62"},"nativeSrc":"1721:17:62","nodeType":"YulExpressionStatement","src":"1721:17:62"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"1669:5:62","nodeType":"YulIdentifier","src":"1669:5:62"},{"name":"_2","nativeSrc":"1676:2:62","nodeType":"YulIdentifier","src":"1676:2:62"}],"functionName":{"name":"lt","nativeSrc":"1666:2:62","nodeType":"YulIdentifier","src":"1666:2:62"},"nativeSrc":"1666:13:62","nodeType":"YulFunctionCall","src":"1666:13:62"},"nativeSrc":"1658:82:62","nodeType":"YulForLoop","post":{"nativeSrc":"1680:26:62","nodeType":"YulBlock","src":"1680:26:62","statements":[{"nativeSrc":"1682:22:62","nodeType":"YulAssignment","src":"1682:22:62","value":{"arguments":[{"name":"start","nativeSrc":"1695:5:62","nodeType":"YulIdentifier","src":"1695:5:62"},{"kind":"number","nativeSrc":"1702:1:62","nodeType":"YulLiteral","src":"1702:1:62","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1691:3:62","nodeType":"YulIdentifier","src":"1691:3:62"},"nativeSrc":"1691:13:62","nodeType":"YulFunctionCall","src":"1691:13:62"},"variableNames":[{"name":"start","nativeSrc":"1682:5:62","nodeType":"YulIdentifier","src":"1682:5:62"}]}]},"pre":{"nativeSrc":"1662:3:62","nodeType":"YulBlock","src":"1662:3:62","statements":[]},"src":"1658:82:62"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"1310:3:62","nodeType":"YulIdentifier","src":"1310:3:62"},{"kind":"number","nativeSrc":"1315:2:62","nodeType":"YulLiteral","src":"1315:2:62","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"1307:2:62","nodeType":"YulIdentifier","src":"1307:2:62"},"nativeSrc":"1307:11:62","nodeType":"YulFunctionCall","src":"1307:11:62"},"nativeSrc":"1304:446:62","nodeType":"YulIf","src":"1304:446:62"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"1213:543:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"1266:5:62","nodeType":"YulTypedName","src":"1266:5:62","type":""},{"name":"len","nativeSrc":"1273:3:62","nodeType":"YulTypedName","src":"1273:3:62","type":""},{"name":"startIndex","nativeSrc":"1278:10:62","nodeType":"YulTypedName","src":"1278:10:62","type":""}],"src":"1213:543:62"},{"body":{"nativeSrc":"1846:81:62","nodeType":"YulBlock","src":"1846:81:62","statements":[{"nativeSrc":"1856:65:62","nodeType":"YulAssignment","src":"1856:65:62","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"1871:4:62","nodeType":"YulIdentifier","src":"1871:4:62"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1889:1:62","nodeType":"YulLiteral","src":"1889:1:62","type":"","value":"3"},{"name":"len","nativeSrc":"1892:3:62","nodeType":"YulIdentifier","src":"1892:3:62"}],"functionName":{"name":"shl","nativeSrc":"1885:3:62","nodeType":"YulIdentifier","src":"1885:3:62"},"nativeSrc":"1885:11:62","nodeType":"YulFunctionCall","src":"1885:11:62"},{"arguments":[{"kind":"number","nativeSrc":"1902:1:62","nodeType":"YulLiteral","src":"1902:1:62","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1898:3:62","nodeType":"YulIdentifier","src":"1898:3:62"},"nativeSrc":"1898:6:62","nodeType":"YulFunctionCall","src":"1898:6:62"}],"functionName":{"name":"shr","nativeSrc":"1881:3:62","nodeType":"YulIdentifier","src":"1881:3:62"},"nativeSrc":"1881:24:62","nodeType":"YulFunctionCall","src":"1881:24:62"}],"functionName":{"name":"not","nativeSrc":"1877:3:62","nodeType":"YulIdentifier","src":"1877:3:62"},"nativeSrc":"1877:29:62","nodeType":"YulFunctionCall","src":"1877:29:62"}],"functionName":{"name":"and","nativeSrc":"1867:3:62","nodeType":"YulIdentifier","src":"1867:3:62"},"nativeSrc":"1867:40:62","nodeType":"YulFunctionCall","src":"1867:40:62"},{"arguments":[{"kind":"number","nativeSrc":"1913:1:62","nodeType":"YulLiteral","src":"1913:1:62","type":"","value":"1"},{"name":"len","nativeSrc":"1916:3:62","nodeType":"YulIdentifier","src":"1916:3:62"}],"functionName":{"name":"shl","nativeSrc":"1909:3:62","nodeType":"YulIdentifier","src":"1909:3:62"},"nativeSrc":"1909:11:62","nodeType":"YulFunctionCall","src":"1909:11:62"}],"functionName":{"name":"or","nativeSrc":"1864:2:62","nodeType":"YulIdentifier","src":"1864:2:62"},"nativeSrc":"1864:57:62","nodeType":"YulFunctionCall","src":"1864:57:62"},"variableNames":[{"name":"used","nativeSrc":"1856:4:62","nodeType":"YulIdentifier","src":"1856:4:62"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"1761:166:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1823:4:62","nodeType":"YulTypedName","src":"1823:4:62","type":""},{"name":"len","nativeSrc":"1829:3:62","nodeType":"YulTypedName","src":"1829:3:62","type":""}],"returnVariables":[{"name":"used","nativeSrc":"1837:4:62","nodeType":"YulTypedName","src":"1837:4:62","type":""}],"src":"1761:166:62"},{"body":{"nativeSrc":"2028:1249:62","nodeType":"YulBlock","src":"2028:1249:62","statements":[{"nativeSrc":"2038:24:62","nodeType":"YulVariableDeclaration","src":"2038:24:62","value":{"arguments":[{"name":"src","nativeSrc":"2058:3:62","nodeType":"YulIdentifier","src":"2058:3:62"}],"functionName":{"name":"mload","nativeSrc":"2052:5:62","nodeType":"YulIdentifier","src":"2052:5:62"},"nativeSrc":"2052:10:62","nodeType":"YulFunctionCall","src":"2052:10:62"},"variables":[{"name":"newLen","nativeSrc":"2042:6:62","nodeType":"YulTypedName","src":"2042:6:62","type":""}]},{"body":{"nativeSrc":"2105:22:62","nodeType":"YulBlock","src":"2105:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2107:16:62","nodeType":"YulIdentifier","src":"2107:16:62"},"nativeSrc":"2107:18:62","nodeType":"YulFunctionCall","src":"2107:18:62"},"nativeSrc":"2107:18:62","nodeType":"YulExpressionStatement","src":"2107:18:62"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"2077:6:62","nodeType":"YulIdentifier","src":"2077:6:62"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2093:2:62","nodeType":"YulLiteral","src":"2093:2:62","type":"","value":"64"},{"kind":"number","nativeSrc":"2097:1:62","nodeType":"YulLiteral","src":"2097:1:62","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2089:3:62","nodeType":"YulIdentifier","src":"2089:3:62"},"nativeSrc":"2089:10:62","nodeType":"YulFunctionCall","src":"2089:10:62"},{"kind":"number","nativeSrc":"2101:1:62","nodeType":"YulLiteral","src":"2101:1:62","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2085:3:62","nodeType":"YulIdentifier","src":"2085:3:62"},"nativeSrc":"2085:18:62","nodeType":"YulFunctionCall","src":"2085:18:62"}],"functionName":{"name":"gt","nativeSrc":"2074:2:62","nodeType":"YulIdentifier","src":"2074:2:62"},"nativeSrc":"2074:30:62","nodeType":"YulFunctionCall","src":"2074:30:62"},"nativeSrc":"2071:56:62","nodeType":"YulIf","src":"2071:56:62"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2180:4:62","nodeType":"YulIdentifier","src":"2180:4:62"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"2218:4:62","nodeType":"YulIdentifier","src":"2218:4:62"}],"functionName":{"name":"sload","nativeSrc":"2212:5:62","nodeType":"YulIdentifier","src":"2212:5:62"},"nativeSrc":"2212:11:62","nodeType":"YulFunctionCall","src":"2212:11:62"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"2186:25:62","nodeType":"YulIdentifier","src":"2186:25:62"},"nativeSrc":"2186:38:62","nodeType":"YulFunctionCall","src":"2186:38:62"},{"name":"newLen","nativeSrc":"2226:6:62","nodeType":"YulIdentifier","src":"2226:6:62"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"2136:43:62","nodeType":"YulIdentifier","src":"2136:43:62"},"nativeSrc":"2136:97:62","nodeType":"YulFunctionCall","src":"2136:97:62"},"nativeSrc":"2136:97:62","nodeType":"YulExpressionStatement","src":"2136:97:62"},{"nativeSrc":"2242:18:62","nodeType":"YulVariableDeclaration","src":"2242:18:62","value":{"kind":"number","nativeSrc":"2259:1:62","nodeType":"YulLiteral","src":"2259:1:62","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"2246:9:62","nodeType":"YulTypedName","src":"2246:9:62","type":""}]},{"nativeSrc":"2269:23:62","nodeType":"YulVariableDeclaration","src":"2269:23:62","value":{"kind":"number","nativeSrc":"2288:4:62","nodeType":"YulLiteral","src":"2288:4:62","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"2273:11:62","nodeType":"YulTypedName","src":"2273:11:62","type":""}]},{"nativeSrc":"2301:17:62","nodeType":"YulAssignment","src":"2301:17:62","value":{"kind":"number","nativeSrc":"2314:4:62","nodeType":"YulLiteral","src":"2314:4:62","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"2301:9:62","nodeType":"YulIdentifier","src":"2301:9:62"}]},{"cases":[{"body":{"nativeSrc":"2364:656:62","nodeType":"YulBlock","src":"2364:656:62","statements":[{"nativeSrc":"2378:35:62","nodeType":"YulVariableDeclaration","src":"2378:35:62","value":{"arguments":[{"name":"newLen","nativeSrc":"2397:6:62","nodeType":"YulIdentifier","src":"2397:6:62"},{"arguments":[{"kind":"number","nativeSrc":"2409:2:62","nodeType":"YulLiteral","src":"2409:2:62","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2405:3:62","nodeType":"YulIdentifier","src":"2405:3:62"},"nativeSrc":"2405:7:62","nodeType":"YulFunctionCall","src":"2405:7:62"}],"functionName":{"name":"and","nativeSrc":"2393:3:62","nodeType":"YulIdentifier","src":"2393:3:62"},"nativeSrc":"2393:20:62","nodeType":"YulFunctionCall","src":"2393:20:62"},"variables":[{"name":"loopEnd","nativeSrc":"2382:7:62","nodeType":"YulTypedName","src":"2382:7:62","type":""}]},{"nativeSrc":"2426:49:62","nodeType":"YulVariableDeclaration","src":"2426:49:62","value":{"arguments":[{"name":"slot","nativeSrc":"2470:4:62","nodeType":"YulIdentifier","src":"2470:4:62"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"2440:29:62","nodeType":"YulIdentifier","src":"2440:29:62"},"nativeSrc":"2440:35:62","nodeType":"YulFunctionCall","src":"2440:35:62"},"variables":[{"name":"dstPtr","nativeSrc":"2430:6:62","nodeType":"YulTypedName","src":"2430:6:62","type":""}]},{"nativeSrc":"2488:10:62","nodeType":"YulVariableDeclaration","src":"2488:10:62","value":{"kind":"number","nativeSrc":"2497:1:62","nodeType":"YulLiteral","src":"2497:1:62","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2492:1:62","nodeType":"YulTypedName","src":"2492:1:62","type":""}]},{"body":{"nativeSrc":"2575:172:62","nodeType":"YulBlock","src":"2575:172:62","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2600:6:62","nodeType":"YulIdentifier","src":"2600:6:62"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2618:3:62","nodeType":"YulIdentifier","src":"2618:3:62"},{"name":"srcOffset","nativeSrc":"2623:9:62","nodeType":"YulIdentifier","src":"2623:9:62"}],"functionName":{"name":"add","nativeSrc":"2614:3:62","nodeType":"YulIdentifier","src":"2614:3:62"},"nativeSrc":"2614:19:62","nodeType":"YulFunctionCall","src":"2614:19:62"}],"functionName":{"name":"mload","nativeSrc":"2608:5:62","nodeType":"YulIdentifier","src":"2608:5:62"},"nativeSrc":"2608:26:62","nodeType":"YulFunctionCall","src":"2608:26:62"}],"functionName":{"name":"sstore","nativeSrc":"2593:6:62","nodeType":"YulIdentifier","src":"2593:6:62"},"nativeSrc":"2593:42:62","nodeType":"YulFunctionCall","src":"2593:42:62"},"nativeSrc":"2593:42:62","nodeType":"YulExpressionStatement","src":"2593:42:62"},{"nativeSrc":"2652:24:62","nodeType":"YulAssignment","src":"2652:24:62","value":{"arguments":[{"name":"dstPtr","nativeSrc":"2666:6:62","nodeType":"YulIdentifier","src":"2666:6:62"},{"kind":"number","nativeSrc":"2674:1:62","nodeType":"YulLiteral","src":"2674:1:62","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2662:3:62","nodeType":"YulIdentifier","src":"2662:3:62"},"nativeSrc":"2662:14:62","nodeType":"YulFunctionCall","src":"2662:14:62"},"variableNames":[{"name":"dstPtr","nativeSrc":"2652:6:62","nodeType":"YulIdentifier","src":"2652:6:62"}]},{"nativeSrc":"2693:40:62","nodeType":"YulAssignment","src":"2693:40:62","value":{"arguments":[{"name":"srcOffset","nativeSrc":"2710:9:62","nodeType":"YulIdentifier","src":"2710:9:62"},{"name":"srcOffset_1","nativeSrc":"2721:11:62","nodeType":"YulIdentifier","src":"2721:11:62"}],"functionName":{"name":"add","nativeSrc":"2706:3:62","nodeType":"YulIdentifier","src":"2706:3:62"},"nativeSrc":"2706:27:62","nodeType":"YulFunctionCall","src":"2706:27:62"},"variableNames":[{"name":"srcOffset","nativeSrc":"2693:9:62","nodeType":"YulIdentifier","src":"2693:9:62"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2522:1:62","nodeType":"YulIdentifier","src":"2522:1:62"},{"name":"loopEnd","nativeSrc":"2525:7:62","nodeType":"YulIdentifier","src":"2525:7:62"}],"functionName":{"name":"lt","nativeSrc":"2519:2:62","nodeType":"YulIdentifier","src":"2519:2:62"},"nativeSrc":"2519:14:62","nodeType":"YulFunctionCall","src":"2519:14:62"},"nativeSrc":"2511:236:62","nodeType":"YulForLoop","post":{"nativeSrc":"2534:28:62","nodeType":"YulBlock","src":"2534:28:62","statements":[{"nativeSrc":"2536:24:62","nodeType":"YulAssignment","src":"2536:24:62","value":{"arguments":[{"name":"i","nativeSrc":"2545:1:62","nodeType":"YulIdentifier","src":"2545:1:62"},{"name":"srcOffset_1","nativeSrc":"2548:11:62","nodeType":"YulIdentifier","src":"2548:11:62"}],"functionName":{"name":"add","nativeSrc":"2541:3:62","nodeType":"YulIdentifier","src":"2541:3:62"},"nativeSrc":"2541:19:62","nodeType":"YulFunctionCall","src":"2541:19:62"},"variableNames":[{"name":"i","nativeSrc":"2536:1:62","nodeType":"YulIdentifier","src":"2536:1:62"}]}]},"pre":{"nativeSrc":"2515:3:62","nodeType":"YulBlock","src":"2515:3:62","statements":[]},"src":"2511:236:62"},{"body":{"nativeSrc":"2795:166:62","nodeType":"YulBlock","src":"2795:166:62","statements":[{"nativeSrc":"2813:43:62","nodeType":"YulVariableDeclaration","src":"2813:43:62","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2840:3:62","nodeType":"YulIdentifier","src":"2840:3:62"},{"name":"srcOffset","nativeSrc":"2845:9:62","nodeType":"YulIdentifier","src":"2845:9:62"}],"functionName":{"name":"add","nativeSrc":"2836:3:62","nodeType":"YulIdentifier","src":"2836:3:62"},"nativeSrc":"2836:19:62","nodeType":"YulFunctionCall","src":"2836:19:62"}],"functionName":{"name":"mload","nativeSrc":"2830:5:62","nodeType":"YulIdentifier","src":"2830:5:62"},"nativeSrc":"2830:26:62","nodeType":"YulFunctionCall","src":"2830:26:62"},"variables":[{"name":"lastValue","nativeSrc":"2817:9:62","nodeType":"YulTypedName","src":"2817:9:62","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2880:6:62","nodeType":"YulIdentifier","src":"2880:6:62"},{"arguments":[{"name":"lastValue","nativeSrc":"2892:9:62","nodeType":"YulIdentifier","src":"2892:9:62"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2919:1:62","nodeType":"YulLiteral","src":"2919:1:62","type":"","value":"3"},{"name":"newLen","nativeSrc":"2922:6:62","nodeType":"YulIdentifier","src":"2922:6:62"}],"functionName":{"name":"shl","nativeSrc":"2915:3:62","nodeType":"YulIdentifier","src":"2915:3:62"},"nativeSrc":"2915:14:62","nodeType":"YulFunctionCall","src":"2915:14:62"},{"kind":"number","nativeSrc":"2931:3:62","nodeType":"YulLiteral","src":"2931:3:62","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"2911:3:62","nodeType":"YulIdentifier","src":"2911:3:62"},"nativeSrc":"2911:24:62","nodeType":"YulFunctionCall","src":"2911:24:62"},{"arguments":[{"kind":"number","nativeSrc":"2941:1:62","nodeType":"YulLiteral","src":"2941:1:62","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2937:3:62","nodeType":"YulIdentifier","src":"2937:3:62"},"nativeSrc":"2937:6:62","nodeType":"YulFunctionCall","src":"2937:6:62"}],"functionName":{"name":"shr","nativeSrc":"2907:3:62","nodeType":"YulIdentifier","src":"2907:3:62"},"nativeSrc":"2907:37:62","nodeType":"YulFunctionCall","src":"2907:37:62"}],"functionName":{"name":"not","nativeSrc":"2903:3:62","nodeType":"YulIdentifier","src":"2903:3:62"},"nativeSrc":"2903:42:62","nodeType":"YulFunctionCall","src":"2903:42:62"}],"functionName":{"name":"and","nativeSrc":"2888:3:62","nodeType":"YulIdentifier","src":"2888:3:62"},"nativeSrc":"2888:58:62","nodeType":"YulFunctionCall","src":"2888:58:62"}],"functionName":{"name":"sstore","nativeSrc":"2873:6:62","nodeType":"YulIdentifier","src":"2873:6:62"},"nativeSrc":"2873:74:62","nodeType":"YulFunctionCall","src":"2873:74:62"},"nativeSrc":"2873:74:62","nodeType":"YulExpressionStatement","src":"2873:74:62"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"2766:7:62","nodeType":"YulIdentifier","src":"2766:7:62"},{"name":"newLen","nativeSrc":"2775:6:62","nodeType":"YulIdentifier","src":"2775:6:62"}],"functionName":{"name":"lt","nativeSrc":"2763:2:62","nodeType":"YulIdentifier","src":"2763:2:62"},"nativeSrc":"2763:19:62","nodeType":"YulFunctionCall","src":"2763:19:62"},"nativeSrc":"2760:201:62","nodeType":"YulIf","src":"2760:201:62"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2981:4:62","nodeType":"YulIdentifier","src":"2981:4:62"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2995:1:62","nodeType":"YulLiteral","src":"2995:1:62","type":"","value":"1"},{"name":"newLen","nativeSrc":"2998:6:62","nodeType":"YulIdentifier","src":"2998:6:62"}],"functionName":{"name":"shl","nativeSrc":"2991:3:62","nodeType":"YulIdentifier","src":"2991:3:62"},"nativeSrc":"2991:14:62","nodeType":"YulFunctionCall","src":"2991:14:62"},{"kind":"number","nativeSrc":"3007:1:62","nodeType":"YulLiteral","src":"3007:1:62","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2987:3:62","nodeType":"YulIdentifier","src":"2987:3:62"},"nativeSrc":"2987:22:62","nodeType":"YulFunctionCall","src":"2987:22:62"}],"functionName":{"name":"sstore","nativeSrc":"2974:6:62","nodeType":"YulIdentifier","src":"2974:6:62"},"nativeSrc":"2974:36:62","nodeType":"YulFunctionCall","src":"2974:36:62"},"nativeSrc":"2974:36:62","nodeType":"YulExpressionStatement","src":"2974:36:62"}]},"nativeSrc":"2357:663:62","nodeType":"YulCase","src":"2357:663:62","value":{"kind":"number","nativeSrc":"2362:1:62","nodeType":"YulLiteral","src":"2362:1:62","type":"","value":"1"}},{"body":{"nativeSrc":"3037:234:62","nodeType":"YulBlock","src":"3037:234:62","statements":[{"nativeSrc":"3051:14:62","nodeType":"YulVariableDeclaration","src":"3051:14:62","value":{"kind":"number","nativeSrc":"3064:1:62","nodeType":"YulLiteral","src":"3064:1:62","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3055:5:62","nodeType":"YulTypedName","src":"3055:5:62","type":""}]},{"body":{"nativeSrc":"3100:67:62","nodeType":"YulBlock","src":"3100:67:62","statements":[{"nativeSrc":"3118:35:62","nodeType":"YulAssignment","src":"3118:35:62","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"3137:3:62","nodeType":"YulIdentifier","src":"3137:3:62"},{"name":"srcOffset","nativeSrc":"3142:9:62","nodeType":"YulIdentifier","src":"3142:9:62"}],"functionName":{"name":"add","nativeSrc":"3133:3:62","nodeType":"YulIdentifier","src":"3133:3:62"},"nativeSrc":"3133:19:62","nodeType":"YulFunctionCall","src":"3133:19:62"}],"functionName":{"name":"mload","nativeSrc":"3127:5:62","nodeType":"YulIdentifier","src":"3127:5:62"},"nativeSrc":"3127:26:62","nodeType":"YulFunctionCall","src":"3127:26:62"},"variableNames":[{"name":"value","nativeSrc":"3118:5:62","nodeType":"YulIdentifier","src":"3118:5:62"}]}]},"condition":{"name":"newLen","nativeSrc":"3081:6:62","nodeType":"YulIdentifier","src":"3081:6:62"},"nativeSrc":"3078:89:62","nodeType":"YulIf","src":"3078:89:62"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3187:4:62","nodeType":"YulIdentifier","src":"3187:4:62"},{"arguments":[{"name":"value","nativeSrc":"3246:5:62","nodeType":"YulIdentifier","src":"3246:5:62"},{"name":"newLen","nativeSrc":"3253:6:62","nodeType":"YulIdentifier","src":"3253:6:62"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3193:52:62","nodeType":"YulIdentifier","src":"3193:52:62"},"nativeSrc":"3193:67:62","nodeType":"YulFunctionCall","src":"3193:67:62"}],"functionName":{"name":"sstore","nativeSrc":"3180:6:62","nodeType":"YulIdentifier","src":"3180:6:62"},"nativeSrc":"3180:81:62","nodeType":"YulFunctionCall","src":"3180:81:62"},"nativeSrc":"3180:81:62","nodeType":"YulExpressionStatement","src":"3180:81:62"}]},"nativeSrc":"3029:242:62","nodeType":"YulCase","src":"3029:242:62","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"2337:6:62","nodeType":"YulIdentifier","src":"2337:6:62"},{"kind":"number","nativeSrc":"2345:2:62","nodeType":"YulLiteral","src":"2345:2:62","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"2334:2:62","nodeType":"YulIdentifier","src":"2334:2:62"},"nativeSrc":"2334:14:62","nodeType":"YulFunctionCall","src":"2334:14:62"},"nativeSrc":"2327:944:62","nodeType":"YulSwitch","src":"2327:944:62"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"1932:1345:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"2013:4:62","nodeType":"YulTypedName","src":"2013:4:62","type":""},{"name":"src","nativeSrc":"2019:3:62","nodeType":"YulTypedName","src":"2019:3:62","type":""}],"src":"1932:1345:62"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_ITokenMetadataResolver_$3700_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620027eb380380620027eb8339810160408190526200003491620002e5565b60405180604001604052806011815260200170109bdb991a5b99c810dd5c9d9948139195607a1b815250604051806040016040528060058152602001641090d3919560da1b815250826200008d620000e760201b60201c565b620000a3816200009c620000eb565b9062000121565b50620000ae6200019c565b620000c8838383620000bf620001b6565b929190620001e6565b620000d26200022d565b50620000e091505062000245565b50620004ac565b3390565b6000806200011b60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000317565b92915050565b6001600160a01b03811615620001785781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001986307f5828d60e41b60016200019062000258565b919062000288565b5050565b620001b46380ac58cd60e01b60016200019062000258565b565b6000806200011b60017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a562000317565b83620001f38482620003e0565b5060018401620002048382620003e0565b5060029390930180546001600160a01b0319166001600160a01b03909416939093179092555050565b620001b4635b5e139f60e01b60016200019062000258565b620001b4638e773e1360e01b6001620001905b6000806200011b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000317565b600160e01b6001600160e01b0319831601620002b7576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600060208284031215620002f857600080fd5b81516001600160a01b03811681146200031057600080fd5b9392505050565b818103818111156200011b57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200036457607f821691505b6020821081036200038557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003db576000816000526020600020601f850160051c81016020861015620003b65750805b601f850160051c820191505b81811015620003d757828155600101620003c2565b5050505b505050565b81516001600160401b03811115620003fc57620003fc62000339565b62000414816200040d84546200034f565b846200038b565b602080601f8311600181146200044c5760008415620004335750858301515b600019600386901b1c1916600185901b178555620003d7565b600085815260208120601f198616915b828110156200047d578886015182559484019460019091019084016200045c565b50858210156200049c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61232f80620004bc6000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638bb9c5bf116100ee578063b88d4fde11610097578063d539139311610071578063d539139314610362578063d547741f14610389578063e985e9c51461039c578063f2fde38b146103af57600080fd5b8063b88d4fde14610329578063c77c69551461033c578063c87b56dd1461034f57600080fd5b806395d89b41116100c857806395d89b4114610306578063a0c76f621461030e578063a22cb4651461031657600080fd5b80638bb9c5bf146102d85780638da5cb5b146102eb57806391d14854146102f357600080fd5b806340c10f19116101505780636352211e1161012a5780636352211e1461029157806370a08231146102a45780638832e6e3146102c557600080fd5b806340c10f191461025857806342842e0e1461026b5780634684d7e91461027e57600080fd5b8063095ea7b311610181578063095ea7b31461021d57806323b872dd146102325780632f2ff15d1461024557600080fd5b806301ffc9a7146101a857806306fdde03146101d0578063081812fc146101e5575b600080fd5b6101bb6101b6366004611d52565b6103c2565b60405190151581526020015b60405180910390f35b6101d86103dc565b6040516101c79190611ddd565b6101f86101f3366004611df0565b6103eb565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c7565b61023061022b366004611e32565b6103ff565b005b610230610240366004611e5c565b610419565b610230610253366004611e98565b610436565b610230610266366004611e32565b61045f565b610230610279366004611e5c565b6104a8565b61023061028c366004611ec4565b6104c0565b6101f861029f366004611df0565b610532565b6102b76102b2366004611f4a565b610546565b6040519081526020016101c7565b6102306102d3366004611fae565b61055a565b6102306102e6366004611df0565b6105d9565b6101f86105f0565b6101bb610301366004611e98565b610617565b6101d8610662565b6101f861066c565b610230610324366004612008565b610696565b610230610337366004612044565b6106ac565b6101bb61034a366004611df0565b6106cf565b6101d861035d366004611df0565b6106e3565b6102b77f6d696e746572000000000000000000000000000000000000000000000000000081565b610230610397366004611e98565b610706565b6101bb6103aa3660046120b3565b610729565b6102306103bd366004611f4a565b610777565b60006103d6826103d061078b565b906107b9565b92915050565b60606103e6610893565b905090565b60006103d6826103f96108a5565b906108d3565b61041533838361040d6108a5565b92919061098c565b5050565b610431338484846104286108a5565b93929190610c07565b505050565b3361044981610443610ee5565b90610f13565b610431838383610457610f7e565b929190610fac565b6104947f6d696e7465720000000000000000000000000000000000000000000000000000335b61048d610f7e565b9190611082565b61041582826104a16108a5565b9190611108565b610431338484846104b76108a5565b93929190611280565b6104ea7f6d696e746572000000000000000000000000000000000000000000000000000033610485565b6104318383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061052b92506108a5915050565b91906112c6565b60006103d6826105406108a5565b90611492565b60006103d6826105546108a5565b906114fb565b6105847f6d696e746572000000000000000000000000000000000000000000000000000033610485565b6105d333858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105ca92506108a5915050565b93929190611577565b50505050565b6105ed33826105e6610f7e565b91906115ad565b50565b60006103e66105fd610ee5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b600061065b8383610626610f7e565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606103e6611651565b60006103e6610679611663565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6104153383836106a46108a5565b929190611691565b6106c83386868686866106bd6108a5565b9594939291906117a9565b5050505050565b60006103d6826106dd6108a5565b9061181f565b60606106f1826105406108a5565b506103d630836106ff611663565b9190611855565b3361071381610443610ee5565b610431838383610721610f7e565b929190611915565b600061065b83836107386108a5565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6105ed3382610784610ee5565b91906119df565b6000806103d660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6120dd565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610809575060006103d6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161085a575060016103d6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606103e66108a0611663565b611af3565b6000806103d660017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16120dd565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610937576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610982575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166103d6565b60009150506103d6565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff81166109eb576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610a56576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161092e565b610a61868287611b89565b610abe576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152821660248201526044810184905260640161092e565b73ffffffffffffffffffffffffffffffffffffffff8416610b235774010000000000000000000000000000000000000000821615610b1e57600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b610ba4565b740100000000000000000000000000000000000000008217808314610b545760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216610c54576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff8116610cb3576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff1614610d37576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810183905260440161092e565b610d42868587611b89565b610df1577401000000000000000000000000000000000000000081161580610d935750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b15610df1576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260640161092e565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff80851691829055851614610e825773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806103d660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6120dd565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610415576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161092e565b6000806103d660017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236120dd565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166105d35760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610431576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216602482015260440161092e565b73ffffffffffffffffffffffffffffffffffffffff8216611155576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff8116156111b5576040517f753eceac0000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b7fdead0000000000000000000000000000000000000000000000000000000000008103611211576040517f31e8d3d50000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b60008281526020858152604080832073ffffffffffffffffffffffffffffffffffffffff87169081905580845260018089019093528184208054909301909255518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b61128d8585858585610c07565b73ffffffffffffffffffffffffffffffffffffffff82163b156106c8576106c88484848460405180602001604052806000815250611bfe565b73ffffffffffffffffffffffffffffffffffffffff8216611313576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160005b8181101561145d57600083828151811061133457611334612117565b60209081029190910181015160008181529188905260409091205490915073ffffffffffffffffffffffffffffffffffffffff8116156113a3576040517f753eceac0000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b7fdead00000000000000000000000000000000000000000000000000000000000081036113ff576040517f31e8d3d50000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b60008281526020889052604080822073ffffffffffffffffffffffffffffffffffffffff89169081905590518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050600101611318565b5073ffffffffffffffffffffffffffffffffffffffff9092166000908152600190930160205250604090912080549091019055565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166114f1576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810184905260240161092e565b805b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff821661154a576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b611582858484611108565b73ffffffffffffffffffffffffffffffffffffffff83163b156106c8576106c8846000858585611bfe565b6115b8838284611082565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606103e661165e611663565b611d13565b6000806103d660017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56120dd565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361170e576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161092e565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6117b68787878787610c07565b73ffffffffffffffffffffffffffffffffffffffff84163b15611816576118168686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bfe92505050565b50505050505050565b6000818152602083905260408120547fdead0000000000000000000000000000000000000000000000000000000000001461065b565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa1580156118cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114f39190810190612175565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156105d35760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611074565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611a4c576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161092e565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d35783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611b0490612240565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3090612240565b8015611b7d5780601f10611b5257610100808354040283529160200191611b7d565b820191906000526020600020905b815481529060010190602001808311611b6057829003601f168201915b50505050509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806114f357505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611c58908990899088908890600401612293565b6020604051808303816000875af1158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b91906122dc565b7fffffffff0000000000000000000000000000000000000000000000000000000016146106c8576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024810183905260440161092e565b6060816001018054611b0490612240565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146105ed57600080fd5b600060208284031215611d6457600080fd5b813561065b81611d24565b60005b83811015611d8a578181015183820152602001611d72565b50506000910152565b60008151808452611dab816020860160208601611d6f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061065b6020830184611d93565b600060208284031215611e0257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e2d57600080fd5b919050565b60008060408385031215611e4557600080fd5b611e4e83611e09565b946020939093013593505050565b600080600060608486031215611e7157600080fd5b611e7a84611e09565b9250611e8860208501611e09565b9150604084013590509250925092565b60008060408385031215611eab57600080fd5b82359150611ebb60208401611e09565b90509250929050565b600080600060408486031215611ed957600080fd5b611ee284611e09565b9250602084013567ffffffffffffffff80821115611eff57600080fd5b818601915086601f830112611f1357600080fd5b813581811115611f2257600080fd5b8760208260051b8501011115611f3757600080fd5b6020830194508093505050509250925092565b600060208284031215611f5c57600080fd5b61065b82611e09565b60008083601f840112611f7757600080fd5b50813567ffffffffffffffff811115611f8f57600080fd5b602083019150836020828501011115611fa757600080fd5b9250929050565b60008060008060608587031215611fc457600080fd5b611fcd85611e09565b935060208501359250604085013567ffffffffffffffff811115611ff057600080fd5b611ffc87828801611f65565b95989497509550505050565b6000806040838503121561201b57600080fd5b61202483611e09565b91506020830135801515811461203957600080fd5b809150509250929050565b60008060008060006080868803121561205c57600080fd5b61206586611e09565b945061207360208701611e09565b935060408601359250606086013567ffffffffffffffff81111561209657600080fd5b6120a288828901611f65565b969995985093965092949392505050565b600080604083850312156120c657600080fd5b6120cf83611e09565b9150611ebb60208401611e09565b818103818111156103d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561218757600080fd5b815167ffffffffffffffff8082111561219f57600080fd5b818401915084601f8301126121b357600080fd5b8151818111156121c5576121c5612146565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561220b5761220b612146565b8160405282815287602084870101111561222457600080fd5b612235836020830160208801611d6f565b979650505050505050565b600181811c9082168061225457607f821691505b60208210810361228d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526122d26080830184611d93565b9695505050505050565b6000602082840312156122ee57600080fd5b815161065b81611d2456fea264697066735822122025f93236fafa111f4b38de8a00dcce2b7702fdabe0ed8c67993f39ddc5942f8864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x27EB CODESIZE SUB DUP1 PUSH3 0x27EB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH17 0x109BDB991A5B99C810DD5C9D9948139195 PUSH1 0x7A SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x1090D39195 PUSH1 0xDA SHL DUP2 MSTORE POP DUP3 PUSH3 0x8D PUSH3 0xE7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xA3 DUP2 PUSH3 0x9C PUSH3 0xEB JUMP JUMPDEST SWAP1 PUSH3 0x121 JUMP JUMPDEST POP PUSH3 0xAE PUSH3 0x19C JUMP JUMPDEST PUSH3 0xC8 DUP4 DUP4 DUP4 PUSH3 0xBF PUSH3 0x1B6 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH3 0x1E6 JUMP JUMPDEST PUSH3 0xD2 PUSH3 0x22D JUMP JUMPDEST POP PUSH3 0xE0 SWAP2 POP POP PUSH3 0x245 JUMP JUMPDEST POP PUSH3 0x4AC JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11B PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x317 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x178 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x198 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x190 PUSH3 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x288 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x1B4 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x190 PUSH3 0x258 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11B PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH3 0x317 JUMP JUMPDEST DUP4 PUSH3 0x1F3 DUP5 DUP3 PUSH3 0x3E0 JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH3 0x204 DUP4 DUP3 PUSH3 0x3E0 JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH3 0x1B4 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x190 PUSH3 0x258 JUMP JUMPDEST PUSH3 0x1B4 PUSH4 0x8E773E13 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x190 JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x2B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x11B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x364 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x385 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x3DB JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x3B6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3D7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3C2 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3FC JUMPI PUSH3 0x3FC PUSH3 0x339 JUMP JUMPDEST PUSH3 0x414 DUP2 PUSH3 0x40D DUP5 SLOAD PUSH3 0x34F JUMP JUMPDEST DUP5 PUSH3 0x38B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x44C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x433 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x3D7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x47D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x45C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x49C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x232F DUP1 PUSH3 0x4BC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0xC77C6955 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x8832E6E3 EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x4684D7E9 EQ PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1E5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D52 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D8 PUSH2 0x3DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x3EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E5C JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x436 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH2 0x230 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E5C JUMP JUMPDEST PUSH2 0x4A8 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC4 JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x532 JUMP JUMPDEST PUSH2 0x2B7 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FAE JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x230 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x5F0 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x662 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x66C JUMP JUMPDEST PUSH2 0x230 PUSH2 0x324 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x696 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x34A CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x6CF JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0x2B7 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x397 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x729 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x3BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x3D0 PUSH2 0x78B JUMP JUMPDEST SWAP1 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x893 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x3F9 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH2 0x415 CALLER DUP4 DUP4 PUSH2 0x40D PUSH2 0x8A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x98C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP5 DUP5 DUP5 PUSH2 0x428 PUSH2 0x8A5 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH2 0x449 DUP2 PUSH2 0x443 PUSH2 0xEE5 JUMP JUMPDEST SWAP1 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 PUSH2 0x457 PUSH2 0xF7E JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xFAC JUMP JUMPDEST PUSH2 0x494 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER JUMPDEST PUSH2 0x48D PUSH2 0xF7E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x415 DUP3 DUP3 PUSH2 0x4A1 PUSH2 0x8A5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x431 CALLER DUP5 DUP5 DUP5 PUSH2 0x4B7 PUSH2 0x8A5 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x4EA PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x485 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x52B SWAP3 POP PUSH2 0x8A5 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x540 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x554 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x14FB JUMP JUMPDEST PUSH2 0x584 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x485 JUMP JUMPDEST PUSH2 0x5D3 CALLER DUP6 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x5CA SWAP3 POP PUSH2 0x8A5 SWAP2 POP POP JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1577 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5ED CALLER DUP3 PUSH2 0x5E6 PUSH2 0xF7E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x15AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x5FD PUSH2 0xEE5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP4 DUP4 PUSH2 0x626 PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x1651 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x679 PUSH2 0x1663 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x415 CALLER DUP4 DUP4 PUSH2 0x6A4 PUSH2 0x8A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x6C8 CALLER DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x6BD PUSH2 0x8A5 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17A9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x6DD PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6F1 DUP3 PUSH2 0x540 PUSH2 0x8A5 JUMP JUMPDEST POP PUSH2 0x3D6 ADDRESS DUP4 PUSH2 0x6FF PUSH2 0x1663 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1855 JUMP JUMPDEST CALLER PUSH2 0x713 DUP2 PUSH2 0x443 PUSH2 0xEE5 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 PUSH2 0x721 PUSH2 0xF7E JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP4 DUP4 PUSH2 0x738 PUSH2 0x8A5 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x5ED CALLER DUP3 PUSH2 0x784 PUSH2 0xEE5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x809 JUMPI POP PUSH1 0x0 PUSH2 0x3D6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x85A JUMPI POP PUSH1 0x1 PUSH2 0x3D6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x8A0 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x982 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9EB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0xA61 DUP7 DUP3 DUP8 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0xABE JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xB23 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0xBA4 JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xB54 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0xC54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xCB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0xD42 DUP7 DUP6 DUP8 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0xDF1 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0xD93 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xDF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0xE82 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x20DD JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x11B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x1211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x31E8D3D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP10 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP5 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0x128D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xC07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x6C8 JUMPI PUSH2 0x6C8 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1BFE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1313 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x145D JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x31E8D3D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD DUP5 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP PUSH1 0x1 ADD PUSH2 0x1318 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x14F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x154A JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1582 DUP6 DUP5 DUP5 PUSH2 0x1108 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND EXTCODESIZE ISZERO PUSH2 0x6C8 JUMPI PUSH2 0x6C8 DUP5 PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0x1BFE JUMP JUMPDEST PUSH2 0x15B8 DUP4 DUP3 DUP5 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x165E PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x20DD JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x170E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x17B6 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xC07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1816 JUMPI PUSH2 0x1816 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1BFE SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x65B JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x14F3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1074 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D3 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1B04 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1B30 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B7D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1B52 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B7D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B60 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x14F3 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1C58 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2293 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C9B SWAP2 SWAP1 PUSH2 0x22DC JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x6C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1B04 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x65B DUP2 PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D8A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D72 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1DAB DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x65B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1E2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E4E DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7A DUP5 PUSH2 0x1E09 JUMP JUMPDEST SWAP3 POP PUSH2 0x1E88 PUSH1 0x20 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1EBB PUSH1 0x20 DUP5 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE2 DUP5 PUSH2 0x1E09 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x65B DUP3 PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1F77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1FC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FCD DUP6 PUSH2 0x1E09 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FFC DUP8 DUP3 DUP9 ADD PUSH2 0x1F65 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x201B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2024 DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x205C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2065 DUP7 PUSH2 0x1E09 JUMP JUMPDEST SWAP5 POP PUSH2 0x2073 PUSH1 0x20 DUP8 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20A2 DUP9 DUP3 DUP10 ADD PUSH2 0x1F65 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20CF DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EBB PUSH1 0x20 DUP5 ADD PUSH2 0x1E09 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x219F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x21C5 JUMPI PUSH2 0x21C5 PUSH2 0x2146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x220B JUMPI PUSH2 0x220B PUSH2 0x2146 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2235 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1D6F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2254 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x228D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x22D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D93 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x65B DUP2 PUSH2 0x1D24 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xF9 ORIGIN CALLDATASIZE STATICCALL STATICCALL GT 0x1F 0x4B CODESIZE 0xDE DUP11 STOP 0xDC 0xCE 0x2B PUSH24 0x2FDABE0ED8C67993F39DDC5942F8864736F6C6343000818 STOP CALLER ","sourceMap":"590:282:47:-:0;;;676:194;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1034:233:21;;;;;;;;;;;;;-1:-1:-1;;;1034:233:21;;;;;;;;;;;;;;;;-1:-1:-1;;;1034:233:21;;;829:16:47;761:12;:10;;;:12;;:::i;:::-;1008:63:2;1058:12;1008:33;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;582:20:20;:18;:20::i;:::-;1139:77:21;1185:4;1191:6;1199:16;1139:29;:27;:29::i;:::-;:45;:77;;:45;:77::i;:::-;1226:34;:32;:34::i;:::-;-1:-1:-1;732:34:22;;-1:-1:-1;;732:32:22;:34::i;:::-;676:194:47;590:282;;655:96:45;734:10;;655:96::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:13:o;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;2530:131:37:-;2565:89;-1:-1:-1;;;2649:4:37;2565:34;:32;:34::i;:89::-;2530:131::o;3441:174:40:-;3482:16;;456:70;525:1;464:57;456:70;:::i;1021:322::-;1219:1;:23;1233:9;1219:1;:23;:::i;:::-;-1:-1:-1;1252:13:40;;;:27;1268:11;1252:13;:27;:::i;:::-;-1:-1:-1;1289:23:40;;;;;:47;;-1:-1:-1;;;;;;1289:47:40;-1:-1:-1;;;;;1289:47:40;;;;;;;;;;-1:-1:-1;;1021:322:40:o;3013:153:37:-;3062:97;-1:-1:-1;;;3154:4:37;3062:34;:32;:34::i;3258:153::-;3307:97;-1:-1:-1;;;3399:4:37;3307:34;1705:174:17;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:321:62:-;115:6;168:2;156:9;147:7;143:23;139:32;136:52;;;184:1;181;174:12;136:52;210:16;;-1:-1:-1;;;;;255:31:62;;245:42;;235:70;;301:1;298;291:12;235:70;324:5;14:321;-1:-1:-1;;;14:321:62:o;340:225::-;407:9;;;428:11;;;425:134;;;481:10;476:3;472:20;469:1;462:31;516:4;513:1;506:15;544:4;541:1;534:15;570:127;631:10;626:3;622:20;619:1;612:31;662:4;659:1;652:15;686:4;683:1;676:15;702:380;781:1;777:12;;;;824;;;845:61;;899:4;891:6;887:17;877:27;;845:61;952:2;944:6;941:14;921:18;918:38;915:161;;998:10;993:3;989:20;986:1;979:31;1033:4;1030:1;1023:15;1061:4;1058:1;1051:15;915:161;;702:380;;;:::o;1213:543::-;1315:2;1310:3;1307:11;1304:446;;;1351:1;1375:5;1372:1;1365:16;1419:4;1416:1;1406:18;1489:2;1477:10;1473:19;1470:1;1466:27;1460:4;1456:38;1525:4;1513:10;1510:20;1507:47;;;-1:-1:-1;1548:4:62;1507:47;1603:2;1598:3;1594:12;1591:1;1587:20;1581:4;1577:31;1567:41;;1658:82;1676:2;1669:5;1666:13;1658:82;;;1721:17;;;1702:1;1691:13;1658:82;;;1662:3;;;1304:446;1213:543;;;:::o;1932:1345::-;2052:10;;-1:-1:-1;;;;;2074:30:62;;2071:56;;;2107:18;;:::i;:::-;2136:97;2226:6;2186:38;2218:4;2212:11;2186:38;:::i;:::-;2180:4;2136:97;:::i;:::-;2288:4;;2345:2;2334:14;;2362:1;2357:663;;;;3064:1;3081:6;3078:89;;;-1:-1:-1;3133:19:62;;;3127:26;3078:89;-1:-1:-1;;1889:1:62;1885:11;;;1881:24;1877:29;1867:40;1913:1;1909:11;;;1864:57;3180:81;;2327:944;;2357:663;1160:1;1153:14;;;1197:4;1184:18;;-1:-1:-1;;2393:20:62;;;2511:236;2525:7;2522:1;2519:14;2511:236;;;2614:19;;;2608:26;2593:42;;2706:27;;;;2674:1;2662:14;;;;2541:19;;2511:236;;;2515:3;2775:6;2766:7;2763:19;2760:201;;;2836:19;;;2830:26;-1:-1:-1;;2919:1:62;2915:14;;;2931:3;2911:24;2907:37;2903:42;2888:58;2873:74;;2760:201;-1:-1:-1;;;;;3007:1:62;2991:14;;;2987:22;2974:36;;-1:-1:-1;1932:1345:62:o;:::-;590:282:47;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINTER_ROLE_1462":{"entryPoint":null,"id":1462,"parameterSlots":0,"returnSlots":0},"@_callOnERC721Received_3550":{"entryPoint":7166,"id":3550,"parameterSlots":5,"returnSlots":0},"@_isOperatable_3576":{"entryPoint":7049,"id":3576,"parameterSlots":3,"returnSlots":1},"@_msgSender_4719":{"entryPoint":null,"id":4719,"parameterSlots":0,"returnSlots":1},"@_tokenExists_3607":{"entryPoint":null,"id":3607,"parameterSlots":1,"returnSlots":1},"@_tokenHasApproval_3633":{"entryPoint":null,"id":3633,"parameterSlots":1,"returnSlots":1},"@_tokenOwner_3592":{"entryPoint":null,"id":3592,"parameterSlots":1,"returnSlots":1},"@_tokenWasBurnt_3619":{"entryPoint":null,"id":3619,"parameterSlots":1,"returnSlots":1},"@approve_1196":{"entryPoint":1023,"id":1196,"parameterSlots":2,"returnSlots":0},"@approve_2196":{"entryPoint":2444,"id":2196,"parameterSlots":4,"returnSlots":0},"@balanceOf_1304":{"entryPoint":1350,"id":1304,"parameterSlots":1,"returnSlots":1},"@balanceOf_3390":{"entryPoint":5371,"id":3390,"parameterSlots":2,"returnSlots":1},"@batchMintOnce_3034":{"entryPoint":4806,"id":3034,"parameterSlots":3,"returnSlots":0},"@batchMint_1552":{"entryPoint":1216,"id":1552,"parameterSlots":3,"returnSlots":0},"@enforceHasRole_567":{"entryPoint":4226,"id":567,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_829":{"entryPoint":3859,"id":829,"parameterSlots":2,"returnSlots":0},"@getApproved_1336":{"entryPoint":1003,"id":1336,"parameterSlots":1,"returnSlots":1},"@getApproved_3466":{"entryPoint":2259,"id":3466,"parameterSlots":2,"returnSlots":1},"@grantRole_110":{"entryPoint":1078,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_420":{"entryPoint":4012,"id":420,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":1559,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_513":{"entryPoint":null,"id":513,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_1355":{"entryPoint":1833,"id":1355,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_3487":{"entryPoint":null,"id":3487,"parameterSlots":3,"returnSlots":1},"@isContract_4395":{"entryPoint":null,"id":4395,"parameterSlots":1,"returnSlots":1},"@layout_1009":{"entryPoint":1931,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_3518":{"entryPoint":2213,"id":3518,"parameterSlots":0,"returnSlots":1},"@layout_3886":{"entryPoint":5731,"id":3886,"parameterSlots":0,"returnSlots":1},"@layout_603":{"entryPoint":3966,"id":603,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":3813,"id":861,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3685":{"entryPoint":1644,"id":3685,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3853":{"entryPoint":null,"id":3853,"parameterSlots":1,"returnSlots":1},"@mintOnce_2895":{"entryPoint":4360,"id":2895,"parameterSlots":3,"returnSlots":0},"@mint_1490":{"entryPoint":1119,"id":1490,"parameterSlots":2,"returnSlots":0},"@name_1393":{"entryPoint":988,"id":1393,"parameterSlots":0,"returnSlots":1},"@name_3658":{"entryPoint":2195,"id":3658,"parameterSlots":0,"returnSlots":1},"@name_3826":{"entryPoint":6899,"id":3826,"parameterSlots":1,"returnSlots":1},"@ownerOf_1320":{"entryPoint":1330,"id":1320,"parameterSlots":1,"returnSlots":1},"@ownerOf_3422":{"entryPoint":5266,"id":3422,"parameterSlots":2,"returnSlots":1},"@owner_209":{"entryPoint":1520,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@renounceRole_159":{"entryPoint":1497,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_492":{"entryPoint":5549,"id":492,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":1798,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_457":{"entryPoint":6421,"id":457,"parameterSlots":4,"returnSlots":0},"@safeMintOnce_2934":{"entryPoint":5495,"id":2934,"parameterSlots":5,"returnSlots":0},"@safeMint_1523":{"entryPoint":1370,"id":1523,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_1262":{"entryPoint":1192,"id":1262,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1288":{"entryPoint":1708,"id":1288,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_2389":{"entryPoint":4736,"id":2389,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_2429":{"entryPoint":6057,"id":2429,"parameterSlots":7,"returnSlots":0},"@setApprovalForAll_1216":{"entryPoint":1686,"id":1216,"parameterSlots":2,"returnSlots":0},"@setApprovalForAll_2234":{"entryPoint":5777,"id":2234,"parameterSlots":4,"returnSlots":0},"@supportsInterface_891":{"entryPoint":962,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":1977,"id":997,"parameterSlots":2,"returnSlots":1},"@symbol_1407":{"entryPoint":1634,"id":1407,"parameterSlots":0,"returnSlots":1},"@symbol_3671":{"entryPoint":5713,"id":3671,"parameterSlots":0,"returnSlots":1},"@symbol_3839":{"entryPoint":7443,"id":3839,"parameterSlots":1,"returnSlots":1},"@tokenMetadataURI_3874":{"entryPoint":6229,"id":3874,"parameterSlots":3,"returnSlots":1},"@tokenURI_1435":{"entryPoint":1763,"id":1435,"parameterSlots":1,"returnSlots":1},"@transferFrom_1239":{"entryPoint":1049,"id":1239,"parameterSlots":3,"returnSlots":0},"@transferFrom_2351":{"entryPoint":3079,"id":2351,"parameterSlots":5,"returnSlots":0},"@transferOwnership_226":{"entryPoint":1911,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_769":{"entryPoint":6623,"id":769,"parameterSlots":3,"returnSlots":0},"@wasBurnt_1568":{"entryPoint":1743,"id":1568,"parameterSlots":1,"returnSlots":1},"@wasBurnt_3506":{"entryPoint":6175,"id":3506,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":7689,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":8037,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":8010,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8371,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7772,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":8260,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":7876,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8200,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7730,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":8110,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7832,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8924,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":8565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":7571,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8851,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3700__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7645,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8413,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7535,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8768,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":8471,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8518,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7460,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:11019:62","nodeType":"YulBlock","src":"0:11019:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"58:133:62","nodeType":"YulBlock","src":"58:133:62","statements":[{"body":{"nativeSrc":"169:16:62","nodeType":"YulBlock","src":"169:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:62","nodeType":"YulLiteral","src":"178:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:62","nodeType":"YulLiteral","src":"181:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:62","nodeType":"YulIdentifier","src":"171:6:62"},"nativeSrc":"171:12:62","nodeType":"YulFunctionCall","src":"171:12:62"},"nativeSrc":"171:12:62","nodeType":"YulExpressionStatement","src":"171:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"81:5:62","nodeType":"YulIdentifier","src":"81:5:62"},{"arguments":[{"name":"value","nativeSrc":"92:5:62","nodeType":"YulIdentifier","src":"92:5:62"},{"kind":"number","nativeSrc":"99:66:62","nodeType":"YulLiteral","src":"99:66:62","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"88:3:62","nodeType":"YulIdentifier","src":"88:3:62"},"nativeSrc":"88:78:62","nodeType":"YulFunctionCall","src":"88:78:62"}],"functionName":{"name":"eq","nativeSrc":"78:2:62","nodeType":"YulIdentifier","src":"78:2:62"},"nativeSrc":"78:89:62","nodeType":"YulFunctionCall","src":"78:89:62"}],"functionName":{"name":"iszero","nativeSrc":"71:6:62","nodeType":"YulIdentifier","src":"71:6:62"},"nativeSrc":"71:97:62","nodeType":"YulFunctionCall","src":"71:97:62"},"nativeSrc":"68:117:62","nodeType":"YulIf","src":"68:117:62"}]},"name":"validator_revert_bytes4","nativeSrc":"14:177:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"47:5:62","nodeType":"YulTypedName","src":"47:5:62","type":""}],"src":"14:177:62"},{"body":{"nativeSrc":"265:176:62","nodeType":"YulBlock","src":"265:176:62","statements":[{"body":{"nativeSrc":"311:16:62","nodeType":"YulBlock","src":"311:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:62","nodeType":"YulLiteral","src":"320:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:62","nodeType":"YulLiteral","src":"323:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:62","nodeType":"YulIdentifier","src":"313:6:62"},"nativeSrc":"313:12:62","nodeType":"YulFunctionCall","src":"313:12:62"},"nativeSrc":"313:12:62","nodeType":"YulExpressionStatement","src":"313:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"286:7:62","nodeType":"YulIdentifier","src":"286:7:62"},{"name":"headStart","nativeSrc":"295:9:62","nodeType":"YulIdentifier","src":"295:9:62"}],"functionName":{"name":"sub","nativeSrc":"282:3:62","nodeType":"YulIdentifier","src":"282:3:62"},"nativeSrc":"282:23:62","nodeType":"YulFunctionCall","src":"282:23:62"},{"kind":"number","nativeSrc":"307:2:62","nodeType":"YulLiteral","src":"307:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"278:3:62","nodeType":"YulIdentifier","src":"278:3:62"},"nativeSrc":"278:32:62","nodeType":"YulFunctionCall","src":"278:32:62"},"nativeSrc":"275:52:62","nodeType":"YulIf","src":"275:52:62"},{"nativeSrc":"336:36:62","nodeType":"YulVariableDeclaration","src":"336:36:62","value":{"arguments":[{"name":"headStart","nativeSrc":"362:9:62","nodeType":"YulIdentifier","src":"362:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"349:12:62","nodeType":"YulIdentifier","src":"349:12:62"},"nativeSrc":"349:23:62","nodeType":"YulFunctionCall","src":"349:23:62"},"variables":[{"name":"value","nativeSrc":"340:5:62","nodeType":"YulTypedName","src":"340:5:62","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"405:5:62","nodeType":"YulIdentifier","src":"405:5:62"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"381:23:62","nodeType":"YulIdentifier","src":"381:23:62"},"nativeSrc":"381:30:62","nodeType":"YulFunctionCall","src":"381:30:62"},"nativeSrc":"381:30:62","nodeType":"YulExpressionStatement","src":"381:30:62"},{"nativeSrc":"420:15:62","nodeType":"YulAssignment","src":"420:15:62","value":{"name":"value","nativeSrc":"430:5:62","nodeType":"YulIdentifier","src":"430:5:62"},"variableNames":[{"name":"value0","nativeSrc":"420:6:62","nodeType":"YulIdentifier","src":"420:6:62"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"196:245:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"231:9:62","nodeType":"YulTypedName","src":"231:9:62","type":""},{"name":"dataEnd","nativeSrc":"242:7:62","nodeType":"YulTypedName","src":"242:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"254:6:62","nodeType":"YulTypedName","src":"254:6:62","type":""}],"src":"196:245:62"},{"body":{"nativeSrc":"541:92:62","nodeType":"YulBlock","src":"541:92:62","statements":[{"nativeSrc":"551:26:62","nodeType":"YulAssignment","src":"551:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"563:9:62","nodeType":"YulIdentifier","src":"563:9:62"},{"kind":"number","nativeSrc":"574:2:62","nodeType":"YulLiteral","src":"574:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"559:3:62","nodeType":"YulIdentifier","src":"559:3:62"},"nativeSrc":"559:18:62","nodeType":"YulFunctionCall","src":"559:18:62"},"variableNames":[{"name":"tail","nativeSrc":"551:4:62","nodeType":"YulIdentifier","src":"551:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"593:9:62","nodeType":"YulIdentifier","src":"593:9:62"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"618:6:62","nodeType":"YulIdentifier","src":"618:6:62"}],"functionName":{"name":"iszero","nativeSrc":"611:6:62","nodeType":"YulIdentifier","src":"611:6:62"},"nativeSrc":"611:14:62","nodeType":"YulFunctionCall","src":"611:14:62"}],"functionName":{"name":"iszero","nativeSrc":"604:6:62","nodeType":"YulIdentifier","src":"604:6:62"},"nativeSrc":"604:22:62","nodeType":"YulFunctionCall","src":"604:22:62"}],"functionName":{"name":"mstore","nativeSrc":"586:6:62","nodeType":"YulIdentifier","src":"586:6:62"},"nativeSrc":"586:41:62","nodeType":"YulFunctionCall","src":"586:41:62"},"nativeSrc":"586:41:62","nodeType":"YulExpressionStatement","src":"586:41:62"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"446:187:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"510:9:62","nodeType":"YulTypedName","src":"510:9:62","type":""},{"name":"value0","nativeSrc":"521:6:62","nodeType":"YulTypedName","src":"521:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"532:4:62","nodeType":"YulTypedName","src":"532:4:62","type":""}],"src":"446:187:62"},{"body":{"nativeSrc":"704:184:62","nodeType":"YulBlock","src":"704:184:62","statements":[{"nativeSrc":"714:10:62","nodeType":"YulVariableDeclaration","src":"714:10:62","value":{"kind":"number","nativeSrc":"723:1:62","nodeType":"YulLiteral","src":"723:1:62","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"718:1:62","nodeType":"YulTypedName","src":"718:1:62","type":""}]},{"body":{"nativeSrc":"783:63:62","nodeType":"YulBlock","src":"783:63:62","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"808:3:62","nodeType":"YulIdentifier","src":"808:3:62"},{"name":"i","nativeSrc":"813:1:62","nodeType":"YulIdentifier","src":"813:1:62"}],"functionName":{"name":"add","nativeSrc":"804:3:62","nodeType":"YulIdentifier","src":"804:3:62"},"nativeSrc":"804:11:62","nodeType":"YulFunctionCall","src":"804:11:62"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"827:3:62","nodeType":"YulIdentifier","src":"827:3:62"},{"name":"i","nativeSrc":"832:1:62","nodeType":"YulIdentifier","src":"832:1:62"}],"functionName":{"name":"add","nativeSrc":"823:3:62","nodeType":"YulIdentifier","src":"823:3:62"},"nativeSrc":"823:11:62","nodeType":"YulFunctionCall","src":"823:11:62"}],"functionName":{"name":"mload","nativeSrc":"817:5:62","nodeType":"YulIdentifier","src":"817:5:62"},"nativeSrc":"817:18:62","nodeType":"YulFunctionCall","src":"817:18:62"}],"functionName":{"name":"mstore","nativeSrc":"797:6:62","nodeType":"YulIdentifier","src":"797:6:62"},"nativeSrc":"797:39:62","nodeType":"YulFunctionCall","src":"797:39:62"},"nativeSrc":"797:39:62","nodeType":"YulExpressionStatement","src":"797:39:62"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"744:1:62","nodeType":"YulIdentifier","src":"744:1:62"},{"name":"length","nativeSrc":"747:6:62","nodeType":"YulIdentifier","src":"747:6:62"}],"functionName":{"name":"lt","nativeSrc":"741:2:62","nodeType":"YulIdentifier","src":"741:2:62"},"nativeSrc":"741:13:62","nodeType":"YulFunctionCall","src":"741:13:62"},"nativeSrc":"733:113:62","nodeType":"YulForLoop","post":{"nativeSrc":"755:19:62","nodeType":"YulBlock","src":"755:19:62","statements":[{"nativeSrc":"757:15:62","nodeType":"YulAssignment","src":"757:15:62","value":{"arguments":[{"name":"i","nativeSrc":"766:1:62","nodeType":"YulIdentifier","src":"766:1:62"},{"kind":"number","nativeSrc":"769:2:62","nodeType":"YulLiteral","src":"769:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"762:3:62","nodeType":"YulIdentifier","src":"762:3:62"},"nativeSrc":"762:10:62","nodeType":"YulFunctionCall","src":"762:10:62"},"variableNames":[{"name":"i","nativeSrc":"757:1:62","nodeType":"YulIdentifier","src":"757:1:62"}]}]},"pre":{"nativeSrc":"737:3:62","nodeType":"YulBlock","src":"737:3:62","statements":[]},"src":"733:113:62"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"866:3:62","nodeType":"YulIdentifier","src":"866:3:62"},{"name":"length","nativeSrc":"871:6:62","nodeType":"YulIdentifier","src":"871:6:62"}],"functionName":{"name":"add","nativeSrc":"862:3:62","nodeType":"YulIdentifier","src":"862:3:62"},"nativeSrc":"862:16:62","nodeType":"YulFunctionCall","src":"862:16:62"},{"kind":"number","nativeSrc":"880:1:62","nodeType":"YulLiteral","src":"880:1:62","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"855:6:62","nodeType":"YulIdentifier","src":"855:6:62"},"nativeSrc":"855:27:62","nodeType":"YulFunctionCall","src":"855:27:62"},"nativeSrc":"855:27:62","nodeType":"YulExpressionStatement","src":"855:27:62"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"638:250:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"682:3:62","nodeType":"YulTypedName","src":"682:3:62","type":""},{"name":"dst","nativeSrc":"687:3:62","nodeType":"YulTypedName","src":"687:3:62","type":""},{"name":"length","nativeSrc":"692:6:62","nodeType":"YulTypedName","src":"692:6:62","type":""}],"src":"638:250:62"},{"body":{"nativeSrc":"943:280:62","nodeType":"YulBlock","src":"943:280:62","statements":[{"nativeSrc":"953:26:62","nodeType":"YulVariableDeclaration","src":"953:26:62","value":{"arguments":[{"name":"value","nativeSrc":"973:5:62","nodeType":"YulIdentifier","src":"973:5:62"}],"functionName":{"name":"mload","nativeSrc":"967:5:62","nodeType":"YulIdentifier","src":"967:5:62"},"nativeSrc":"967:12:62","nodeType":"YulFunctionCall","src":"967:12:62"},"variables":[{"name":"length","nativeSrc":"957:6:62","nodeType":"YulTypedName","src":"957:6:62","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"995:3:62","nodeType":"YulIdentifier","src":"995:3:62"},{"name":"length","nativeSrc":"1000:6:62","nodeType":"YulIdentifier","src":"1000:6:62"}],"functionName":{"name":"mstore","nativeSrc":"988:6:62","nodeType":"YulIdentifier","src":"988:6:62"},"nativeSrc":"988:19:62","nodeType":"YulFunctionCall","src":"988:19:62"},"nativeSrc":"988:19:62","nodeType":"YulExpressionStatement","src":"988:19:62"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1055:5:62","nodeType":"YulIdentifier","src":"1055:5:62"},{"kind":"number","nativeSrc":"1062:4:62","nodeType":"YulLiteral","src":"1062:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1051:3:62","nodeType":"YulIdentifier","src":"1051:3:62"},"nativeSrc":"1051:16:62","nodeType":"YulFunctionCall","src":"1051:16:62"},{"arguments":[{"name":"pos","nativeSrc":"1073:3:62","nodeType":"YulIdentifier","src":"1073:3:62"},{"kind":"number","nativeSrc":"1078:4:62","nodeType":"YulLiteral","src":"1078:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1069:3:62","nodeType":"YulIdentifier","src":"1069:3:62"},"nativeSrc":"1069:14:62","nodeType":"YulFunctionCall","src":"1069:14:62"},{"name":"length","nativeSrc":"1085:6:62","nodeType":"YulIdentifier","src":"1085:6:62"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1016:34:62","nodeType":"YulIdentifier","src":"1016:34:62"},"nativeSrc":"1016:76:62","nodeType":"YulFunctionCall","src":"1016:76:62"},"nativeSrc":"1016:76:62","nodeType":"YulExpressionStatement","src":"1016:76:62"},{"nativeSrc":"1101:116:62","nodeType":"YulAssignment","src":"1101:116:62","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1116:3:62","nodeType":"YulIdentifier","src":"1116:3:62"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1129:6:62","nodeType":"YulIdentifier","src":"1129:6:62"},{"kind":"number","nativeSrc":"1137:2:62","nodeType":"YulLiteral","src":"1137:2:62","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1125:3:62","nodeType":"YulIdentifier","src":"1125:3:62"},"nativeSrc":"1125:15:62","nodeType":"YulFunctionCall","src":"1125:15:62"},{"kind":"number","nativeSrc":"1142:66:62","nodeType":"YulLiteral","src":"1142:66:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1121:3:62","nodeType":"YulIdentifier","src":"1121:3:62"},"nativeSrc":"1121:88:62","nodeType":"YulFunctionCall","src":"1121:88:62"}],"functionName":{"name":"add","nativeSrc":"1112:3:62","nodeType":"YulIdentifier","src":"1112:3:62"},"nativeSrc":"1112:98:62","nodeType":"YulFunctionCall","src":"1112:98:62"},{"kind":"number","nativeSrc":"1212:4:62","nodeType":"YulLiteral","src":"1212:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1108:3:62","nodeType":"YulIdentifier","src":"1108:3:62"},"nativeSrc":"1108:109:62","nodeType":"YulFunctionCall","src":"1108:109:62"},"variableNames":[{"name":"end","nativeSrc":"1101:3:62","nodeType":"YulIdentifier","src":"1101:3:62"}]}]},"name":"abi_encode_string","nativeSrc":"893:330:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"920:5:62","nodeType":"YulTypedName","src":"920:5:62","type":""},{"name":"pos","nativeSrc":"927:3:62","nodeType":"YulTypedName","src":"927:3:62","type":""}],"returnVariables":[{"name":"end","nativeSrc":"935:3:62","nodeType":"YulTypedName","src":"935:3:62","type":""}],"src":"893:330:62"},{"body":{"nativeSrc":"1349:99:62","nodeType":"YulBlock","src":"1349:99:62","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1366:9:62","nodeType":"YulIdentifier","src":"1366:9:62"},{"kind":"number","nativeSrc":"1377:2:62","nodeType":"YulLiteral","src":"1377:2:62","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:62","nodeType":"YulIdentifier","src":"1359:6:62"},"nativeSrc":"1359:21:62","nodeType":"YulFunctionCall","src":"1359:21:62"},"nativeSrc":"1359:21:62","nodeType":"YulExpressionStatement","src":"1359:21:62"},{"nativeSrc":"1389:53:62","nodeType":"YulAssignment","src":"1389:53:62","value":{"arguments":[{"name":"value0","nativeSrc":"1415:6:62","nodeType":"YulIdentifier","src":"1415:6:62"},{"arguments":[{"name":"headStart","nativeSrc":"1427:9:62","nodeType":"YulIdentifier","src":"1427:9:62"},{"kind":"number","nativeSrc":"1438:2:62","nodeType":"YulLiteral","src":"1438:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1423:3:62","nodeType":"YulIdentifier","src":"1423:3:62"},"nativeSrc":"1423:18:62","nodeType":"YulFunctionCall","src":"1423:18:62"}],"functionName":{"name":"abi_encode_string","nativeSrc":"1397:17:62","nodeType":"YulIdentifier","src":"1397:17:62"},"nativeSrc":"1397:45:62","nodeType":"YulFunctionCall","src":"1397:45:62"},"variableNames":[{"name":"tail","nativeSrc":"1389:4:62","nodeType":"YulIdentifier","src":"1389:4:62"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1228:220:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1318:9:62","nodeType":"YulTypedName","src":"1318:9:62","type":""},{"name":"value0","nativeSrc":"1329:6:62","nodeType":"YulTypedName","src":"1329:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1340:4:62","nodeType":"YulTypedName","src":"1340:4:62","type":""}],"src":"1228:220:62"},{"body":{"nativeSrc":"1523:110:62","nodeType":"YulBlock","src":"1523:110:62","statements":[{"body":{"nativeSrc":"1569:16:62","nodeType":"YulBlock","src":"1569:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1578:1:62","nodeType":"YulLiteral","src":"1578:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1581:1:62","nodeType":"YulLiteral","src":"1581:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1571:6:62","nodeType":"YulIdentifier","src":"1571:6:62"},"nativeSrc":"1571:12:62","nodeType":"YulFunctionCall","src":"1571:12:62"},"nativeSrc":"1571:12:62","nodeType":"YulExpressionStatement","src":"1571:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1544:7:62","nodeType":"YulIdentifier","src":"1544:7:62"},{"name":"headStart","nativeSrc":"1553:9:62","nodeType":"YulIdentifier","src":"1553:9:62"}],"functionName":{"name":"sub","nativeSrc":"1540:3:62","nodeType":"YulIdentifier","src":"1540:3:62"},"nativeSrc":"1540:23:62","nodeType":"YulFunctionCall","src":"1540:23:62"},{"kind":"number","nativeSrc":"1565:2:62","nodeType":"YulLiteral","src":"1565:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1536:3:62","nodeType":"YulIdentifier","src":"1536:3:62"},"nativeSrc":"1536:32:62","nodeType":"YulFunctionCall","src":"1536:32:62"},"nativeSrc":"1533:52:62","nodeType":"YulIf","src":"1533:52:62"},{"nativeSrc":"1594:33:62","nodeType":"YulAssignment","src":"1594:33:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1617:9:62","nodeType":"YulIdentifier","src":"1617:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"1604:12:62","nodeType":"YulIdentifier","src":"1604:12:62"},"nativeSrc":"1604:23:62","nodeType":"YulFunctionCall","src":"1604:23:62"},"variableNames":[{"name":"value0","nativeSrc":"1594:6:62","nodeType":"YulIdentifier","src":"1594:6:62"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1453:180:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1489:9:62","nodeType":"YulTypedName","src":"1489:9:62","type":""},{"name":"dataEnd","nativeSrc":"1500:7:62","nodeType":"YulTypedName","src":"1500:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1512:6:62","nodeType":"YulTypedName","src":"1512:6:62","type":""}],"src":"1453:180:62"},{"body":{"nativeSrc":"1739:125:62","nodeType":"YulBlock","src":"1739:125:62","statements":[{"nativeSrc":"1749:26:62","nodeType":"YulAssignment","src":"1749:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1761:9:62","nodeType":"YulIdentifier","src":"1761:9:62"},{"kind":"number","nativeSrc":"1772:2:62","nodeType":"YulLiteral","src":"1772:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1757:3:62","nodeType":"YulIdentifier","src":"1757:3:62"},"nativeSrc":"1757:18:62","nodeType":"YulFunctionCall","src":"1757:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1749:4:62","nodeType":"YulIdentifier","src":"1749:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1791:9:62","nodeType":"YulIdentifier","src":"1791:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1806:6:62","nodeType":"YulIdentifier","src":"1806:6:62"},{"kind":"number","nativeSrc":"1814:42:62","nodeType":"YulLiteral","src":"1814:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1802:3:62","nodeType":"YulIdentifier","src":"1802:3:62"},"nativeSrc":"1802:55:62","nodeType":"YulFunctionCall","src":"1802:55:62"}],"functionName":{"name":"mstore","nativeSrc":"1784:6:62","nodeType":"YulIdentifier","src":"1784:6:62"},"nativeSrc":"1784:74:62","nodeType":"YulFunctionCall","src":"1784:74:62"},"nativeSrc":"1784:74:62","nodeType":"YulExpressionStatement","src":"1784:74:62"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1638:226:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1708:9:62","nodeType":"YulTypedName","src":"1708:9:62","type":""},{"name":"value0","nativeSrc":"1719:6:62","nodeType":"YulTypedName","src":"1719:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1730:4:62","nodeType":"YulTypedName","src":"1730:4:62","type":""}],"src":"1638:226:62"},{"body":{"nativeSrc":"1918:147:62","nodeType":"YulBlock","src":"1918:147:62","statements":[{"nativeSrc":"1928:29:62","nodeType":"YulAssignment","src":"1928:29:62","value":{"arguments":[{"name":"offset","nativeSrc":"1950:6:62","nodeType":"YulIdentifier","src":"1950:6:62"}],"functionName":{"name":"calldataload","nativeSrc":"1937:12:62","nodeType":"YulIdentifier","src":"1937:12:62"},"nativeSrc":"1937:20:62","nodeType":"YulFunctionCall","src":"1937:20:62"},"variableNames":[{"name":"value","nativeSrc":"1928:5:62","nodeType":"YulIdentifier","src":"1928:5:62"}]},{"body":{"nativeSrc":"2043:16:62","nodeType":"YulBlock","src":"2043:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2052:1:62","nodeType":"YulLiteral","src":"2052:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2055:1:62","nodeType":"YulLiteral","src":"2055:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2045:6:62","nodeType":"YulIdentifier","src":"2045:6:62"},"nativeSrc":"2045:12:62","nodeType":"YulFunctionCall","src":"2045:12:62"},"nativeSrc":"2045:12:62","nodeType":"YulExpressionStatement","src":"2045:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1979:5:62","nodeType":"YulIdentifier","src":"1979:5:62"},{"arguments":[{"name":"value","nativeSrc":"1990:5:62","nodeType":"YulIdentifier","src":"1990:5:62"},{"kind":"number","nativeSrc":"1997:42:62","nodeType":"YulLiteral","src":"1997:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1986:3:62","nodeType":"YulIdentifier","src":"1986:3:62"},"nativeSrc":"1986:54:62","nodeType":"YulFunctionCall","src":"1986:54:62"}],"functionName":{"name":"eq","nativeSrc":"1976:2:62","nodeType":"YulIdentifier","src":"1976:2:62"},"nativeSrc":"1976:65:62","nodeType":"YulFunctionCall","src":"1976:65:62"}],"functionName":{"name":"iszero","nativeSrc":"1969:6:62","nodeType":"YulIdentifier","src":"1969:6:62"},"nativeSrc":"1969:73:62","nodeType":"YulFunctionCall","src":"1969:73:62"},"nativeSrc":"1966:93:62","nodeType":"YulIf","src":"1966:93:62"}]},"name":"abi_decode_address","nativeSrc":"1869:196:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1897:6:62","nodeType":"YulTypedName","src":"1897:6:62","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1908:5:62","nodeType":"YulTypedName","src":"1908:5:62","type":""}],"src":"1869:196:62"},{"body":{"nativeSrc":"2157:167:62","nodeType":"YulBlock","src":"2157:167:62","statements":[{"body":{"nativeSrc":"2203:16:62","nodeType":"YulBlock","src":"2203:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2212:1:62","nodeType":"YulLiteral","src":"2212:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2215:1:62","nodeType":"YulLiteral","src":"2215:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2205:6:62","nodeType":"YulIdentifier","src":"2205:6:62"},"nativeSrc":"2205:12:62","nodeType":"YulFunctionCall","src":"2205:12:62"},"nativeSrc":"2205:12:62","nodeType":"YulExpressionStatement","src":"2205:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2178:7:62","nodeType":"YulIdentifier","src":"2178:7:62"},{"name":"headStart","nativeSrc":"2187:9:62","nodeType":"YulIdentifier","src":"2187:9:62"}],"functionName":{"name":"sub","nativeSrc":"2174:3:62","nodeType":"YulIdentifier","src":"2174:3:62"},"nativeSrc":"2174:23:62","nodeType":"YulFunctionCall","src":"2174:23:62"},{"kind":"number","nativeSrc":"2199:2:62","nodeType":"YulLiteral","src":"2199:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2170:3:62","nodeType":"YulIdentifier","src":"2170:3:62"},"nativeSrc":"2170:32:62","nodeType":"YulFunctionCall","src":"2170:32:62"},"nativeSrc":"2167:52:62","nodeType":"YulIf","src":"2167:52:62"},{"nativeSrc":"2228:39:62","nodeType":"YulAssignment","src":"2228:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"2257:9:62","nodeType":"YulIdentifier","src":"2257:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2238:18:62","nodeType":"YulIdentifier","src":"2238:18:62"},"nativeSrc":"2238:29:62","nodeType":"YulFunctionCall","src":"2238:29:62"},"variableNames":[{"name":"value0","nativeSrc":"2228:6:62","nodeType":"YulIdentifier","src":"2228:6:62"}]},{"nativeSrc":"2276:42:62","nodeType":"YulAssignment","src":"2276:42:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2303:9:62","nodeType":"YulIdentifier","src":"2303:9:62"},{"kind":"number","nativeSrc":"2314:2:62","nodeType":"YulLiteral","src":"2314:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2299:3:62","nodeType":"YulIdentifier","src":"2299:3:62"},"nativeSrc":"2299:18:62","nodeType":"YulFunctionCall","src":"2299:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"2286:12:62","nodeType":"YulIdentifier","src":"2286:12:62"},"nativeSrc":"2286:32:62","nodeType":"YulFunctionCall","src":"2286:32:62"},"variableNames":[{"name":"value1","nativeSrc":"2276:6:62","nodeType":"YulIdentifier","src":"2276:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2070:254:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2115:9:62","nodeType":"YulTypedName","src":"2115:9:62","type":""},{"name":"dataEnd","nativeSrc":"2126:7:62","nodeType":"YulTypedName","src":"2126:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2138:6:62","nodeType":"YulTypedName","src":"2138:6:62","type":""},{"name":"value1","nativeSrc":"2146:6:62","nodeType":"YulTypedName","src":"2146:6:62","type":""}],"src":"2070:254:62"},{"body":{"nativeSrc":"2433:224:62","nodeType":"YulBlock","src":"2433:224:62","statements":[{"body":{"nativeSrc":"2479:16:62","nodeType":"YulBlock","src":"2479:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2488:1:62","nodeType":"YulLiteral","src":"2488:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2491:1:62","nodeType":"YulLiteral","src":"2491:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2481:6:62","nodeType":"YulIdentifier","src":"2481:6:62"},"nativeSrc":"2481:12:62","nodeType":"YulFunctionCall","src":"2481:12:62"},"nativeSrc":"2481:12:62","nodeType":"YulExpressionStatement","src":"2481:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2454:7:62","nodeType":"YulIdentifier","src":"2454:7:62"},{"name":"headStart","nativeSrc":"2463:9:62","nodeType":"YulIdentifier","src":"2463:9:62"}],"functionName":{"name":"sub","nativeSrc":"2450:3:62","nodeType":"YulIdentifier","src":"2450:3:62"},"nativeSrc":"2450:23:62","nodeType":"YulFunctionCall","src":"2450:23:62"},{"kind":"number","nativeSrc":"2475:2:62","nodeType":"YulLiteral","src":"2475:2:62","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2446:3:62","nodeType":"YulIdentifier","src":"2446:3:62"},"nativeSrc":"2446:32:62","nodeType":"YulFunctionCall","src":"2446:32:62"},"nativeSrc":"2443:52:62","nodeType":"YulIf","src":"2443:52:62"},{"nativeSrc":"2504:39:62","nodeType":"YulAssignment","src":"2504:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"2533:9:62","nodeType":"YulIdentifier","src":"2533:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2514:18:62","nodeType":"YulIdentifier","src":"2514:18:62"},"nativeSrc":"2514:29:62","nodeType":"YulFunctionCall","src":"2514:29:62"},"variableNames":[{"name":"value0","nativeSrc":"2504:6:62","nodeType":"YulIdentifier","src":"2504:6:62"}]},{"nativeSrc":"2552:48:62","nodeType":"YulAssignment","src":"2552:48:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2585:9:62","nodeType":"YulIdentifier","src":"2585:9:62"},{"kind":"number","nativeSrc":"2596:2:62","nodeType":"YulLiteral","src":"2596:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2581:3:62","nodeType":"YulIdentifier","src":"2581:3:62"},"nativeSrc":"2581:18:62","nodeType":"YulFunctionCall","src":"2581:18:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2562:18:62","nodeType":"YulIdentifier","src":"2562:18:62"},"nativeSrc":"2562:38:62","nodeType":"YulFunctionCall","src":"2562:38:62"},"variableNames":[{"name":"value1","nativeSrc":"2552:6:62","nodeType":"YulIdentifier","src":"2552:6:62"}]},{"nativeSrc":"2609:42:62","nodeType":"YulAssignment","src":"2609:42:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2636:9:62","nodeType":"YulIdentifier","src":"2636:9:62"},{"kind":"number","nativeSrc":"2647:2:62","nodeType":"YulLiteral","src":"2647:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2632:3:62","nodeType":"YulIdentifier","src":"2632:3:62"},"nativeSrc":"2632:18:62","nodeType":"YulFunctionCall","src":"2632:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"2619:12:62","nodeType":"YulIdentifier","src":"2619:12:62"},"nativeSrc":"2619:32:62","nodeType":"YulFunctionCall","src":"2619:32:62"},"variableNames":[{"name":"value2","nativeSrc":"2609:6:62","nodeType":"YulIdentifier","src":"2609:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"2329:328:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2383:9:62","nodeType":"YulTypedName","src":"2383:9:62","type":""},{"name":"dataEnd","nativeSrc":"2394:7:62","nodeType":"YulTypedName","src":"2394:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2406:6:62","nodeType":"YulTypedName","src":"2406:6:62","type":""},{"name":"value1","nativeSrc":"2414:6:62","nodeType":"YulTypedName","src":"2414:6:62","type":""},{"name":"value2","nativeSrc":"2422:6:62","nodeType":"YulTypedName","src":"2422:6:62","type":""}],"src":"2329:328:62"},{"body":{"nativeSrc":"2749:167:62","nodeType":"YulBlock","src":"2749:167:62","statements":[{"body":{"nativeSrc":"2795:16:62","nodeType":"YulBlock","src":"2795:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2804:1:62","nodeType":"YulLiteral","src":"2804:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2807:1:62","nodeType":"YulLiteral","src":"2807:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2797:6:62","nodeType":"YulIdentifier","src":"2797:6:62"},"nativeSrc":"2797:12:62","nodeType":"YulFunctionCall","src":"2797:12:62"},"nativeSrc":"2797:12:62","nodeType":"YulExpressionStatement","src":"2797:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2770:7:62","nodeType":"YulIdentifier","src":"2770:7:62"},{"name":"headStart","nativeSrc":"2779:9:62","nodeType":"YulIdentifier","src":"2779:9:62"}],"functionName":{"name":"sub","nativeSrc":"2766:3:62","nodeType":"YulIdentifier","src":"2766:3:62"},"nativeSrc":"2766:23:62","nodeType":"YulFunctionCall","src":"2766:23:62"},{"kind":"number","nativeSrc":"2791:2:62","nodeType":"YulLiteral","src":"2791:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2762:3:62","nodeType":"YulIdentifier","src":"2762:3:62"},"nativeSrc":"2762:32:62","nodeType":"YulFunctionCall","src":"2762:32:62"},"nativeSrc":"2759:52:62","nodeType":"YulIf","src":"2759:52:62"},{"nativeSrc":"2820:33:62","nodeType":"YulAssignment","src":"2820:33:62","value":{"arguments":[{"name":"headStart","nativeSrc":"2843:9:62","nodeType":"YulIdentifier","src":"2843:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"2830:12:62","nodeType":"YulIdentifier","src":"2830:12:62"},"nativeSrc":"2830:23:62","nodeType":"YulFunctionCall","src":"2830:23:62"},"variableNames":[{"name":"value0","nativeSrc":"2820:6:62","nodeType":"YulIdentifier","src":"2820:6:62"}]},{"nativeSrc":"2862:48:62","nodeType":"YulAssignment","src":"2862:48:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2895:9:62","nodeType":"YulIdentifier","src":"2895:9:62"},{"kind":"number","nativeSrc":"2906:2:62","nodeType":"YulLiteral","src":"2906:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2891:3:62","nodeType":"YulIdentifier","src":"2891:3:62"},"nativeSrc":"2891:18:62","nodeType":"YulFunctionCall","src":"2891:18:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2872:18:62","nodeType":"YulIdentifier","src":"2872:18:62"},"nativeSrc":"2872:38:62","nodeType":"YulFunctionCall","src":"2872:38:62"},"variableNames":[{"name":"value1","nativeSrc":"2862:6:62","nodeType":"YulIdentifier","src":"2862:6:62"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2662:254:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2707:9:62","nodeType":"YulTypedName","src":"2707:9:62","type":""},{"name":"dataEnd","nativeSrc":"2718:7:62","nodeType":"YulTypedName","src":"2718:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2730:6:62","nodeType":"YulTypedName","src":"2730:6:62","type":""},{"name":"value1","nativeSrc":"2738:6:62","nodeType":"YulTypedName","src":"2738:6:62","type":""}],"src":"2662:254:62"},{"body":{"nativeSrc":"3043:567:62","nodeType":"YulBlock","src":"3043:567:62","statements":[{"body":{"nativeSrc":"3089:16:62","nodeType":"YulBlock","src":"3089:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3098:1:62","nodeType":"YulLiteral","src":"3098:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3101:1:62","nodeType":"YulLiteral","src":"3101:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3091:6:62","nodeType":"YulIdentifier","src":"3091:6:62"},"nativeSrc":"3091:12:62","nodeType":"YulFunctionCall","src":"3091:12:62"},"nativeSrc":"3091:12:62","nodeType":"YulExpressionStatement","src":"3091:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3064:7:62","nodeType":"YulIdentifier","src":"3064:7:62"},{"name":"headStart","nativeSrc":"3073:9:62","nodeType":"YulIdentifier","src":"3073:9:62"}],"functionName":{"name":"sub","nativeSrc":"3060:3:62","nodeType":"YulIdentifier","src":"3060:3:62"},"nativeSrc":"3060:23:62","nodeType":"YulFunctionCall","src":"3060:23:62"},{"kind":"number","nativeSrc":"3085:2:62","nodeType":"YulLiteral","src":"3085:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3056:3:62","nodeType":"YulIdentifier","src":"3056:3:62"},"nativeSrc":"3056:32:62","nodeType":"YulFunctionCall","src":"3056:32:62"},"nativeSrc":"3053:52:62","nodeType":"YulIf","src":"3053:52:62"},{"nativeSrc":"3114:39:62","nodeType":"YulAssignment","src":"3114:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3143:9:62","nodeType":"YulIdentifier","src":"3143:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3124:18:62","nodeType":"YulIdentifier","src":"3124:18:62"},"nativeSrc":"3124:29:62","nodeType":"YulFunctionCall","src":"3124:29:62"},"variableNames":[{"name":"value0","nativeSrc":"3114:6:62","nodeType":"YulIdentifier","src":"3114:6:62"}]},{"nativeSrc":"3162:46:62","nodeType":"YulVariableDeclaration","src":"3162:46:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3193:9:62","nodeType":"YulIdentifier","src":"3193:9:62"},{"kind":"number","nativeSrc":"3204:2:62","nodeType":"YulLiteral","src":"3204:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3189:3:62","nodeType":"YulIdentifier","src":"3189:3:62"},"nativeSrc":"3189:18:62","nodeType":"YulFunctionCall","src":"3189:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"3176:12:62","nodeType":"YulIdentifier","src":"3176:12:62"},"nativeSrc":"3176:32:62","nodeType":"YulFunctionCall","src":"3176:32:62"},"variables":[{"name":"offset","nativeSrc":"3166:6:62","nodeType":"YulTypedName","src":"3166:6:62","type":""}]},{"nativeSrc":"3217:28:62","nodeType":"YulVariableDeclaration","src":"3217:28:62","value":{"kind":"number","nativeSrc":"3227:18:62","nodeType":"YulLiteral","src":"3227:18:62","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3221:2:62","nodeType":"YulTypedName","src":"3221:2:62","type":""}]},{"body":{"nativeSrc":"3272:16:62","nodeType":"YulBlock","src":"3272:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3281:1:62","nodeType":"YulLiteral","src":"3281:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3284:1:62","nodeType":"YulLiteral","src":"3284:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3274:6:62","nodeType":"YulIdentifier","src":"3274:6:62"},"nativeSrc":"3274:12:62","nodeType":"YulFunctionCall","src":"3274:12:62"},"nativeSrc":"3274:12:62","nodeType":"YulExpressionStatement","src":"3274:12:62"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3260:6:62","nodeType":"YulIdentifier","src":"3260:6:62"},{"name":"_1","nativeSrc":"3268:2:62","nodeType":"YulIdentifier","src":"3268:2:62"}],"functionName":{"name":"gt","nativeSrc":"3257:2:62","nodeType":"YulIdentifier","src":"3257:2:62"},"nativeSrc":"3257:14:62","nodeType":"YulFunctionCall","src":"3257:14:62"},"nativeSrc":"3254:34:62","nodeType":"YulIf","src":"3254:34:62"},{"nativeSrc":"3297:32:62","nodeType":"YulVariableDeclaration","src":"3297:32:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3311:9:62","nodeType":"YulIdentifier","src":"3311:9:62"},{"name":"offset","nativeSrc":"3322:6:62","nodeType":"YulIdentifier","src":"3322:6:62"}],"functionName":{"name":"add","nativeSrc":"3307:3:62","nodeType":"YulIdentifier","src":"3307:3:62"},"nativeSrc":"3307:22:62","nodeType":"YulFunctionCall","src":"3307:22:62"},"variables":[{"name":"_2","nativeSrc":"3301:2:62","nodeType":"YulTypedName","src":"3301:2:62","type":""}]},{"body":{"nativeSrc":"3377:16:62","nodeType":"YulBlock","src":"3377:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3386:1:62","nodeType":"YulLiteral","src":"3386:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3389:1:62","nodeType":"YulLiteral","src":"3389:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3379:6:62","nodeType":"YulIdentifier","src":"3379:6:62"},"nativeSrc":"3379:12:62","nodeType":"YulFunctionCall","src":"3379:12:62"},"nativeSrc":"3379:12:62","nodeType":"YulExpressionStatement","src":"3379:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3356:2:62","nodeType":"YulIdentifier","src":"3356:2:62"},{"kind":"number","nativeSrc":"3360:4:62","nodeType":"YulLiteral","src":"3360:4:62","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3352:3:62","nodeType":"YulIdentifier","src":"3352:3:62"},"nativeSrc":"3352:13:62","nodeType":"YulFunctionCall","src":"3352:13:62"},{"name":"dataEnd","nativeSrc":"3367:7:62","nodeType":"YulIdentifier","src":"3367:7:62"}],"functionName":{"name":"slt","nativeSrc":"3348:3:62","nodeType":"YulIdentifier","src":"3348:3:62"},"nativeSrc":"3348:27:62","nodeType":"YulFunctionCall","src":"3348:27:62"}],"functionName":{"name":"iszero","nativeSrc":"3341:6:62","nodeType":"YulIdentifier","src":"3341:6:62"},"nativeSrc":"3341:35:62","nodeType":"YulFunctionCall","src":"3341:35:62"},"nativeSrc":"3338:55:62","nodeType":"YulIf","src":"3338:55:62"},{"nativeSrc":"3402:30:62","nodeType":"YulVariableDeclaration","src":"3402:30:62","value":{"arguments":[{"name":"_2","nativeSrc":"3429:2:62","nodeType":"YulIdentifier","src":"3429:2:62"}],"functionName":{"name":"calldataload","nativeSrc":"3416:12:62","nodeType":"YulIdentifier","src":"3416:12:62"},"nativeSrc":"3416:16:62","nodeType":"YulFunctionCall","src":"3416:16:62"},"variables":[{"name":"length","nativeSrc":"3406:6:62","nodeType":"YulTypedName","src":"3406:6:62","type":""}]},{"body":{"nativeSrc":"3459:16:62","nodeType":"YulBlock","src":"3459:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3468:1:62","nodeType":"YulLiteral","src":"3468:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3471:1:62","nodeType":"YulLiteral","src":"3471:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3461:6:62","nodeType":"YulIdentifier","src":"3461:6:62"},"nativeSrc":"3461:12:62","nodeType":"YulFunctionCall","src":"3461:12:62"},"nativeSrc":"3461:12:62","nodeType":"YulExpressionStatement","src":"3461:12:62"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3447:6:62","nodeType":"YulIdentifier","src":"3447:6:62"},{"name":"_1","nativeSrc":"3455:2:62","nodeType":"YulIdentifier","src":"3455:2:62"}],"functionName":{"name":"gt","nativeSrc":"3444:2:62","nodeType":"YulIdentifier","src":"3444:2:62"},"nativeSrc":"3444:14:62","nodeType":"YulFunctionCall","src":"3444:14:62"},"nativeSrc":"3441:34:62","nodeType":"YulIf","src":"3441:34:62"},{"body":{"nativeSrc":"3533:16:62","nodeType":"YulBlock","src":"3533:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3542:1:62","nodeType":"YulLiteral","src":"3542:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3545:1:62","nodeType":"YulLiteral","src":"3545:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3535:6:62","nodeType":"YulIdentifier","src":"3535:6:62"},"nativeSrc":"3535:12:62","nodeType":"YulFunctionCall","src":"3535:12:62"},"nativeSrc":"3535:12:62","nodeType":"YulExpressionStatement","src":"3535:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3498:2:62","nodeType":"YulIdentifier","src":"3498:2:62"},{"arguments":[{"kind":"number","nativeSrc":"3506:1:62","nodeType":"YulLiteral","src":"3506:1:62","type":"","value":"5"},{"name":"length","nativeSrc":"3509:6:62","nodeType":"YulIdentifier","src":"3509:6:62"}],"functionName":{"name":"shl","nativeSrc":"3502:3:62","nodeType":"YulIdentifier","src":"3502:3:62"},"nativeSrc":"3502:14:62","nodeType":"YulFunctionCall","src":"3502:14:62"}],"functionName":{"name":"add","nativeSrc":"3494:3:62","nodeType":"YulIdentifier","src":"3494:3:62"},"nativeSrc":"3494:23:62","nodeType":"YulFunctionCall","src":"3494:23:62"},{"kind":"number","nativeSrc":"3519:2:62","nodeType":"YulLiteral","src":"3519:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3490:3:62","nodeType":"YulIdentifier","src":"3490:3:62"},"nativeSrc":"3490:32:62","nodeType":"YulFunctionCall","src":"3490:32:62"},{"name":"dataEnd","nativeSrc":"3524:7:62","nodeType":"YulIdentifier","src":"3524:7:62"}],"functionName":{"name":"gt","nativeSrc":"3487:2:62","nodeType":"YulIdentifier","src":"3487:2:62"},"nativeSrc":"3487:45:62","nodeType":"YulFunctionCall","src":"3487:45:62"},"nativeSrc":"3484:65:62","nodeType":"YulIf","src":"3484:65:62"},{"nativeSrc":"3558:21:62","nodeType":"YulAssignment","src":"3558:21:62","value":{"arguments":[{"name":"_2","nativeSrc":"3572:2:62","nodeType":"YulIdentifier","src":"3572:2:62"},{"kind":"number","nativeSrc":"3576:2:62","nodeType":"YulLiteral","src":"3576:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3568:3:62","nodeType":"YulIdentifier","src":"3568:3:62"},"nativeSrc":"3568:11:62","nodeType":"YulFunctionCall","src":"3568:11:62"},"variableNames":[{"name":"value1","nativeSrc":"3558:6:62","nodeType":"YulIdentifier","src":"3558:6:62"}]},{"nativeSrc":"3588:16:62","nodeType":"YulAssignment","src":"3588:16:62","value":{"name":"length","nativeSrc":"3598:6:62","nodeType":"YulIdentifier","src":"3598:6:62"},"variableNames":[{"name":"value2","nativeSrc":"3588:6:62","nodeType":"YulIdentifier","src":"3588:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2921:689:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2993:9:62","nodeType":"YulTypedName","src":"2993:9:62","type":""},{"name":"dataEnd","nativeSrc":"3004:7:62","nodeType":"YulTypedName","src":"3004:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3016:6:62","nodeType":"YulTypedName","src":"3016:6:62","type":""},{"name":"value1","nativeSrc":"3024:6:62","nodeType":"YulTypedName","src":"3024:6:62","type":""},{"name":"value2","nativeSrc":"3032:6:62","nodeType":"YulTypedName","src":"3032:6:62","type":""}],"src":"2921:689:62"},{"body":{"nativeSrc":"3685:116:62","nodeType":"YulBlock","src":"3685:116:62","statements":[{"body":{"nativeSrc":"3731:16:62","nodeType":"YulBlock","src":"3731:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3740:1:62","nodeType":"YulLiteral","src":"3740:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3743:1:62","nodeType":"YulLiteral","src":"3743:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3733:6:62","nodeType":"YulIdentifier","src":"3733:6:62"},"nativeSrc":"3733:12:62","nodeType":"YulFunctionCall","src":"3733:12:62"},"nativeSrc":"3733:12:62","nodeType":"YulExpressionStatement","src":"3733:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3706:7:62","nodeType":"YulIdentifier","src":"3706:7:62"},{"name":"headStart","nativeSrc":"3715:9:62","nodeType":"YulIdentifier","src":"3715:9:62"}],"functionName":{"name":"sub","nativeSrc":"3702:3:62","nodeType":"YulIdentifier","src":"3702:3:62"},"nativeSrc":"3702:23:62","nodeType":"YulFunctionCall","src":"3702:23:62"},{"kind":"number","nativeSrc":"3727:2:62","nodeType":"YulLiteral","src":"3727:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3698:3:62","nodeType":"YulIdentifier","src":"3698:3:62"},"nativeSrc":"3698:32:62","nodeType":"YulFunctionCall","src":"3698:32:62"},"nativeSrc":"3695:52:62","nodeType":"YulIf","src":"3695:52:62"},{"nativeSrc":"3756:39:62","nodeType":"YulAssignment","src":"3756:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3785:9:62","nodeType":"YulIdentifier","src":"3785:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3766:18:62","nodeType":"YulIdentifier","src":"3766:18:62"},"nativeSrc":"3766:29:62","nodeType":"YulFunctionCall","src":"3766:29:62"},"variableNames":[{"name":"value0","nativeSrc":"3756:6:62","nodeType":"YulIdentifier","src":"3756:6:62"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3615:186:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3651:9:62","nodeType":"YulTypedName","src":"3651:9:62","type":""},{"name":"dataEnd","nativeSrc":"3662:7:62","nodeType":"YulTypedName","src":"3662:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3674:6:62","nodeType":"YulTypedName","src":"3674:6:62","type":""}],"src":"3615:186:62"},{"body":{"nativeSrc":"3907:76:62","nodeType":"YulBlock","src":"3907:76:62","statements":[{"nativeSrc":"3917:26:62","nodeType":"YulAssignment","src":"3917:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3929:9:62","nodeType":"YulIdentifier","src":"3929:9:62"},{"kind":"number","nativeSrc":"3940:2:62","nodeType":"YulLiteral","src":"3940:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3925:3:62","nodeType":"YulIdentifier","src":"3925:3:62"},"nativeSrc":"3925:18:62","nodeType":"YulFunctionCall","src":"3925:18:62"},"variableNames":[{"name":"tail","nativeSrc":"3917:4:62","nodeType":"YulIdentifier","src":"3917:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3959:9:62","nodeType":"YulIdentifier","src":"3959:9:62"},{"name":"value0","nativeSrc":"3970:6:62","nodeType":"YulIdentifier","src":"3970:6:62"}],"functionName":{"name":"mstore","nativeSrc":"3952:6:62","nodeType":"YulIdentifier","src":"3952:6:62"},"nativeSrc":"3952:25:62","nodeType":"YulFunctionCall","src":"3952:25:62"},"nativeSrc":"3952:25:62","nodeType":"YulExpressionStatement","src":"3952:25:62"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"3806:177:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3876:9:62","nodeType":"YulTypedName","src":"3876:9:62","type":""},{"name":"value0","nativeSrc":"3887:6:62","nodeType":"YulTypedName","src":"3887:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3898:4:62","nodeType":"YulTypedName","src":"3898:4:62","type":""}],"src":"3806:177:62"},{"body":{"nativeSrc":"4060:275:62","nodeType":"YulBlock","src":"4060:275:62","statements":[{"body":{"nativeSrc":"4109:16:62","nodeType":"YulBlock","src":"4109:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4118:1:62","nodeType":"YulLiteral","src":"4118:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"4121:1:62","nodeType":"YulLiteral","src":"4121:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4111:6:62","nodeType":"YulIdentifier","src":"4111:6:62"},"nativeSrc":"4111:12:62","nodeType":"YulFunctionCall","src":"4111:12:62"},"nativeSrc":"4111:12:62","nodeType":"YulExpressionStatement","src":"4111:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4088:6:62","nodeType":"YulIdentifier","src":"4088:6:62"},{"kind":"number","nativeSrc":"4096:4:62","nodeType":"YulLiteral","src":"4096:4:62","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4084:3:62","nodeType":"YulIdentifier","src":"4084:3:62"},"nativeSrc":"4084:17:62","nodeType":"YulFunctionCall","src":"4084:17:62"},{"name":"end","nativeSrc":"4103:3:62","nodeType":"YulIdentifier","src":"4103:3:62"}],"functionName":{"name":"slt","nativeSrc":"4080:3:62","nodeType":"YulIdentifier","src":"4080:3:62"},"nativeSrc":"4080:27:62","nodeType":"YulFunctionCall","src":"4080:27:62"}],"functionName":{"name":"iszero","nativeSrc":"4073:6:62","nodeType":"YulIdentifier","src":"4073:6:62"},"nativeSrc":"4073:35:62","nodeType":"YulFunctionCall","src":"4073:35:62"},"nativeSrc":"4070:55:62","nodeType":"YulIf","src":"4070:55:62"},{"nativeSrc":"4134:30:62","nodeType":"YulAssignment","src":"4134:30:62","value":{"arguments":[{"name":"offset","nativeSrc":"4157:6:62","nodeType":"YulIdentifier","src":"4157:6:62"}],"functionName":{"name":"calldataload","nativeSrc":"4144:12:62","nodeType":"YulIdentifier","src":"4144:12:62"},"nativeSrc":"4144:20:62","nodeType":"YulFunctionCall","src":"4144:20:62"},"variableNames":[{"name":"length","nativeSrc":"4134:6:62","nodeType":"YulIdentifier","src":"4134:6:62"}]},{"body":{"nativeSrc":"4207:16:62","nodeType":"YulBlock","src":"4207:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4216:1:62","nodeType":"YulLiteral","src":"4216:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"4219:1:62","nodeType":"YulLiteral","src":"4219:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4209:6:62","nodeType":"YulIdentifier","src":"4209:6:62"},"nativeSrc":"4209:12:62","nodeType":"YulFunctionCall","src":"4209:12:62"},"nativeSrc":"4209:12:62","nodeType":"YulExpressionStatement","src":"4209:12:62"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4179:6:62","nodeType":"YulIdentifier","src":"4179:6:62"},{"kind":"number","nativeSrc":"4187:18:62","nodeType":"YulLiteral","src":"4187:18:62","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4176:2:62","nodeType":"YulIdentifier","src":"4176:2:62"},"nativeSrc":"4176:30:62","nodeType":"YulFunctionCall","src":"4176:30:62"},"nativeSrc":"4173:50:62","nodeType":"YulIf","src":"4173:50:62"},{"nativeSrc":"4232:29:62","nodeType":"YulAssignment","src":"4232:29:62","value":{"arguments":[{"name":"offset","nativeSrc":"4248:6:62","nodeType":"YulIdentifier","src":"4248:6:62"},{"kind":"number","nativeSrc":"4256:4:62","nodeType":"YulLiteral","src":"4256:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4244:3:62","nodeType":"YulIdentifier","src":"4244:3:62"},"nativeSrc":"4244:17:62","nodeType":"YulFunctionCall","src":"4244:17:62"},"variableNames":[{"name":"arrayPos","nativeSrc":"4232:8:62","nodeType":"YulIdentifier","src":"4232:8:62"}]},{"body":{"nativeSrc":"4313:16:62","nodeType":"YulBlock","src":"4313:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4322:1:62","nodeType":"YulLiteral","src":"4322:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"4325:1:62","nodeType":"YulLiteral","src":"4325:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4315:6:62","nodeType":"YulIdentifier","src":"4315:6:62"},"nativeSrc":"4315:12:62","nodeType":"YulFunctionCall","src":"4315:12:62"},"nativeSrc":"4315:12:62","nodeType":"YulExpressionStatement","src":"4315:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4284:6:62","nodeType":"YulIdentifier","src":"4284:6:62"},{"name":"length","nativeSrc":"4292:6:62","nodeType":"YulIdentifier","src":"4292:6:62"}],"functionName":{"name":"add","nativeSrc":"4280:3:62","nodeType":"YulIdentifier","src":"4280:3:62"},"nativeSrc":"4280:19:62","nodeType":"YulFunctionCall","src":"4280:19:62"},{"kind":"number","nativeSrc":"4301:4:62","nodeType":"YulLiteral","src":"4301:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4276:3:62","nodeType":"YulIdentifier","src":"4276:3:62"},"nativeSrc":"4276:30:62","nodeType":"YulFunctionCall","src":"4276:30:62"},{"name":"end","nativeSrc":"4308:3:62","nodeType":"YulIdentifier","src":"4308:3:62"}],"functionName":{"name":"gt","nativeSrc":"4273:2:62","nodeType":"YulIdentifier","src":"4273:2:62"},"nativeSrc":"4273:39:62","nodeType":"YulFunctionCall","src":"4273:39:62"},"nativeSrc":"4270:59:62","nodeType":"YulIf","src":"4270:59:62"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"3988:347:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4023:6:62","nodeType":"YulTypedName","src":"4023:6:62","type":""},{"name":"end","nativeSrc":"4031:3:62","nodeType":"YulTypedName","src":"4031:3:62","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4039:8:62","nodeType":"YulTypedName","src":"4039:8:62","type":""},{"name":"length","nativeSrc":"4049:6:62","nodeType":"YulTypedName","src":"4049:6:62","type":""}],"src":"3988:347:62"},{"body":{"nativeSrc":"4463:428:62","nodeType":"YulBlock","src":"4463:428:62","statements":[{"body":{"nativeSrc":"4509:16:62","nodeType":"YulBlock","src":"4509:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4518:1:62","nodeType":"YulLiteral","src":"4518:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"4521:1:62","nodeType":"YulLiteral","src":"4521:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4511:6:62","nodeType":"YulIdentifier","src":"4511:6:62"},"nativeSrc":"4511:12:62","nodeType":"YulFunctionCall","src":"4511:12:62"},"nativeSrc":"4511:12:62","nodeType":"YulExpressionStatement","src":"4511:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4484:7:62","nodeType":"YulIdentifier","src":"4484:7:62"},{"name":"headStart","nativeSrc":"4493:9:62","nodeType":"YulIdentifier","src":"4493:9:62"}],"functionName":{"name":"sub","nativeSrc":"4480:3:62","nodeType":"YulIdentifier","src":"4480:3:62"},"nativeSrc":"4480:23:62","nodeType":"YulFunctionCall","src":"4480:23:62"},{"kind":"number","nativeSrc":"4505:2:62","nodeType":"YulLiteral","src":"4505:2:62","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4476:3:62","nodeType":"YulIdentifier","src":"4476:3:62"},"nativeSrc":"4476:32:62","nodeType":"YulFunctionCall","src":"4476:32:62"},"nativeSrc":"4473:52:62","nodeType":"YulIf","src":"4473:52:62"},{"nativeSrc":"4534:39:62","nodeType":"YulAssignment","src":"4534:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"4563:9:62","nodeType":"YulIdentifier","src":"4563:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4544:18:62","nodeType":"YulIdentifier","src":"4544:18:62"},"nativeSrc":"4544:29:62","nodeType":"YulFunctionCall","src":"4544:29:62"},"variableNames":[{"name":"value0","nativeSrc":"4534:6:62","nodeType":"YulIdentifier","src":"4534:6:62"}]},{"nativeSrc":"4582:42:62","nodeType":"YulAssignment","src":"4582:42:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4609:9:62","nodeType":"YulIdentifier","src":"4609:9:62"},{"kind":"number","nativeSrc":"4620:2:62","nodeType":"YulLiteral","src":"4620:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4605:3:62","nodeType":"YulIdentifier","src":"4605:3:62"},"nativeSrc":"4605:18:62","nodeType":"YulFunctionCall","src":"4605:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"4592:12:62","nodeType":"YulIdentifier","src":"4592:12:62"},"nativeSrc":"4592:32:62","nodeType":"YulFunctionCall","src":"4592:32:62"},"variableNames":[{"name":"value1","nativeSrc":"4582:6:62","nodeType":"YulIdentifier","src":"4582:6:62"}]},{"nativeSrc":"4633:46:62","nodeType":"YulVariableDeclaration","src":"4633:46:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4664:9:62","nodeType":"YulIdentifier","src":"4664:9:62"},{"kind":"number","nativeSrc":"4675:2:62","nodeType":"YulLiteral","src":"4675:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4660:3:62","nodeType":"YulIdentifier","src":"4660:3:62"},"nativeSrc":"4660:18:62","nodeType":"YulFunctionCall","src":"4660:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"4647:12:62","nodeType":"YulIdentifier","src":"4647:12:62"},"nativeSrc":"4647:32:62","nodeType":"YulFunctionCall","src":"4647:32:62"},"variables":[{"name":"offset","nativeSrc":"4637:6:62","nodeType":"YulTypedName","src":"4637:6:62","type":""}]},{"body":{"nativeSrc":"4722:16:62","nodeType":"YulBlock","src":"4722:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4731:1:62","nodeType":"YulLiteral","src":"4731:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"4734:1:62","nodeType":"YulLiteral","src":"4734:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4724:6:62","nodeType":"YulIdentifier","src":"4724:6:62"},"nativeSrc":"4724:12:62","nodeType":"YulFunctionCall","src":"4724:12:62"},"nativeSrc":"4724:12:62","nodeType":"YulExpressionStatement","src":"4724:12:62"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4694:6:62","nodeType":"YulIdentifier","src":"4694:6:62"},{"kind":"number","nativeSrc":"4702:18:62","nodeType":"YulLiteral","src":"4702:18:62","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4691:2:62","nodeType":"YulIdentifier","src":"4691:2:62"},"nativeSrc":"4691:30:62","nodeType":"YulFunctionCall","src":"4691:30:62"},"nativeSrc":"4688:50:62","nodeType":"YulIf","src":"4688:50:62"},{"nativeSrc":"4747:84:62","nodeType":"YulVariableDeclaration","src":"4747:84:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4803:9:62","nodeType":"YulIdentifier","src":"4803:9:62"},{"name":"offset","nativeSrc":"4814:6:62","nodeType":"YulIdentifier","src":"4814:6:62"}],"functionName":{"name":"add","nativeSrc":"4799:3:62","nodeType":"YulIdentifier","src":"4799:3:62"},"nativeSrc":"4799:22:62","nodeType":"YulFunctionCall","src":"4799:22:62"},{"name":"dataEnd","nativeSrc":"4823:7:62","nodeType":"YulIdentifier","src":"4823:7:62"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4773:25:62","nodeType":"YulIdentifier","src":"4773:25:62"},"nativeSrc":"4773:58:62","nodeType":"YulFunctionCall","src":"4773:58:62"},"variables":[{"name":"value2_1","nativeSrc":"4751:8:62","nodeType":"YulTypedName","src":"4751:8:62","type":""},{"name":"value3_1","nativeSrc":"4761:8:62","nodeType":"YulTypedName","src":"4761:8:62","type":""}]},{"nativeSrc":"4840:18:62","nodeType":"YulAssignment","src":"4840:18:62","value":{"name":"value2_1","nativeSrc":"4850:8:62","nodeType":"YulIdentifier","src":"4850:8:62"},"variableNames":[{"name":"value2","nativeSrc":"4840:6:62","nodeType":"YulIdentifier","src":"4840:6:62"}]},{"nativeSrc":"4867:18:62","nodeType":"YulAssignment","src":"4867:18:62","value":{"name":"value3_1","nativeSrc":"4877:8:62","nodeType":"YulIdentifier","src":"4877:8:62"},"variableNames":[{"name":"value3","nativeSrc":"4867:6:62","nodeType":"YulIdentifier","src":"4867:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"4340:551:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4405:9:62","nodeType":"YulTypedName","src":"4405:9:62","type":""},{"name":"dataEnd","nativeSrc":"4416:7:62","nodeType":"YulTypedName","src":"4416:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4428:6:62","nodeType":"YulTypedName","src":"4428:6:62","type":""},{"name":"value1","nativeSrc":"4436:6:62","nodeType":"YulTypedName","src":"4436:6:62","type":""},{"name":"value2","nativeSrc":"4444:6:62","nodeType":"YulTypedName","src":"4444:6:62","type":""},{"name":"value3","nativeSrc":"4452:6:62","nodeType":"YulTypedName","src":"4452:6:62","type":""}],"src":"4340:551:62"},{"body":{"nativeSrc":"4966:110:62","nodeType":"YulBlock","src":"4966:110:62","statements":[{"body":{"nativeSrc":"5012:16:62","nodeType":"YulBlock","src":"5012:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5021:1:62","nodeType":"YulLiteral","src":"5021:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"5024:1:62","nodeType":"YulLiteral","src":"5024:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5014:6:62","nodeType":"YulIdentifier","src":"5014:6:62"},"nativeSrc":"5014:12:62","nodeType":"YulFunctionCall","src":"5014:12:62"},"nativeSrc":"5014:12:62","nodeType":"YulExpressionStatement","src":"5014:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4987:7:62","nodeType":"YulIdentifier","src":"4987:7:62"},{"name":"headStart","nativeSrc":"4996:9:62","nodeType":"YulIdentifier","src":"4996:9:62"}],"functionName":{"name":"sub","nativeSrc":"4983:3:62","nodeType":"YulIdentifier","src":"4983:3:62"},"nativeSrc":"4983:23:62","nodeType":"YulFunctionCall","src":"4983:23:62"},{"kind":"number","nativeSrc":"5008:2:62","nodeType":"YulLiteral","src":"5008:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4979:3:62","nodeType":"YulIdentifier","src":"4979:3:62"},"nativeSrc":"4979:32:62","nodeType":"YulFunctionCall","src":"4979:32:62"},"nativeSrc":"4976:52:62","nodeType":"YulIf","src":"4976:52:62"},{"nativeSrc":"5037:33:62","nodeType":"YulAssignment","src":"5037:33:62","value":{"arguments":[{"name":"headStart","nativeSrc":"5060:9:62","nodeType":"YulIdentifier","src":"5060:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"5047:12:62","nodeType":"YulIdentifier","src":"5047:12:62"},"nativeSrc":"5047:23:62","nodeType":"YulFunctionCall","src":"5047:23:62"},"variableNames":[{"name":"value0","nativeSrc":"5037:6:62","nodeType":"YulIdentifier","src":"5037:6:62"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"4896:180:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4932:9:62","nodeType":"YulTypedName","src":"4932:9:62","type":""},{"name":"dataEnd","nativeSrc":"4943:7:62","nodeType":"YulTypedName","src":"4943:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4955:6:62","nodeType":"YulTypedName","src":"4955:6:62","type":""}],"src":"4896:180:62"},{"body":{"nativeSrc":"5213:125:62","nodeType":"YulBlock","src":"5213:125:62","statements":[{"nativeSrc":"5223:26:62","nodeType":"YulAssignment","src":"5223:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"5235:9:62","nodeType":"YulIdentifier","src":"5235:9:62"},{"kind":"number","nativeSrc":"5246:2:62","nodeType":"YulLiteral","src":"5246:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5231:3:62","nodeType":"YulIdentifier","src":"5231:3:62"},"nativeSrc":"5231:18:62","nodeType":"YulFunctionCall","src":"5231:18:62"},"variableNames":[{"name":"tail","nativeSrc":"5223:4:62","nodeType":"YulIdentifier","src":"5223:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5265:9:62","nodeType":"YulIdentifier","src":"5265:9:62"},{"arguments":[{"name":"value0","nativeSrc":"5280:6:62","nodeType":"YulIdentifier","src":"5280:6:62"},{"kind":"number","nativeSrc":"5288:42:62","nodeType":"YulLiteral","src":"5288:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5276:3:62","nodeType":"YulIdentifier","src":"5276:3:62"},"nativeSrc":"5276:55:62","nodeType":"YulFunctionCall","src":"5276:55:62"}],"functionName":{"name":"mstore","nativeSrc":"5258:6:62","nodeType":"YulIdentifier","src":"5258:6:62"},"nativeSrc":"5258:74:62","nodeType":"YulFunctionCall","src":"5258:74:62"},"nativeSrc":"5258:74:62","nodeType":"YulExpressionStatement","src":"5258:74:62"}]},"name":"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3700__to_t_address__fromStack_reversed","nativeSrc":"5081:257:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5182:9:62","nodeType":"YulTypedName","src":"5182:9:62","type":""},{"name":"value0","nativeSrc":"5193:6:62","nodeType":"YulTypedName","src":"5193:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5204:4:62","nodeType":"YulTypedName","src":"5204:4:62","type":""}],"src":"5081:257:62"},{"body":{"nativeSrc":"5427:263:62","nodeType":"YulBlock","src":"5427:263:62","statements":[{"body":{"nativeSrc":"5473:16:62","nodeType":"YulBlock","src":"5473:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5482:1:62","nodeType":"YulLiteral","src":"5482:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"5485:1:62","nodeType":"YulLiteral","src":"5485:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5475:6:62","nodeType":"YulIdentifier","src":"5475:6:62"},"nativeSrc":"5475:12:62","nodeType":"YulFunctionCall","src":"5475:12:62"},"nativeSrc":"5475:12:62","nodeType":"YulExpressionStatement","src":"5475:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5448:7:62","nodeType":"YulIdentifier","src":"5448:7:62"},{"name":"headStart","nativeSrc":"5457:9:62","nodeType":"YulIdentifier","src":"5457:9:62"}],"functionName":{"name":"sub","nativeSrc":"5444:3:62","nodeType":"YulIdentifier","src":"5444:3:62"},"nativeSrc":"5444:23:62","nodeType":"YulFunctionCall","src":"5444:23:62"},{"kind":"number","nativeSrc":"5469:2:62","nodeType":"YulLiteral","src":"5469:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5440:3:62","nodeType":"YulIdentifier","src":"5440:3:62"},"nativeSrc":"5440:32:62","nodeType":"YulFunctionCall","src":"5440:32:62"},"nativeSrc":"5437:52:62","nodeType":"YulIf","src":"5437:52:62"},{"nativeSrc":"5498:39:62","nodeType":"YulAssignment","src":"5498:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"5527:9:62","nodeType":"YulIdentifier","src":"5527:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5508:18:62","nodeType":"YulIdentifier","src":"5508:18:62"},"nativeSrc":"5508:29:62","nodeType":"YulFunctionCall","src":"5508:29:62"},"variableNames":[{"name":"value0","nativeSrc":"5498:6:62","nodeType":"YulIdentifier","src":"5498:6:62"}]},{"nativeSrc":"5546:45:62","nodeType":"YulVariableDeclaration","src":"5546:45:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5576:9:62","nodeType":"YulIdentifier","src":"5576:9:62"},{"kind":"number","nativeSrc":"5587:2:62","nodeType":"YulLiteral","src":"5587:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5572:3:62","nodeType":"YulIdentifier","src":"5572:3:62"},"nativeSrc":"5572:18:62","nodeType":"YulFunctionCall","src":"5572:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"5559:12:62","nodeType":"YulIdentifier","src":"5559:12:62"},"nativeSrc":"5559:32:62","nodeType":"YulFunctionCall","src":"5559:32:62"},"variables":[{"name":"value","nativeSrc":"5550:5:62","nodeType":"YulTypedName","src":"5550:5:62","type":""}]},{"body":{"nativeSrc":"5644:16:62","nodeType":"YulBlock","src":"5644:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5653:1:62","nodeType":"YulLiteral","src":"5653:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"5656:1:62","nodeType":"YulLiteral","src":"5656:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5646:6:62","nodeType":"YulIdentifier","src":"5646:6:62"},"nativeSrc":"5646:12:62","nodeType":"YulFunctionCall","src":"5646:12:62"},"nativeSrc":"5646:12:62","nodeType":"YulExpressionStatement","src":"5646:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5613:5:62","nodeType":"YulIdentifier","src":"5613:5:62"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5634:5:62","nodeType":"YulIdentifier","src":"5634:5:62"}],"functionName":{"name":"iszero","nativeSrc":"5627:6:62","nodeType":"YulIdentifier","src":"5627:6:62"},"nativeSrc":"5627:13:62","nodeType":"YulFunctionCall","src":"5627:13:62"}],"functionName":{"name":"iszero","nativeSrc":"5620:6:62","nodeType":"YulIdentifier","src":"5620:6:62"},"nativeSrc":"5620:21:62","nodeType":"YulFunctionCall","src":"5620:21:62"}],"functionName":{"name":"eq","nativeSrc":"5610:2:62","nodeType":"YulIdentifier","src":"5610:2:62"},"nativeSrc":"5610:32:62","nodeType":"YulFunctionCall","src":"5610:32:62"}],"functionName":{"name":"iszero","nativeSrc":"5603:6:62","nodeType":"YulIdentifier","src":"5603:6:62"},"nativeSrc":"5603:40:62","nodeType":"YulFunctionCall","src":"5603:40:62"},"nativeSrc":"5600:60:62","nodeType":"YulIf","src":"5600:60:62"},{"nativeSrc":"5669:15:62","nodeType":"YulAssignment","src":"5669:15:62","value":{"name":"value","nativeSrc":"5679:5:62","nodeType":"YulIdentifier","src":"5679:5:62"},"variableNames":[{"name":"value1","nativeSrc":"5669:6:62","nodeType":"YulIdentifier","src":"5669:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"5343:347:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5385:9:62","nodeType":"YulTypedName","src":"5385:9:62","type":""},{"name":"dataEnd","nativeSrc":"5396:7:62","nodeType":"YulTypedName","src":"5396:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5408:6:62","nodeType":"YulTypedName","src":"5408:6:62","type":""},{"name":"value1","nativeSrc":"5416:6:62","nodeType":"YulTypedName","src":"5416:6:62","type":""}],"src":"5343:347:62"},{"body":{"nativeSrc":"5835:486:62","nodeType":"YulBlock","src":"5835:486:62","statements":[{"body":{"nativeSrc":"5882:16:62","nodeType":"YulBlock","src":"5882:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5891:1:62","nodeType":"YulLiteral","src":"5891:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"5894:1:62","nodeType":"YulLiteral","src":"5894:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5884:6:62","nodeType":"YulIdentifier","src":"5884:6:62"},"nativeSrc":"5884:12:62","nodeType":"YulFunctionCall","src":"5884:12:62"},"nativeSrc":"5884:12:62","nodeType":"YulExpressionStatement","src":"5884:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5856:7:62","nodeType":"YulIdentifier","src":"5856:7:62"},{"name":"headStart","nativeSrc":"5865:9:62","nodeType":"YulIdentifier","src":"5865:9:62"}],"functionName":{"name":"sub","nativeSrc":"5852:3:62","nodeType":"YulIdentifier","src":"5852:3:62"},"nativeSrc":"5852:23:62","nodeType":"YulFunctionCall","src":"5852:23:62"},{"kind":"number","nativeSrc":"5877:3:62","nodeType":"YulLiteral","src":"5877:3:62","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"5848:3:62","nodeType":"YulIdentifier","src":"5848:3:62"},"nativeSrc":"5848:33:62","nodeType":"YulFunctionCall","src":"5848:33:62"},"nativeSrc":"5845:53:62","nodeType":"YulIf","src":"5845:53:62"},{"nativeSrc":"5907:39:62","nodeType":"YulAssignment","src":"5907:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"5936:9:62","nodeType":"YulIdentifier","src":"5936:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5917:18:62","nodeType":"YulIdentifier","src":"5917:18:62"},"nativeSrc":"5917:29:62","nodeType":"YulFunctionCall","src":"5917:29:62"},"variableNames":[{"name":"value0","nativeSrc":"5907:6:62","nodeType":"YulIdentifier","src":"5907:6:62"}]},{"nativeSrc":"5955:48:62","nodeType":"YulAssignment","src":"5955:48:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5988:9:62","nodeType":"YulIdentifier","src":"5988:9:62"},{"kind":"number","nativeSrc":"5999:2:62","nodeType":"YulLiteral","src":"5999:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5984:3:62","nodeType":"YulIdentifier","src":"5984:3:62"},"nativeSrc":"5984:18:62","nodeType":"YulFunctionCall","src":"5984:18:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5965:18:62","nodeType":"YulIdentifier","src":"5965:18:62"},"nativeSrc":"5965:38:62","nodeType":"YulFunctionCall","src":"5965:38:62"},"variableNames":[{"name":"value1","nativeSrc":"5955:6:62","nodeType":"YulIdentifier","src":"5955:6:62"}]},{"nativeSrc":"6012:42:62","nodeType":"YulAssignment","src":"6012:42:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6039:9:62","nodeType":"YulIdentifier","src":"6039:9:62"},{"kind":"number","nativeSrc":"6050:2:62","nodeType":"YulLiteral","src":"6050:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6035:3:62","nodeType":"YulIdentifier","src":"6035:3:62"},"nativeSrc":"6035:18:62","nodeType":"YulFunctionCall","src":"6035:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"6022:12:62","nodeType":"YulIdentifier","src":"6022:12:62"},"nativeSrc":"6022:32:62","nodeType":"YulFunctionCall","src":"6022:32:62"},"variableNames":[{"name":"value2","nativeSrc":"6012:6:62","nodeType":"YulIdentifier","src":"6012:6:62"}]},{"nativeSrc":"6063:46:62","nodeType":"YulVariableDeclaration","src":"6063:46:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6094:9:62","nodeType":"YulIdentifier","src":"6094:9:62"},{"kind":"number","nativeSrc":"6105:2:62","nodeType":"YulLiteral","src":"6105:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6090:3:62","nodeType":"YulIdentifier","src":"6090:3:62"},"nativeSrc":"6090:18:62","nodeType":"YulFunctionCall","src":"6090:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"6077:12:62","nodeType":"YulIdentifier","src":"6077:12:62"},"nativeSrc":"6077:32:62","nodeType":"YulFunctionCall","src":"6077:32:62"},"variables":[{"name":"offset","nativeSrc":"6067:6:62","nodeType":"YulTypedName","src":"6067:6:62","type":""}]},{"body":{"nativeSrc":"6152:16:62","nodeType":"YulBlock","src":"6152:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6161:1:62","nodeType":"YulLiteral","src":"6161:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"6164:1:62","nodeType":"YulLiteral","src":"6164:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6154:6:62","nodeType":"YulIdentifier","src":"6154:6:62"},"nativeSrc":"6154:12:62","nodeType":"YulFunctionCall","src":"6154:12:62"},"nativeSrc":"6154:12:62","nodeType":"YulExpressionStatement","src":"6154:12:62"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6124:6:62","nodeType":"YulIdentifier","src":"6124:6:62"},{"kind":"number","nativeSrc":"6132:18:62","nodeType":"YulLiteral","src":"6132:18:62","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6121:2:62","nodeType":"YulIdentifier","src":"6121:2:62"},"nativeSrc":"6121:30:62","nodeType":"YulFunctionCall","src":"6121:30:62"},"nativeSrc":"6118:50:62","nodeType":"YulIf","src":"6118:50:62"},{"nativeSrc":"6177:84:62","nodeType":"YulVariableDeclaration","src":"6177:84:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6233:9:62","nodeType":"YulIdentifier","src":"6233:9:62"},{"name":"offset","nativeSrc":"6244:6:62","nodeType":"YulIdentifier","src":"6244:6:62"}],"functionName":{"name":"add","nativeSrc":"6229:3:62","nodeType":"YulIdentifier","src":"6229:3:62"},"nativeSrc":"6229:22:62","nodeType":"YulFunctionCall","src":"6229:22:62"},{"name":"dataEnd","nativeSrc":"6253:7:62","nodeType":"YulIdentifier","src":"6253:7:62"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"6203:25:62","nodeType":"YulIdentifier","src":"6203:25:62"},"nativeSrc":"6203:58:62","nodeType":"YulFunctionCall","src":"6203:58:62"},"variables":[{"name":"value3_1","nativeSrc":"6181:8:62","nodeType":"YulTypedName","src":"6181:8:62","type":""},{"name":"value4_1","nativeSrc":"6191:8:62","nodeType":"YulTypedName","src":"6191:8:62","type":""}]},{"nativeSrc":"6270:18:62","nodeType":"YulAssignment","src":"6270:18:62","value":{"name":"value3_1","nativeSrc":"6280:8:62","nodeType":"YulIdentifier","src":"6280:8:62"},"variableNames":[{"name":"value3","nativeSrc":"6270:6:62","nodeType":"YulIdentifier","src":"6270:6:62"}]},{"nativeSrc":"6297:18:62","nodeType":"YulAssignment","src":"6297:18:62","value":{"name":"value4_1","nativeSrc":"6307:8:62","nodeType":"YulIdentifier","src":"6307:8:62"},"variableNames":[{"name":"value4","nativeSrc":"6297:6:62","nodeType":"YulIdentifier","src":"6297:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"5695:626:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5769:9:62","nodeType":"YulTypedName","src":"5769:9:62","type":""},{"name":"dataEnd","nativeSrc":"5780:7:62","nodeType":"YulTypedName","src":"5780:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5792:6:62","nodeType":"YulTypedName","src":"5792:6:62","type":""},{"name":"value1","nativeSrc":"5800:6:62","nodeType":"YulTypedName","src":"5800:6:62","type":""},{"name":"value2","nativeSrc":"5808:6:62","nodeType":"YulTypedName","src":"5808:6:62","type":""},{"name":"value3","nativeSrc":"5816:6:62","nodeType":"YulTypedName","src":"5816:6:62","type":""},{"name":"value4","nativeSrc":"5824:6:62","nodeType":"YulTypedName","src":"5824:6:62","type":""}],"src":"5695:626:62"},{"body":{"nativeSrc":"6427:76:62","nodeType":"YulBlock","src":"6427:76:62","statements":[{"nativeSrc":"6437:26:62","nodeType":"YulAssignment","src":"6437:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"6449:9:62","nodeType":"YulIdentifier","src":"6449:9:62"},{"kind":"number","nativeSrc":"6460:2:62","nodeType":"YulLiteral","src":"6460:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6445:3:62","nodeType":"YulIdentifier","src":"6445:3:62"},"nativeSrc":"6445:18:62","nodeType":"YulFunctionCall","src":"6445:18:62"},"variableNames":[{"name":"tail","nativeSrc":"6437:4:62","nodeType":"YulIdentifier","src":"6437:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6479:9:62","nodeType":"YulIdentifier","src":"6479:9:62"},{"name":"value0","nativeSrc":"6490:6:62","nodeType":"YulIdentifier","src":"6490:6:62"}],"functionName":{"name":"mstore","nativeSrc":"6472:6:62","nodeType":"YulIdentifier","src":"6472:6:62"},"nativeSrc":"6472:25:62","nodeType":"YulFunctionCall","src":"6472:25:62"},"nativeSrc":"6472:25:62","nodeType":"YulExpressionStatement","src":"6472:25:62"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"6326:177:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6396:9:62","nodeType":"YulTypedName","src":"6396:9:62","type":""},{"name":"value0","nativeSrc":"6407:6:62","nodeType":"YulTypedName","src":"6407:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6418:4:62","nodeType":"YulTypedName","src":"6418:4:62","type":""}],"src":"6326:177:62"},{"body":{"nativeSrc":"6595:173:62","nodeType":"YulBlock","src":"6595:173:62","statements":[{"body":{"nativeSrc":"6641:16:62","nodeType":"YulBlock","src":"6641:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6650:1:62","nodeType":"YulLiteral","src":"6650:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"6653:1:62","nodeType":"YulLiteral","src":"6653:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6643:6:62","nodeType":"YulIdentifier","src":"6643:6:62"},"nativeSrc":"6643:12:62","nodeType":"YulFunctionCall","src":"6643:12:62"},"nativeSrc":"6643:12:62","nodeType":"YulExpressionStatement","src":"6643:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6616:7:62","nodeType":"YulIdentifier","src":"6616:7:62"},{"name":"headStart","nativeSrc":"6625:9:62","nodeType":"YulIdentifier","src":"6625:9:62"}],"functionName":{"name":"sub","nativeSrc":"6612:3:62","nodeType":"YulIdentifier","src":"6612:3:62"},"nativeSrc":"6612:23:62","nodeType":"YulFunctionCall","src":"6612:23:62"},{"kind":"number","nativeSrc":"6637:2:62","nodeType":"YulLiteral","src":"6637:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6608:3:62","nodeType":"YulIdentifier","src":"6608:3:62"},"nativeSrc":"6608:32:62","nodeType":"YulFunctionCall","src":"6608:32:62"},"nativeSrc":"6605:52:62","nodeType":"YulIf","src":"6605:52:62"},{"nativeSrc":"6666:39:62","nodeType":"YulAssignment","src":"6666:39:62","value":{"arguments":[{"name":"headStart","nativeSrc":"6695:9:62","nodeType":"YulIdentifier","src":"6695:9:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6676:18:62","nodeType":"YulIdentifier","src":"6676:18:62"},"nativeSrc":"6676:29:62","nodeType":"YulFunctionCall","src":"6676:29:62"},"variableNames":[{"name":"value0","nativeSrc":"6666:6:62","nodeType":"YulIdentifier","src":"6666:6:62"}]},{"nativeSrc":"6714:48:62","nodeType":"YulAssignment","src":"6714:48:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6747:9:62","nodeType":"YulIdentifier","src":"6747:9:62"},{"kind":"number","nativeSrc":"6758:2:62","nodeType":"YulLiteral","src":"6758:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6743:3:62","nodeType":"YulIdentifier","src":"6743:3:62"},"nativeSrc":"6743:18:62","nodeType":"YulFunctionCall","src":"6743:18:62"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6724:18:62","nodeType":"YulIdentifier","src":"6724:18:62"},"nativeSrc":"6724:38:62","nodeType":"YulFunctionCall","src":"6724:38:62"},"variableNames":[{"name":"value1","nativeSrc":"6714:6:62","nodeType":"YulIdentifier","src":"6714:6:62"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"6508:260:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6553:9:62","nodeType":"YulTypedName","src":"6553:9:62","type":""},{"name":"dataEnd","nativeSrc":"6564:7:62","nodeType":"YulTypedName","src":"6564:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6576:6:62","nodeType":"YulTypedName","src":"6576:6:62","type":""},{"name":"value1","nativeSrc":"6584:6:62","nodeType":"YulTypedName","src":"6584:6:62","type":""}],"src":"6508:260:62"},{"body":{"nativeSrc":"6822:233:62","nodeType":"YulBlock","src":"6822:233:62","statements":[{"nativeSrc":"6832:17:62","nodeType":"YulAssignment","src":"6832:17:62","value":{"arguments":[{"name":"x","nativeSrc":"6844:1:62","nodeType":"YulIdentifier","src":"6844:1:62"},{"name":"y","nativeSrc":"6847:1:62","nodeType":"YulIdentifier","src":"6847:1:62"}],"functionName":{"name":"sub","nativeSrc":"6840:3:62","nodeType":"YulIdentifier","src":"6840:3:62"},"nativeSrc":"6840:9:62","nodeType":"YulFunctionCall","src":"6840:9:62"},"variableNames":[{"name":"diff","nativeSrc":"6832:4:62","nodeType":"YulIdentifier","src":"6832:4:62"}]},{"body":{"nativeSrc":"6881:168:62","nodeType":"YulBlock","src":"6881:168:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6902:1:62","nodeType":"YulLiteral","src":"6902:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"6905:77:62","nodeType":"YulLiteral","src":"6905:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6895:6:62","nodeType":"YulIdentifier","src":"6895:6:62"},"nativeSrc":"6895:88:62","nodeType":"YulFunctionCall","src":"6895:88:62"},"nativeSrc":"6895:88:62","nodeType":"YulExpressionStatement","src":"6895:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7003:1:62","nodeType":"YulLiteral","src":"7003:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"7006:4:62","nodeType":"YulLiteral","src":"7006:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6996:6:62","nodeType":"YulIdentifier","src":"6996:6:62"},"nativeSrc":"6996:15:62","nodeType":"YulFunctionCall","src":"6996:15:62"},"nativeSrc":"6996:15:62","nodeType":"YulExpressionStatement","src":"6996:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7031:1:62","nodeType":"YulLiteral","src":"7031:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"7034:4:62","nodeType":"YulLiteral","src":"7034:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7024:6:62","nodeType":"YulIdentifier","src":"7024:6:62"},"nativeSrc":"7024:15:62","nodeType":"YulFunctionCall","src":"7024:15:62"},"nativeSrc":"7024:15:62","nodeType":"YulExpressionStatement","src":"7024:15:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6864:4:62","nodeType":"YulIdentifier","src":"6864:4:62"},{"name":"x","nativeSrc":"6870:1:62","nodeType":"YulIdentifier","src":"6870:1:62"}],"functionName":{"name":"gt","nativeSrc":"6861:2:62","nodeType":"YulIdentifier","src":"6861:2:62"},"nativeSrc":"6861:11:62","nodeType":"YulFunctionCall","src":"6861:11:62"},"nativeSrc":"6858:191:62","nodeType":"YulIf","src":"6858:191:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"6773:282:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6804:1:62","nodeType":"YulTypedName","src":"6804:1:62","type":""},{"name":"y","nativeSrc":"6807:1:62","nodeType":"YulTypedName","src":"6807:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6813:4:62","nodeType":"YulTypedName","src":"6813:4:62","type":""}],"src":"6773:282:62"},{"body":{"nativeSrc":"7217:241:62","nodeType":"YulBlock","src":"7217:241:62","statements":[{"nativeSrc":"7227:26:62","nodeType":"YulAssignment","src":"7227:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"7239:9:62","nodeType":"YulIdentifier","src":"7239:9:62"},{"kind":"number","nativeSrc":"7250:2:62","nodeType":"YulLiteral","src":"7250:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7235:3:62","nodeType":"YulIdentifier","src":"7235:3:62"},"nativeSrc":"7235:18:62","nodeType":"YulFunctionCall","src":"7235:18:62"},"variableNames":[{"name":"tail","nativeSrc":"7227:4:62","nodeType":"YulIdentifier","src":"7227:4:62"}]},{"nativeSrc":"7262:52:62","nodeType":"YulVariableDeclaration","src":"7262:52:62","value":{"kind":"number","nativeSrc":"7272:42:62","nodeType":"YulLiteral","src":"7272:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7266:2:62","nodeType":"YulTypedName","src":"7266:2:62","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7330:9:62","nodeType":"YulIdentifier","src":"7330:9:62"},{"arguments":[{"name":"value0","nativeSrc":"7345:6:62","nodeType":"YulIdentifier","src":"7345:6:62"},{"name":"_1","nativeSrc":"7353:2:62","nodeType":"YulIdentifier","src":"7353:2:62"}],"functionName":{"name":"and","nativeSrc":"7341:3:62","nodeType":"YulIdentifier","src":"7341:3:62"},"nativeSrc":"7341:15:62","nodeType":"YulFunctionCall","src":"7341:15:62"}],"functionName":{"name":"mstore","nativeSrc":"7323:6:62","nodeType":"YulIdentifier","src":"7323:6:62"},"nativeSrc":"7323:34:62","nodeType":"YulFunctionCall","src":"7323:34:62"},"nativeSrc":"7323:34:62","nodeType":"YulExpressionStatement","src":"7323:34:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7377:9:62","nodeType":"YulIdentifier","src":"7377:9:62"},{"kind":"number","nativeSrc":"7388:2:62","nodeType":"YulLiteral","src":"7388:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7373:3:62","nodeType":"YulIdentifier","src":"7373:3:62"},"nativeSrc":"7373:18:62","nodeType":"YulFunctionCall","src":"7373:18:62"},{"arguments":[{"name":"value1","nativeSrc":"7397:6:62","nodeType":"YulIdentifier","src":"7397:6:62"},{"name":"_1","nativeSrc":"7405:2:62","nodeType":"YulIdentifier","src":"7405:2:62"}],"functionName":{"name":"and","nativeSrc":"7393:3:62","nodeType":"YulIdentifier","src":"7393:3:62"},"nativeSrc":"7393:15:62","nodeType":"YulFunctionCall","src":"7393:15:62"}],"functionName":{"name":"mstore","nativeSrc":"7366:6:62","nodeType":"YulIdentifier","src":"7366:6:62"},"nativeSrc":"7366:43:62","nodeType":"YulFunctionCall","src":"7366:43:62"},"nativeSrc":"7366:43:62","nodeType":"YulExpressionStatement","src":"7366:43:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7429:9:62","nodeType":"YulIdentifier","src":"7429:9:62"},{"kind":"number","nativeSrc":"7440:2:62","nodeType":"YulLiteral","src":"7440:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7425:3:62","nodeType":"YulIdentifier","src":"7425:3:62"},"nativeSrc":"7425:18:62","nodeType":"YulFunctionCall","src":"7425:18:62"},{"name":"value2","nativeSrc":"7445:6:62","nodeType":"YulIdentifier","src":"7445:6:62"}],"functionName":{"name":"mstore","nativeSrc":"7418:6:62","nodeType":"YulIdentifier","src":"7418:6:62"},"nativeSrc":"7418:34:62","nodeType":"YulFunctionCall","src":"7418:34:62"},"nativeSrc":"7418:34:62","nodeType":"YulExpressionStatement","src":"7418:34:62"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"7060:398:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7170:9:62","nodeType":"YulTypedName","src":"7170:9:62","type":""},{"name":"value2","nativeSrc":"7181:6:62","nodeType":"YulTypedName","src":"7181:6:62","type":""},{"name":"value1","nativeSrc":"7189:6:62","nodeType":"YulTypedName","src":"7189:6:62","type":""},{"name":"value0","nativeSrc":"7197:6:62","nodeType":"YulTypedName","src":"7197:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7208:4:62","nodeType":"YulTypedName","src":"7208:4:62","type":""}],"src":"7060:398:62"},{"body":{"nativeSrc":"7592:168:62","nodeType":"YulBlock","src":"7592:168:62","statements":[{"nativeSrc":"7602:26:62","nodeType":"YulAssignment","src":"7602:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"7614:9:62","nodeType":"YulIdentifier","src":"7614:9:62"},{"kind":"number","nativeSrc":"7625:2:62","nodeType":"YulLiteral","src":"7625:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7610:3:62","nodeType":"YulIdentifier","src":"7610:3:62"},"nativeSrc":"7610:18:62","nodeType":"YulFunctionCall","src":"7610:18:62"},"variableNames":[{"name":"tail","nativeSrc":"7602:4:62","nodeType":"YulIdentifier","src":"7602:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7644:9:62","nodeType":"YulIdentifier","src":"7644:9:62"},{"arguments":[{"name":"value0","nativeSrc":"7659:6:62","nodeType":"YulIdentifier","src":"7659:6:62"},{"kind":"number","nativeSrc":"7667:42:62","nodeType":"YulLiteral","src":"7667:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7655:3:62","nodeType":"YulIdentifier","src":"7655:3:62"},"nativeSrc":"7655:55:62","nodeType":"YulFunctionCall","src":"7655:55:62"}],"functionName":{"name":"mstore","nativeSrc":"7637:6:62","nodeType":"YulIdentifier","src":"7637:6:62"},"nativeSrc":"7637:74:62","nodeType":"YulFunctionCall","src":"7637:74:62"},"nativeSrc":"7637:74:62","nodeType":"YulExpressionStatement","src":"7637:74:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7731:9:62","nodeType":"YulIdentifier","src":"7731:9:62"},{"kind":"number","nativeSrc":"7742:2:62","nodeType":"YulLiteral","src":"7742:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7727:3:62","nodeType":"YulIdentifier","src":"7727:3:62"},"nativeSrc":"7727:18:62","nodeType":"YulFunctionCall","src":"7727:18:62"},{"name":"value1","nativeSrc":"7747:6:62","nodeType":"YulIdentifier","src":"7747:6:62"}],"functionName":{"name":"mstore","nativeSrc":"7720:6:62","nodeType":"YulIdentifier","src":"7720:6:62"},"nativeSrc":"7720:34:62","nodeType":"YulFunctionCall","src":"7720:34:62"},"nativeSrc":"7720:34:62","nodeType":"YulExpressionStatement","src":"7720:34:62"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7463:297:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7553:9:62","nodeType":"YulTypedName","src":"7553:9:62","type":""},{"name":"value1","nativeSrc":"7564:6:62","nodeType":"YulTypedName","src":"7564:6:62","type":""},{"name":"value0","nativeSrc":"7572:6:62","nodeType":"YulTypedName","src":"7572:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7583:4:62","nodeType":"YulTypedName","src":"7583:4:62","type":""}],"src":"7463:297:62"},{"body":{"nativeSrc":"7922:241:62","nodeType":"YulBlock","src":"7922:241:62","statements":[{"nativeSrc":"7932:26:62","nodeType":"YulAssignment","src":"7932:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"7944:9:62","nodeType":"YulIdentifier","src":"7944:9:62"},{"kind":"number","nativeSrc":"7955:2:62","nodeType":"YulLiteral","src":"7955:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7940:3:62","nodeType":"YulIdentifier","src":"7940:3:62"},"nativeSrc":"7940:18:62","nodeType":"YulFunctionCall","src":"7940:18:62"},"variableNames":[{"name":"tail","nativeSrc":"7932:4:62","nodeType":"YulIdentifier","src":"7932:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7974:9:62","nodeType":"YulIdentifier","src":"7974:9:62"},{"name":"value0","nativeSrc":"7985:6:62","nodeType":"YulIdentifier","src":"7985:6:62"}],"functionName":{"name":"mstore","nativeSrc":"7967:6:62","nodeType":"YulIdentifier","src":"7967:6:62"},"nativeSrc":"7967:25:62","nodeType":"YulFunctionCall","src":"7967:25:62"},"nativeSrc":"7967:25:62","nodeType":"YulExpressionStatement","src":"7967:25:62"},{"nativeSrc":"8001:52:62","nodeType":"YulVariableDeclaration","src":"8001:52:62","value":{"kind":"number","nativeSrc":"8011:42:62","nodeType":"YulLiteral","src":"8011:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8005:2:62","nodeType":"YulTypedName","src":"8005:2:62","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8073:9:62","nodeType":"YulIdentifier","src":"8073:9:62"},{"kind":"number","nativeSrc":"8084:2:62","nodeType":"YulLiteral","src":"8084:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8069:3:62","nodeType":"YulIdentifier","src":"8069:3:62"},"nativeSrc":"8069:18:62","nodeType":"YulFunctionCall","src":"8069:18:62"},{"arguments":[{"name":"value1","nativeSrc":"8093:6:62","nodeType":"YulIdentifier","src":"8093:6:62"},{"name":"_1","nativeSrc":"8101:2:62","nodeType":"YulIdentifier","src":"8101:2:62"}],"functionName":{"name":"and","nativeSrc":"8089:3:62","nodeType":"YulIdentifier","src":"8089:3:62"},"nativeSrc":"8089:15:62","nodeType":"YulFunctionCall","src":"8089:15:62"}],"functionName":{"name":"mstore","nativeSrc":"8062:6:62","nodeType":"YulIdentifier","src":"8062:6:62"},"nativeSrc":"8062:43:62","nodeType":"YulFunctionCall","src":"8062:43:62"},"nativeSrc":"8062:43:62","nodeType":"YulExpressionStatement","src":"8062:43:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8125:9:62","nodeType":"YulIdentifier","src":"8125:9:62"},{"kind":"number","nativeSrc":"8136:2:62","nodeType":"YulLiteral","src":"8136:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8121:3:62","nodeType":"YulIdentifier","src":"8121:3:62"},"nativeSrc":"8121:18:62","nodeType":"YulFunctionCall","src":"8121:18:62"},{"arguments":[{"name":"value2","nativeSrc":"8145:6:62","nodeType":"YulIdentifier","src":"8145:6:62"},{"name":"_1","nativeSrc":"8153:2:62","nodeType":"YulIdentifier","src":"8153:2:62"}],"functionName":{"name":"and","nativeSrc":"8141:3:62","nodeType":"YulIdentifier","src":"8141:3:62"},"nativeSrc":"8141:15:62","nodeType":"YulFunctionCall","src":"8141:15:62"}],"functionName":{"name":"mstore","nativeSrc":"8114:6:62","nodeType":"YulIdentifier","src":"8114:6:62"},"nativeSrc":"8114:43:62","nodeType":"YulFunctionCall","src":"8114:43:62"},"nativeSrc":"8114:43:62","nodeType":"YulExpressionStatement","src":"8114:43:62"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"7765:398:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7875:9:62","nodeType":"YulTypedName","src":"7875:9:62","type":""},{"name":"value2","nativeSrc":"7886:6:62","nodeType":"YulTypedName","src":"7886:6:62","type":""},{"name":"value1","nativeSrc":"7894:6:62","nodeType":"YulTypedName","src":"7894:6:62","type":""},{"name":"value0","nativeSrc":"7902:6:62","nodeType":"YulTypedName","src":"7902:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7913:4:62","nodeType":"YulTypedName","src":"7913:4:62","type":""}],"src":"7765:398:62"},{"body":{"nativeSrc":"8297:168:62","nodeType":"YulBlock","src":"8297:168:62","statements":[{"nativeSrc":"8307:26:62","nodeType":"YulAssignment","src":"8307:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"8319:9:62","nodeType":"YulIdentifier","src":"8319:9:62"},{"kind":"number","nativeSrc":"8330:2:62","nodeType":"YulLiteral","src":"8330:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8315:3:62","nodeType":"YulIdentifier","src":"8315:3:62"},"nativeSrc":"8315:18:62","nodeType":"YulFunctionCall","src":"8315:18:62"},"variableNames":[{"name":"tail","nativeSrc":"8307:4:62","nodeType":"YulIdentifier","src":"8307:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8349:9:62","nodeType":"YulIdentifier","src":"8349:9:62"},{"name":"value0","nativeSrc":"8360:6:62","nodeType":"YulIdentifier","src":"8360:6:62"}],"functionName":{"name":"mstore","nativeSrc":"8342:6:62","nodeType":"YulIdentifier","src":"8342:6:62"},"nativeSrc":"8342:25:62","nodeType":"YulFunctionCall","src":"8342:25:62"},"nativeSrc":"8342:25:62","nodeType":"YulExpressionStatement","src":"8342:25:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8387:9:62","nodeType":"YulIdentifier","src":"8387:9:62"},{"kind":"number","nativeSrc":"8398:2:62","nodeType":"YulLiteral","src":"8398:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8383:3:62","nodeType":"YulIdentifier","src":"8383:3:62"},"nativeSrc":"8383:18:62","nodeType":"YulFunctionCall","src":"8383:18:62"},{"arguments":[{"name":"value1","nativeSrc":"8407:6:62","nodeType":"YulIdentifier","src":"8407:6:62"},{"kind":"number","nativeSrc":"8415:42:62","nodeType":"YulLiteral","src":"8415:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8403:3:62","nodeType":"YulIdentifier","src":"8403:3:62"},"nativeSrc":"8403:55:62","nodeType":"YulFunctionCall","src":"8403:55:62"}],"functionName":{"name":"mstore","nativeSrc":"8376:6:62","nodeType":"YulIdentifier","src":"8376:6:62"},"nativeSrc":"8376:83:62","nodeType":"YulFunctionCall","src":"8376:83:62"},"nativeSrc":"8376:83:62","nodeType":"YulExpressionStatement","src":"8376:83:62"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"8168:297:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8258:9:62","nodeType":"YulTypedName","src":"8258:9:62","type":""},{"name":"value1","nativeSrc":"8269:6:62","nodeType":"YulTypedName","src":"8269:6:62","type":""},{"name":"value0","nativeSrc":"8277:6:62","nodeType":"YulTypedName","src":"8277:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8288:4:62","nodeType":"YulTypedName","src":"8288:4:62","type":""}],"src":"8168:297:62"},{"body":{"nativeSrc":"8502:152:62","nodeType":"YulBlock","src":"8502:152:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8519:1:62","nodeType":"YulLiteral","src":"8519:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"8522:77:62","nodeType":"YulLiteral","src":"8522:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8512:6:62","nodeType":"YulIdentifier","src":"8512:6:62"},"nativeSrc":"8512:88:62","nodeType":"YulFunctionCall","src":"8512:88:62"},"nativeSrc":"8512:88:62","nodeType":"YulExpressionStatement","src":"8512:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8616:1:62","nodeType":"YulLiteral","src":"8616:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"8619:4:62","nodeType":"YulLiteral","src":"8619:4:62","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"8609:6:62","nodeType":"YulIdentifier","src":"8609:6:62"},"nativeSrc":"8609:15:62","nodeType":"YulFunctionCall","src":"8609:15:62"},"nativeSrc":"8609:15:62","nodeType":"YulExpressionStatement","src":"8609:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8640:1:62","nodeType":"YulLiteral","src":"8640:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"8643:4:62","nodeType":"YulLiteral","src":"8643:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8633:6:62","nodeType":"YulIdentifier","src":"8633:6:62"},"nativeSrc":"8633:15:62","nodeType":"YulFunctionCall","src":"8633:15:62"},"nativeSrc":"8633:15:62","nodeType":"YulExpressionStatement","src":"8633:15:62"}]},"name":"panic_error_0x32","nativeSrc":"8470:184:62","nodeType":"YulFunctionDefinition","src":"8470:184:62"},{"body":{"nativeSrc":"8691:152:62","nodeType":"YulBlock","src":"8691:152:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8708:1:62","nodeType":"YulLiteral","src":"8708:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"8711:77:62","nodeType":"YulLiteral","src":"8711:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8701:6:62","nodeType":"YulIdentifier","src":"8701:6:62"},"nativeSrc":"8701:88:62","nodeType":"YulFunctionCall","src":"8701:88:62"},"nativeSrc":"8701:88:62","nodeType":"YulExpressionStatement","src":"8701:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8805:1:62","nodeType":"YulLiteral","src":"8805:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"8808:4:62","nodeType":"YulLiteral","src":"8808:4:62","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8798:6:62","nodeType":"YulIdentifier","src":"8798:6:62"},"nativeSrc":"8798:15:62","nodeType":"YulFunctionCall","src":"8798:15:62"},"nativeSrc":"8798:15:62","nodeType":"YulExpressionStatement","src":"8798:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8829:1:62","nodeType":"YulLiteral","src":"8829:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"8832:4:62","nodeType":"YulLiteral","src":"8832:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8822:6:62","nodeType":"YulIdentifier","src":"8822:6:62"},"nativeSrc":"8822:15:62","nodeType":"YulFunctionCall","src":"8822:15:62"},"nativeSrc":"8822:15:62","nodeType":"YulExpressionStatement","src":"8822:15:62"}]},"name":"panic_error_0x41","nativeSrc":"8659:184:62","nodeType":"YulFunctionDefinition","src":"8659:184:62"},{"body":{"nativeSrc":"8939:865:62","nodeType":"YulBlock","src":"8939:865:62","statements":[{"body":{"nativeSrc":"8985:16:62","nodeType":"YulBlock","src":"8985:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8994:1:62","nodeType":"YulLiteral","src":"8994:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"8997:1:62","nodeType":"YulLiteral","src":"8997:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8987:6:62","nodeType":"YulIdentifier","src":"8987:6:62"},"nativeSrc":"8987:12:62","nodeType":"YulFunctionCall","src":"8987:12:62"},"nativeSrc":"8987:12:62","nodeType":"YulExpressionStatement","src":"8987:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8960:7:62","nodeType":"YulIdentifier","src":"8960:7:62"},{"name":"headStart","nativeSrc":"8969:9:62","nodeType":"YulIdentifier","src":"8969:9:62"}],"functionName":{"name":"sub","nativeSrc":"8956:3:62","nodeType":"YulIdentifier","src":"8956:3:62"},"nativeSrc":"8956:23:62","nodeType":"YulFunctionCall","src":"8956:23:62"},{"kind":"number","nativeSrc":"8981:2:62","nodeType":"YulLiteral","src":"8981:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8952:3:62","nodeType":"YulIdentifier","src":"8952:3:62"},"nativeSrc":"8952:32:62","nodeType":"YulFunctionCall","src":"8952:32:62"},"nativeSrc":"8949:52:62","nodeType":"YulIf","src":"8949:52:62"},{"nativeSrc":"9010:30:62","nodeType":"YulVariableDeclaration","src":"9010:30:62","value":{"arguments":[{"name":"headStart","nativeSrc":"9030:9:62","nodeType":"YulIdentifier","src":"9030:9:62"}],"functionName":{"name":"mload","nativeSrc":"9024:5:62","nodeType":"YulIdentifier","src":"9024:5:62"},"nativeSrc":"9024:16:62","nodeType":"YulFunctionCall","src":"9024:16:62"},"variables":[{"name":"offset","nativeSrc":"9014:6:62","nodeType":"YulTypedName","src":"9014:6:62","type":""}]},{"nativeSrc":"9049:28:62","nodeType":"YulVariableDeclaration","src":"9049:28:62","value":{"kind":"number","nativeSrc":"9059:18:62","nodeType":"YulLiteral","src":"9059:18:62","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9053:2:62","nodeType":"YulTypedName","src":"9053:2:62","type":""}]},{"body":{"nativeSrc":"9104:16:62","nodeType":"YulBlock","src":"9104:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9113:1:62","nodeType":"YulLiteral","src":"9113:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"9116:1:62","nodeType":"YulLiteral","src":"9116:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9106:6:62","nodeType":"YulIdentifier","src":"9106:6:62"},"nativeSrc":"9106:12:62","nodeType":"YulFunctionCall","src":"9106:12:62"},"nativeSrc":"9106:12:62","nodeType":"YulExpressionStatement","src":"9106:12:62"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9092:6:62","nodeType":"YulIdentifier","src":"9092:6:62"},{"name":"_1","nativeSrc":"9100:2:62","nodeType":"YulIdentifier","src":"9100:2:62"}],"functionName":{"name":"gt","nativeSrc":"9089:2:62","nodeType":"YulIdentifier","src":"9089:2:62"},"nativeSrc":"9089:14:62","nodeType":"YulFunctionCall","src":"9089:14:62"},"nativeSrc":"9086:34:62","nodeType":"YulIf","src":"9086:34:62"},{"nativeSrc":"9129:32:62","nodeType":"YulVariableDeclaration","src":"9129:32:62","value":{"arguments":[{"name":"headStart","nativeSrc":"9143:9:62","nodeType":"YulIdentifier","src":"9143:9:62"},{"name":"offset","nativeSrc":"9154:6:62","nodeType":"YulIdentifier","src":"9154:6:62"}],"functionName":{"name":"add","nativeSrc":"9139:3:62","nodeType":"YulIdentifier","src":"9139:3:62"},"nativeSrc":"9139:22:62","nodeType":"YulFunctionCall","src":"9139:22:62"},"variables":[{"name":"_2","nativeSrc":"9133:2:62","nodeType":"YulTypedName","src":"9133:2:62","type":""}]},{"body":{"nativeSrc":"9209:16:62","nodeType":"YulBlock","src":"9209:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9218:1:62","nodeType":"YulLiteral","src":"9218:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"9221:1:62","nodeType":"YulLiteral","src":"9221:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9211:6:62","nodeType":"YulIdentifier","src":"9211:6:62"},"nativeSrc":"9211:12:62","nodeType":"YulFunctionCall","src":"9211:12:62"},"nativeSrc":"9211:12:62","nodeType":"YulExpressionStatement","src":"9211:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9188:2:62","nodeType":"YulIdentifier","src":"9188:2:62"},{"kind":"number","nativeSrc":"9192:4:62","nodeType":"YulLiteral","src":"9192:4:62","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9184:3:62","nodeType":"YulIdentifier","src":"9184:3:62"},"nativeSrc":"9184:13:62","nodeType":"YulFunctionCall","src":"9184:13:62"},{"name":"dataEnd","nativeSrc":"9199:7:62","nodeType":"YulIdentifier","src":"9199:7:62"}],"functionName":{"name":"slt","nativeSrc":"9180:3:62","nodeType":"YulIdentifier","src":"9180:3:62"},"nativeSrc":"9180:27:62","nodeType":"YulFunctionCall","src":"9180:27:62"}],"functionName":{"name":"iszero","nativeSrc":"9173:6:62","nodeType":"YulIdentifier","src":"9173:6:62"},"nativeSrc":"9173:35:62","nodeType":"YulFunctionCall","src":"9173:35:62"},"nativeSrc":"9170:55:62","nodeType":"YulIf","src":"9170:55:62"},{"nativeSrc":"9234:19:62","nodeType":"YulVariableDeclaration","src":"9234:19:62","value":{"arguments":[{"name":"_2","nativeSrc":"9250:2:62","nodeType":"YulIdentifier","src":"9250:2:62"}],"functionName":{"name":"mload","nativeSrc":"9244:5:62","nodeType":"YulIdentifier","src":"9244:5:62"},"nativeSrc":"9244:9:62","nodeType":"YulFunctionCall","src":"9244:9:62"},"variables":[{"name":"_3","nativeSrc":"9238:2:62","nodeType":"YulTypedName","src":"9238:2:62","type":""}]},{"body":{"nativeSrc":"9276:22:62","nodeType":"YulBlock","src":"9276:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9278:16:62","nodeType":"YulIdentifier","src":"9278:16:62"},"nativeSrc":"9278:18:62","nodeType":"YulFunctionCall","src":"9278:18:62"},"nativeSrc":"9278:18:62","nodeType":"YulExpressionStatement","src":"9278:18:62"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"9268:2:62","nodeType":"YulIdentifier","src":"9268:2:62"},{"name":"_1","nativeSrc":"9272:2:62","nodeType":"YulIdentifier","src":"9272:2:62"}],"functionName":{"name":"gt","nativeSrc":"9265:2:62","nodeType":"YulIdentifier","src":"9265:2:62"},"nativeSrc":"9265:10:62","nodeType":"YulFunctionCall","src":"9265:10:62"},"nativeSrc":"9262:36:62","nodeType":"YulIf","src":"9262:36:62"},{"nativeSrc":"9307:76:62","nodeType":"YulVariableDeclaration","src":"9307:76:62","value":{"kind":"number","nativeSrc":"9317:66:62","nodeType":"YulLiteral","src":"9317:66:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"9311:2:62","nodeType":"YulTypedName","src":"9311:2:62","type":""}]},{"nativeSrc":"9392:23:62","nodeType":"YulVariableDeclaration","src":"9392:23:62","value":{"arguments":[{"kind":"number","nativeSrc":"9412:2:62","nodeType":"YulLiteral","src":"9412:2:62","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"9406:5:62","nodeType":"YulIdentifier","src":"9406:5:62"},"nativeSrc":"9406:9:62","nodeType":"YulFunctionCall","src":"9406:9:62"},"variables":[{"name":"memPtr","nativeSrc":"9396:6:62","nodeType":"YulTypedName","src":"9396:6:62","type":""}]},{"nativeSrc":"9424:71:62","nodeType":"YulVariableDeclaration","src":"9424:71:62","value":{"arguments":[{"name":"memPtr","nativeSrc":"9446:6:62","nodeType":"YulIdentifier","src":"9446:6:62"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"9470:2:62","nodeType":"YulIdentifier","src":"9470:2:62"},{"kind":"number","nativeSrc":"9474:4:62","nodeType":"YulLiteral","src":"9474:4:62","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9466:3:62","nodeType":"YulIdentifier","src":"9466:3:62"},"nativeSrc":"9466:13:62","nodeType":"YulFunctionCall","src":"9466:13:62"},{"name":"_4","nativeSrc":"9481:2:62","nodeType":"YulIdentifier","src":"9481:2:62"}],"functionName":{"name":"and","nativeSrc":"9462:3:62","nodeType":"YulIdentifier","src":"9462:3:62"},"nativeSrc":"9462:22:62","nodeType":"YulFunctionCall","src":"9462:22:62"},{"kind":"number","nativeSrc":"9486:2:62","nodeType":"YulLiteral","src":"9486:2:62","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"9458:3:62","nodeType":"YulIdentifier","src":"9458:3:62"},"nativeSrc":"9458:31:62","nodeType":"YulFunctionCall","src":"9458:31:62"},{"name":"_4","nativeSrc":"9491:2:62","nodeType":"YulIdentifier","src":"9491:2:62"}],"functionName":{"name":"and","nativeSrc":"9454:3:62","nodeType":"YulIdentifier","src":"9454:3:62"},"nativeSrc":"9454:40:62","nodeType":"YulFunctionCall","src":"9454:40:62"}],"functionName":{"name":"add","nativeSrc":"9442:3:62","nodeType":"YulIdentifier","src":"9442:3:62"},"nativeSrc":"9442:53:62","nodeType":"YulFunctionCall","src":"9442:53:62"},"variables":[{"name":"newFreePtr","nativeSrc":"9428:10:62","nodeType":"YulTypedName","src":"9428:10:62","type":""}]},{"body":{"nativeSrc":"9554:22:62","nodeType":"YulBlock","src":"9554:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9556:16:62","nodeType":"YulIdentifier","src":"9556:16:62"},"nativeSrc":"9556:18:62","nodeType":"YulFunctionCall","src":"9556:18:62"},"nativeSrc":"9556:18:62","nodeType":"YulExpressionStatement","src":"9556:18:62"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9513:10:62","nodeType":"YulIdentifier","src":"9513:10:62"},{"name":"_1","nativeSrc":"9525:2:62","nodeType":"YulIdentifier","src":"9525:2:62"}],"functionName":{"name":"gt","nativeSrc":"9510:2:62","nodeType":"YulIdentifier","src":"9510:2:62"},"nativeSrc":"9510:18:62","nodeType":"YulFunctionCall","src":"9510:18:62"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9533:10:62","nodeType":"YulIdentifier","src":"9533:10:62"},{"name":"memPtr","nativeSrc":"9545:6:62","nodeType":"YulIdentifier","src":"9545:6:62"}],"functionName":{"name":"lt","nativeSrc":"9530:2:62","nodeType":"YulIdentifier","src":"9530:2:62"},"nativeSrc":"9530:22:62","nodeType":"YulFunctionCall","src":"9530:22:62"}],"functionName":{"name":"or","nativeSrc":"9507:2:62","nodeType":"YulIdentifier","src":"9507:2:62"},"nativeSrc":"9507:46:62","nodeType":"YulFunctionCall","src":"9507:46:62"},"nativeSrc":"9504:72:62","nodeType":"YulIf","src":"9504:72:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9592:2:62","nodeType":"YulLiteral","src":"9592:2:62","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9596:10:62","nodeType":"YulIdentifier","src":"9596:10:62"}],"functionName":{"name":"mstore","nativeSrc":"9585:6:62","nodeType":"YulIdentifier","src":"9585:6:62"},"nativeSrc":"9585:22:62","nodeType":"YulFunctionCall","src":"9585:22:62"},"nativeSrc":"9585:22:62","nodeType":"YulExpressionStatement","src":"9585:22:62"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9623:6:62","nodeType":"YulIdentifier","src":"9623:6:62"},{"name":"_3","nativeSrc":"9631:2:62","nodeType":"YulIdentifier","src":"9631:2:62"}],"functionName":{"name":"mstore","nativeSrc":"9616:6:62","nodeType":"YulIdentifier","src":"9616:6:62"},"nativeSrc":"9616:18:62","nodeType":"YulFunctionCall","src":"9616:18:62"},"nativeSrc":"9616:18:62","nodeType":"YulExpressionStatement","src":"9616:18:62"},{"body":{"nativeSrc":"9680:16:62","nodeType":"YulBlock","src":"9680:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9689:1:62","nodeType":"YulLiteral","src":"9689:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"9692:1:62","nodeType":"YulLiteral","src":"9692:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9682:6:62","nodeType":"YulIdentifier","src":"9682:6:62"},"nativeSrc":"9682:12:62","nodeType":"YulFunctionCall","src":"9682:12:62"},"nativeSrc":"9682:12:62","nodeType":"YulExpressionStatement","src":"9682:12:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9657:2:62","nodeType":"YulIdentifier","src":"9657:2:62"},{"name":"_3","nativeSrc":"9661:2:62","nodeType":"YulIdentifier","src":"9661:2:62"}],"functionName":{"name":"add","nativeSrc":"9653:3:62","nodeType":"YulIdentifier","src":"9653:3:62"},"nativeSrc":"9653:11:62","nodeType":"YulFunctionCall","src":"9653:11:62"},{"kind":"number","nativeSrc":"9666:2:62","nodeType":"YulLiteral","src":"9666:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9649:3:62","nodeType":"YulIdentifier","src":"9649:3:62"},"nativeSrc":"9649:20:62","nodeType":"YulFunctionCall","src":"9649:20:62"},{"name":"dataEnd","nativeSrc":"9671:7:62","nodeType":"YulIdentifier","src":"9671:7:62"}],"functionName":{"name":"gt","nativeSrc":"9646:2:62","nodeType":"YulIdentifier","src":"9646:2:62"},"nativeSrc":"9646:33:62","nodeType":"YulFunctionCall","src":"9646:33:62"},"nativeSrc":"9643:53:62","nodeType":"YulIf","src":"9643:53:62"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9744:2:62","nodeType":"YulIdentifier","src":"9744:2:62"},{"kind":"number","nativeSrc":"9748:2:62","nodeType":"YulLiteral","src":"9748:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9740:3:62","nodeType":"YulIdentifier","src":"9740:3:62"},"nativeSrc":"9740:11:62","nodeType":"YulFunctionCall","src":"9740:11:62"},{"arguments":[{"name":"memPtr","nativeSrc":"9757:6:62","nodeType":"YulIdentifier","src":"9757:6:62"},{"kind":"number","nativeSrc":"9765:2:62","nodeType":"YulLiteral","src":"9765:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9753:3:62","nodeType":"YulIdentifier","src":"9753:3:62"},"nativeSrc":"9753:15:62","nodeType":"YulFunctionCall","src":"9753:15:62"},{"name":"_3","nativeSrc":"9770:2:62","nodeType":"YulIdentifier","src":"9770:2:62"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"9705:34:62","nodeType":"YulIdentifier","src":"9705:34:62"},"nativeSrc":"9705:68:62","nodeType":"YulFunctionCall","src":"9705:68:62"},"nativeSrc":"9705:68:62","nodeType":"YulExpressionStatement","src":"9705:68:62"},{"nativeSrc":"9782:16:62","nodeType":"YulAssignment","src":"9782:16:62","value":{"name":"memPtr","nativeSrc":"9792:6:62","nodeType":"YulIdentifier","src":"9792:6:62"},"variableNames":[{"name":"value0","nativeSrc":"9782:6:62","nodeType":"YulIdentifier","src":"9782:6:62"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nativeSrc":"8848:956:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8905:9:62","nodeType":"YulTypedName","src":"8905:9:62","type":""},{"name":"dataEnd","nativeSrc":"8916:7:62","nodeType":"YulTypedName","src":"8916:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8928:6:62","nodeType":"YulTypedName","src":"8928:6:62","type":""}],"src":"8848:956:62"},{"body":{"nativeSrc":"9864:382:62","nodeType":"YulBlock","src":"9864:382:62","statements":[{"nativeSrc":"9874:22:62","nodeType":"YulAssignment","src":"9874:22:62","value":{"arguments":[{"kind":"number","nativeSrc":"9888:1:62","nodeType":"YulLiteral","src":"9888:1:62","type":"","value":"1"},{"name":"data","nativeSrc":"9891:4:62","nodeType":"YulIdentifier","src":"9891:4:62"}],"functionName":{"name":"shr","nativeSrc":"9884:3:62","nodeType":"YulIdentifier","src":"9884:3:62"},"nativeSrc":"9884:12:62","nodeType":"YulFunctionCall","src":"9884:12:62"},"variableNames":[{"name":"length","nativeSrc":"9874:6:62","nodeType":"YulIdentifier","src":"9874:6:62"}]},{"nativeSrc":"9905:38:62","nodeType":"YulVariableDeclaration","src":"9905:38:62","value":{"arguments":[{"name":"data","nativeSrc":"9935:4:62","nodeType":"YulIdentifier","src":"9935:4:62"},{"kind":"number","nativeSrc":"9941:1:62","nodeType":"YulLiteral","src":"9941:1:62","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"9931:3:62","nodeType":"YulIdentifier","src":"9931:3:62"},"nativeSrc":"9931:12:62","nodeType":"YulFunctionCall","src":"9931:12:62"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"9909:18:62","nodeType":"YulTypedName","src":"9909:18:62","type":""}]},{"body":{"nativeSrc":"9982:31:62","nodeType":"YulBlock","src":"9982:31:62","statements":[{"nativeSrc":"9984:27:62","nodeType":"YulAssignment","src":"9984:27:62","value":{"arguments":[{"name":"length","nativeSrc":"9998:6:62","nodeType":"YulIdentifier","src":"9998:6:62"},{"kind":"number","nativeSrc":"10006:4:62","nodeType":"YulLiteral","src":"10006:4:62","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"9994:3:62","nodeType":"YulIdentifier","src":"9994:3:62"},"nativeSrc":"9994:17:62","nodeType":"YulFunctionCall","src":"9994:17:62"},"variableNames":[{"name":"length","nativeSrc":"9984:6:62","nodeType":"YulIdentifier","src":"9984:6:62"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"9962:18:62","nodeType":"YulIdentifier","src":"9962:18:62"}],"functionName":{"name":"iszero","nativeSrc":"9955:6:62","nodeType":"YulIdentifier","src":"9955:6:62"},"nativeSrc":"9955:26:62","nodeType":"YulFunctionCall","src":"9955:26:62"},"nativeSrc":"9952:61:62","nodeType":"YulIf","src":"9952:61:62"},{"body":{"nativeSrc":"10072:168:62","nodeType":"YulBlock","src":"10072:168:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10093:1:62","nodeType":"YulLiteral","src":"10093:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"10096:77:62","nodeType":"YulLiteral","src":"10096:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10086:6:62","nodeType":"YulIdentifier","src":"10086:6:62"},"nativeSrc":"10086:88:62","nodeType":"YulFunctionCall","src":"10086:88:62"},"nativeSrc":"10086:88:62","nodeType":"YulExpressionStatement","src":"10086:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10194:1:62","nodeType":"YulLiteral","src":"10194:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"10197:4:62","nodeType":"YulLiteral","src":"10197:4:62","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"10187:6:62","nodeType":"YulIdentifier","src":"10187:6:62"},"nativeSrc":"10187:15:62","nodeType":"YulFunctionCall","src":"10187:15:62"},"nativeSrc":"10187:15:62","nodeType":"YulExpressionStatement","src":"10187:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10222:1:62","nodeType":"YulLiteral","src":"10222:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"10225:4:62","nodeType":"YulLiteral","src":"10225:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10215:6:62","nodeType":"YulIdentifier","src":"10215:6:62"},"nativeSrc":"10215:15:62","nodeType":"YulFunctionCall","src":"10215:15:62"},"nativeSrc":"10215:15:62","nodeType":"YulExpressionStatement","src":"10215:15:62"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"10028:18:62","nodeType":"YulIdentifier","src":"10028:18:62"},{"arguments":[{"name":"length","nativeSrc":"10051:6:62","nodeType":"YulIdentifier","src":"10051:6:62"},{"kind":"number","nativeSrc":"10059:2:62","nodeType":"YulLiteral","src":"10059:2:62","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"10048:2:62","nodeType":"YulIdentifier","src":"10048:2:62"},"nativeSrc":"10048:14:62","nodeType":"YulFunctionCall","src":"10048:14:62"}],"functionName":{"name":"eq","nativeSrc":"10025:2:62","nodeType":"YulIdentifier","src":"10025:2:62"},"nativeSrc":"10025:38:62","nodeType":"YulFunctionCall","src":"10025:38:62"},"nativeSrc":"10022:218:62","nodeType":"YulIf","src":"10022:218:62"}]},"name":"extract_byte_array_length","nativeSrc":"9809:437:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"9844:4:62","nodeType":"YulTypedName","src":"9844:4:62","type":""}],"returnVariables":[{"name":"length","nativeSrc":"9853:6:62","nodeType":"YulTypedName","src":"9853:6:62","type":""}],"src":"9809:437:62"},{"body":{"nativeSrc":"10454:309:62","nodeType":"YulBlock","src":"10454:309:62","statements":[{"nativeSrc":"10464:52:62","nodeType":"YulVariableDeclaration","src":"10464:52:62","value":{"kind":"number","nativeSrc":"10474:42:62","nodeType":"YulLiteral","src":"10474:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"10468:2:62","nodeType":"YulTypedName","src":"10468:2:62","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10532:9:62","nodeType":"YulIdentifier","src":"10532:9:62"},{"arguments":[{"name":"value0","nativeSrc":"10547:6:62","nodeType":"YulIdentifier","src":"10547:6:62"},{"name":"_1","nativeSrc":"10555:2:62","nodeType":"YulIdentifier","src":"10555:2:62"}],"functionName":{"name":"and","nativeSrc":"10543:3:62","nodeType":"YulIdentifier","src":"10543:3:62"},"nativeSrc":"10543:15:62","nodeType":"YulFunctionCall","src":"10543:15:62"}],"functionName":{"name":"mstore","nativeSrc":"10525:6:62","nodeType":"YulIdentifier","src":"10525:6:62"},"nativeSrc":"10525:34:62","nodeType":"YulFunctionCall","src":"10525:34:62"},"nativeSrc":"10525:34:62","nodeType":"YulExpressionStatement","src":"10525:34:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10579:9:62","nodeType":"YulIdentifier","src":"10579:9:62"},{"kind":"number","nativeSrc":"10590:2:62","nodeType":"YulLiteral","src":"10590:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10575:3:62","nodeType":"YulIdentifier","src":"10575:3:62"},"nativeSrc":"10575:18:62","nodeType":"YulFunctionCall","src":"10575:18:62"},{"arguments":[{"name":"value1","nativeSrc":"10599:6:62","nodeType":"YulIdentifier","src":"10599:6:62"},{"name":"_1","nativeSrc":"10607:2:62","nodeType":"YulIdentifier","src":"10607:2:62"}],"functionName":{"name":"and","nativeSrc":"10595:3:62","nodeType":"YulIdentifier","src":"10595:3:62"},"nativeSrc":"10595:15:62","nodeType":"YulFunctionCall","src":"10595:15:62"}],"functionName":{"name":"mstore","nativeSrc":"10568:6:62","nodeType":"YulIdentifier","src":"10568:6:62"},"nativeSrc":"10568:43:62","nodeType":"YulFunctionCall","src":"10568:43:62"},"nativeSrc":"10568:43:62","nodeType":"YulExpressionStatement","src":"10568:43:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10631:9:62","nodeType":"YulIdentifier","src":"10631:9:62"},{"kind":"number","nativeSrc":"10642:2:62","nodeType":"YulLiteral","src":"10642:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10627:3:62","nodeType":"YulIdentifier","src":"10627:3:62"},"nativeSrc":"10627:18:62","nodeType":"YulFunctionCall","src":"10627:18:62"},{"name":"value2","nativeSrc":"10647:6:62","nodeType":"YulIdentifier","src":"10647:6:62"}],"functionName":{"name":"mstore","nativeSrc":"10620:6:62","nodeType":"YulIdentifier","src":"10620:6:62"},"nativeSrc":"10620:34:62","nodeType":"YulFunctionCall","src":"10620:34:62"},"nativeSrc":"10620:34:62","nodeType":"YulExpressionStatement","src":"10620:34:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10674:9:62","nodeType":"YulIdentifier","src":"10674:9:62"},{"kind":"number","nativeSrc":"10685:2:62","nodeType":"YulLiteral","src":"10685:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10670:3:62","nodeType":"YulIdentifier","src":"10670:3:62"},"nativeSrc":"10670:18:62","nodeType":"YulFunctionCall","src":"10670:18:62"},{"kind":"number","nativeSrc":"10690:3:62","nodeType":"YulLiteral","src":"10690:3:62","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"10663:6:62","nodeType":"YulIdentifier","src":"10663:6:62"},"nativeSrc":"10663:31:62","nodeType":"YulFunctionCall","src":"10663:31:62"},"nativeSrc":"10663:31:62","nodeType":"YulExpressionStatement","src":"10663:31:62"},{"nativeSrc":"10703:54:62","nodeType":"YulAssignment","src":"10703:54:62","value":{"arguments":[{"name":"value3","nativeSrc":"10729:6:62","nodeType":"YulIdentifier","src":"10729:6:62"},{"arguments":[{"name":"headStart","nativeSrc":"10741:9:62","nodeType":"YulIdentifier","src":"10741:9:62"},{"kind":"number","nativeSrc":"10752:3:62","nodeType":"YulLiteral","src":"10752:3:62","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10737:3:62","nodeType":"YulIdentifier","src":"10737:3:62"},"nativeSrc":"10737:19:62","nodeType":"YulFunctionCall","src":"10737:19:62"}],"functionName":{"name":"abi_encode_string","nativeSrc":"10711:17:62","nodeType":"YulIdentifier","src":"10711:17:62"},"nativeSrc":"10711:46:62","nodeType":"YulFunctionCall","src":"10711:46:62"},"variableNames":[{"name":"tail","nativeSrc":"10703:4:62","nodeType":"YulIdentifier","src":"10703:4:62"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"10251:512:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10399:9:62","nodeType":"YulTypedName","src":"10399:9:62","type":""},{"name":"value3","nativeSrc":"10410:6:62","nodeType":"YulTypedName","src":"10410:6:62","type":""},{"name":"value2","nativeSrc":"10418:6:62","nodeType":"YulTypedName","src":"10418:6:62","type":""},{"name":"value1","nativeSrc":"10426:6:62","nodeType":"YulTypedName","src":"10426:6:62","type":""},{"name":"value0","nativeSrc":"10434:6:62","nodeType":"YulTypedName","src":"10434:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10445:4:62","nodeType":"YulTypedName","src":"10445:4:62","type":""}],"src":"10251:512:62"},{"body":{"nativeSrc":"10848:169:62","nodeType":"YulBlock","src":"10848:169:62","statements":[{"body":{"nativeSrc":"10894:16:62","nodeType":"YulBlock","src":"10894:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10903:1:62","nodeType":"YulLiteral","src":"10903:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"10906:1:62","nodeType":"YulLiteral","src":"10906:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10896:6:62","nodeType":"YulIdentifier","src":"10896:6:62"},"nativeSrc":"10896:12:62","nodeType":"YulFunctionCall","src":"10896:12:62"},"nativeSrc":"10896:12:62","nodeType":"YulExpressionStatement","src":"10896:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10869:7:62","nodeType":"YulIdentifier","src":"10869:7:62"},{"name":"headStart","nativeSrc":"10878:9:62","nodeType":"YulIdentifier","src":"10878:9:62"}],"functionName":{"name":"sub","nativeSrc":"10865:3:62","nodeType":"YulIdentifier","src":"10865:3:62"},"nativeSrc":"10865:23:62","nodeType":"YulFunctionCall","src":"10865:23:62"},{"kind":"number","nativeSrc":"10890:2:62","nodeType":"YulLiteral","src":"10890:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10861:3:62","nodeType":"YulIdentifier","src":"10861:3:62"},"nativeSrc":"10861:32:62","nodeType":"YulFunctionCall","src":"10861:32:62"},"nativeSrc":"10858:52:62","nodeType":"YulIf","src":"10858:52:62"},{"nativeSrc":"10919:29:62","nodeType":"YulVariableDeclaration","src":"10919:29:62","value":{"arguments":[{"name":"headStart","nativeSrc":"10938:9:62","nodeType":"YulIdentifier","src":"10938:9:62"}],"functionName":{"name":"mload","nativeSrc":"10932:5:62","nodeType":"YulIdentifier","src":"10932:5:62"},"nativeSrc":"10932:16:62","nodeType":"YulFunctionCall","src":"10932:16:62"},"variables":[{"name":"value","nativeSrc":"10923:5:62","nodeType":"YulTypedName","src":"10923:5:62","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10981:5:62","nodeType":"YulIdentifier","src":"10981:5:62"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"10957:23:62","nodeType":"YulIdentifier","src":"10957:23:62"},"nativeSrc":"10957:30:62","nodeType":"YulFunctionCall","src":"10957:30:62"},"nativeSrc":"10957:30:62","nodeType":"YulExpressionStatement","src":"10957:30:62"},{"nativeSrc":"10996:15:62","nodeType":"YulAssignment","src":"10996:15:62","value":{"name":"value","nativeSrc":"11006:5:62","nodeType":"YulIdentifier","src":"11006:5:62"},"variableNames":[{"name":"value0","nativeSrc":"10996:6:62","nodeType":"YulIdentifier","src":"10996:6:62"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"10768:249:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10814:9:62","nodeType":"YulTypedName","src":"10814:9:62","type":""},{"name":"dataEnd","nativeSrc":"10825:7:62","nodeType":"YulTypedName","src":"10825:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10837:6:62","nodeType":"YulTypedName","src":"10837:6:62","type":""}],"src":"10768:249:62"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3700__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101a35760003560e01c80638bb9c5bf116100ee578063b88d4fde11610097578063d539139311610071578063d539139314610362578063d547741f14610389578063e985e9c51461039c578063f2fde38b146103af57600080fd5b8063b88d4fde14610329578063c77c69551461033c578063c87b56dd1461034f57600080fd5b806395d89b41116100c857806395d89b4114610306578063a0c76f621461030e578063a22cb4651461031657600080fd5b80638bb9c5bf146102d85780638da5cb5b146102eb57806391d14854146102f357600080fd5b806340c10f19116101505780636352211e1161012a5780636352211e1461029157806370a08231146102a45780638832e6e3146102c557600080fd5b806340c10f191461025857806342842e0e1461026b5780634684d7e91461027e57600080fd5b8063095ea7b311610181578063095ea7b31461021d57806323b872dd146102325780632f2ff15d1461024557600080fd5b806301ffc9a7146101a857806306fdde03146101d0578063081812fc146101e5575b600080fd5b6101bb6101b6366004611d52565b6103c2565b60405190151581526020015b60405180910390f35b6101d86103dc565b6040516101c79190611ddd565b6101f86101f3366004611df0565b6103eb565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c7565b61023061022b366004611e32565b6103ff565b005b610230610240366004611e5c565b610419565b610230610253366004611e98565b610436565b610230610266366004611e32565b61045f565b610230610279366004611e5c565b6104a8565b61023061028c366004611ec4565b6104c0565b6101f861029f366004611df0565b610532565b6102b76102b2366004611f4a565b610546565b6040519081526020016101c7565b6102306102d3366004611fae565b61055a565b6102306102e6366004611df0565b6105d9565b6101f86105f0565b6101bb610301366004611e98565b610617565b6101d8610662565b6101f861066c565b610230610324366004612008565b610696565b610230610337366004612044565b6106ac565b6101bb61034a366004611df0565b6106cf565b6101d861035d366004611df0565b6106e3565b6102b77f6d696e746572000000000000000000000000000000000000000000000000000081565b610230610397366004611e98565b610706565b6101bb6103aa3660046120b3565b610729565b6102306103bd366004611f4a565b610777565b60006103d6826103d061078b565b906107b9565b92915050565b60606103e6610893565b905090565b60006103d6826103f96108a5565b906108d3565b61041533838361040d6108a5565b92919061098c565b5050565b610431338484846104286108a5565b93929190610c07565b505050565b3361044981610443610ee5565b90610f13565b610431838383610457610f7e565b929190610fac565b6104947f6d696e7465720000000000000000000000000000000000000000000000000000335b61048d610f7e565b9190611082565b61041582826104a16108a5565b9190611108565b610431338484846104b76108a5565b93929190611280565b6104ea7f6d696e746572000000000000000000000000000000000000000000000000000033610485565b6104318383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061052b92506108a5915050565b91906112c6565b60006103d6826105406108a5565b90611492565b60006103d6826105546108a5565b906114fb565b6105847f6d696e746572000000000000000000000000000000000000000000000000000033610485565b6105d333858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105ca92506108a5915050565b93929190611577565b50505050565b6105ed33826105e6610f7e565b91906115ad565b50565b60006103e66105fd610ee5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b600061065b8383610626610f7e565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606103e6611651565b60006103e6610679611663565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6104153383836106a46108a5565b929190611691565b6106c83386868686866106bd6108a5565b9594939291906117a9565b5050505050565b60006103d6826106dd6108a5565b9061181f565b60606106f1826105406108a5565b506103d630836106ff611663565b9190611855565b3361071381610443610ee5565b610431838383610721610f7e565b929190611915565b600061065b83836107386108a5565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6105ed3382610784610ee5565b91906119df565b6000806103d660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6120dd565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610809575060006103d6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161085a575060016103d6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606103e66108a0611663565b611af3565b6000806103d660017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16120dd565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610937576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610982575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166103d6565b60009150506103d6565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff81166109eb576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610a56576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161092e565b610a61868287611b89565b610abe576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152821660248201526044810184905260640161092e565b73ffffffffffffffffffffffffffffffffffffffff8416610b235774010000000000000000000000000000000000000000821615610b1e57600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b610ba4565b740100000000000000000000000000000000000000008217808314610b545760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216610c54576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff8116610cb3576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff1614610d37576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810183905260440161092e565b610d42868587611b89565b610df1577401000000000000000000000000000000000000000081161580610d935750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b15610df1576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260640161092e565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff80851691829055851614610e825773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806103d660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6120dd565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610415576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161092e565b6000806103d660017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236120dd565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166105d35760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610431576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216602482015260440161092e565b73ffffffffffffffffffffffffffffffffffffffff8216611155576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff8116156111b5576040517f753eceac0000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b7fdead0000000000000000000000000000000000000000000000000000000000008103611211576040517f31e8d3d50000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b60008281526020858152604080832073ffffffffffffffffffffffffffffffffffffffff87169081905580845260018089019093528184208054909301909255518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b61128d8585858585610c07565b73ffffffffffffffffffffffffffffffffffffffff82163b156106c8576106c88484848460405180602001604052806000815250611bfe565b73ffffffffffffffffffffffffffffffffffffffff8216611313576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160005b8181101561145d57600083828151811061133457611334612117565b60209081029190910181015160008181529188905260409091205490915073ffffffffffffffffffffffffffffffffffffffff8116156113a3576040517f753eceac0000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b7fdead00000000000000000000000000000000000000000000000000000000000081036113ff576040517f31e8d3d50000000000000000000000000000000000000000000000000000000081526004810183905260240161092e565b60008281526020889052604080822073ffffffffffffffffffffffffffffffffffffffff89169081905590518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050600101611318565b5073ffffffffffffffffffffffffffffffffffffffff9092166000908152600190930160205250604090912080549091019055565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166114f1576040517fdd5604750000000000000000000000000000000000000000000000000000000081526004810184905260240161092e565b805b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff821661154a576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b611582858484611108565b73ffffffffffffffffffffffffffffffffffffffff83163b156106c8576106c8846000858585611bfe565b6115b8838284611082565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606103e661165e611663565b611d13565b6000806103d660017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56120dd565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361170e576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161092e565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6117b68787878787610c07565b73ffffffffffffffffffffffffffffffffffffffff84163b15611816576118168686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bfe92505050565b50505050505050565b6000818152602083905260408120547fdead0000000000000000000000000000000000000000000000000000000000001461065b565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa1580156118cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114f39190810190612175565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156105d35760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611074565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611a4c576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161092e565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d35783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611b0490612240565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3090612240565b8015611b7d5780601f10611b5257610100808354040283529160200191611b7d565b820191906000526020600020905b815481529060010190602001808311611b6057829003601f168201915b50505050509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806114f357505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611c58908990899088908890600401612293565b6020604051808303816000875af1158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b91906122dc565b7fffffffff0000000000000000000000000000000000000000000000000000000016146106c8576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024810183905260440161092e565b6060816001018054611b0490612240565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146105ed57600080fd5b600060208284031215611d6457600080fd5b813561065b81611d24565b60005b83811015611d8a578181015183820152602001611d72565b50506000910152565b60008151808452611dab816020860160208601611d6f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061065b6020830184611d93565b600060208284031215611e0257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e2d57600080fd5b919050565b60008060408385031215611e4557600080fd5b611e4e83611e09565b946020939093013593505050565b600080600060608486031215611e7157600080fd5b611e7a84611e09565b9250611e8860208501611e09565b9150604084013590509250925092565b60008060408385031215611eab57600080fd5b82359150611ebb60208401611e09565b90509250929050565b600080600060408486031215611ed957600080fd5b611ee284611e09565b9250602084013567ffffffffffffffff80821115611eff57600080fd5b818601915086601f830112611f1357600080fd5b813581811115611f2257600080fd5b8760208260051b8501011115611f3757600080fd5b6020830194508093505050509250925092565b600060208284031215611f5c57600080fd5b61065b82611e09565b60008083601f840112611f7757600080fd5b50813567ffffffffffffffff811115611f8f57600080fd5b602083019150836020828501011115611fa757600080fd5b9250929050565b60008060008060608587031215611fc457600080fd5b611fcd85611e09565b935060208501359250604085013567ffffffffffffffff811115611ff057600080fd5b611ffc87828801611f65565b95989497509550505050565b6000806040838503121561201b57600080fd5b61202483611e09565b91506020830135801515811461203957600080fd5b809150509250929050565b60008060008060006080868803121561205c57600080fd5b61206586611e09565b945061207360208701611e09565b935060408601359250606086013567ffffffffffffffff81111561209657600080fd5b6120a288828901611f65565b969995985093965092949392505050565b600080604083850312156120c657600080fd5b6120cf83611e09565b9150611ebb60208401611e09565b818103818111156103d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561218757600080fd5b815167ffffffffffffffff8082111561219f57600080fd5b818401915084601f8301126121b357600080fd5b8151818111156121c5576121c5612146565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561220b5761220b612146565b8160405282815287602084870101111561222457600080fd5b612235836020830160208801611d6f565b979650505050505050565b600181811c9082168061225457607f821691505b60208210810361228d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526122d26080830184611d93565b9695505050505050565b6000602082840312156122ee57600080fd5b815161065b81611d2456fea264697066735822122025f93236fafa111f4b38de8a00dcce2b7702fdabe0ed8c67993f39ddc5942f8864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0xC77C6955 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x8832E6E3 EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x4684D7E9 EQ PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1E5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D52 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D8 PUSH2 0x3DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x3EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E5C JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x436 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH2 0x230 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E5C JUMP JUMPDEST PUSH2 0x4A8 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC4 JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x532 JUMP JUMPDEST PUSH2 0x2B7 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FAE JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x230 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x5F0 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x662 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x66C JUMP JUMPDEST PUSH2 0x230 PUSH2 0x324 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x696 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x34A CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x6CF JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF0 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0x2B7 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x397 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E98 JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x729 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x3BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x3D0 PUSH2 0x78B JUMP JUMPDEST SWAP1 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x893 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x3F9 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH2 0x415 CALLER DUP4 DUP4 PUSH2 0x40D PUSH2 0x8A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x98C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x431 CALLER DUP5 DUP5 DUP5 PUSH2 0x428 PUSH2 0x8A5 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH2 0x449 DUP2 PUSH2 0x443 PUSH2 0xEE5 JUMP JUMPDEST SWAP1 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 PUSH2 0x457 PUSH2 0xF7E JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xFAC JUMP JUMPDEST PUSH2 0x494 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER JUMPDEST PUSH2 0x48D PUSH2 0xF7E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x415 DUP3 DUP3 PUSH2 0x4A1 PUSH2 0x8A5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x431 CALLER DUP5 DUP5 DUP5 PUSH2 0x4B7 PUSH2 0x8A5 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x4EA PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x485 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x52B SWAP3 POP PUSH2 0x8A5 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x540 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x554 PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x14FB JUMP JUMPDEST PUSH2 0x584 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x485 JUMP JUMPDEST PUSH2 0x5D3 CALLER DUP6 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x5CA SWAP3 POP PUSH2 0x8A5 SWAP2 POP POP JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1577 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5ED CALLER DUP3 PUSH2 0x5E6 PUSH2 0xF7E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x15AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x5FD PUSH2 0xEE5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP4 DUP4 PUSH2 0x626 PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x1651 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x679 PUSH2 0x1663 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x415 CALLER DUP4 DUP4 PUSH2 0x6A4 PUSH2 0x8A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x6C8 CALLER DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x6BD PUSH2 0x8A5 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17A9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0x6DD PUSH2 0x8A5 JUMP JUMPDEST SWAP1 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6F1 DUP3 PUSH2 0x540 PUSH2 0x8A5 JUMP JUMPDEST POP PUSH2 0x3D6 ADDRESS DUP4 PUSH2 0x6FF PUSH2 0x1663 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1855 JUMP JUMPDEST CALLER PUSH2 0x713 DUP2 PUSH2 0x443 PUSH2 0xEE5 JUMP JUMPDEST PUSH2 0x431 DUP4 DUP4 DUP4 PUSH2 0x721 PUSH2 0xF7E JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65B DUP4 DUP4 PUSH2 0x738 PUSH2 0x8A5 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x5ED CALLER DUP3 PUSH2 0x784 PUSH2 0xEE5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x809 JUMPI POP PUSH1 0x0 PUSH2 0x3D6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x85A JUMPI POP PUSH1 0x1 PUSH2 0x3D6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x8A0 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x937 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x982 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x9EB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0xA61 DUP7 DUP3 DUP8 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0xABE JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xB23 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0xBA4 JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xB54 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0xC54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xCB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0xD42 DUP7 DUP6 DUP8 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0xDF1 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0xD93 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xDF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0xE82 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x20DD JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x11B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x1211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x31E8D3D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP10 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP5 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0x128D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xC07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x6C8 JUMPI PUSH2 0x6C8 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1BFE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1313 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x145D JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x31E8D3D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD DUP5 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP PUSH1 0x1 ADD PUSH2 0x1318 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x14F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x154A JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1582 DUP6 DUP5 DUP5 PUSH2 0x1108 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND EXTCODESIZE ISZERO PUSH2 0x6C8 JUMPI PUSH2 0x6C8 DUP5 PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0x1BFE JUMP JUMPDEST PUSH2 0x15B8 DUP4 DUP3 DUP5 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E6 PUSH2 0x165E PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x20DD JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x170E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x17B6 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xC07 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1816 JUMPI PUSH2 0x1816 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1BFE SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x65B JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x14F3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1074 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x92E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D3 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1B04 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1B30 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B7D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1B52 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B7D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B60 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x14F3 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1C58 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2293 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C9B SWAP2 SWAP1 PUSH2 0x22DC JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x6C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x92E JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1B04 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x65B DUP2 PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D8A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D72 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1DAB DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D6F JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x65B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1E2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E4E DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7A DUP5 PUSH2 0x1E09 JUMP JUMPDEST SWAP3 POP PUSH2 0x1E88 PUSH1 0x20 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1EBB PUSH1 0x20 DUP5 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE2 DUP5 PUSH2 0x1E09 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1F37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x65B DUP3 PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1F77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1FC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FCD DUP6 PUSH2 0x1E09 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FFC DUP8 DUP3 DUP9 ADD PUSH2 0x1F65 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x201B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2024 DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x205C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2065 DUP7 PUSH2 0x1E09 JUMP JUMPDEST SWAP5 POP PUSH2 0x2073 PUSH1 0x20 DUP8 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20A2 DUP9 DUP3 DUP10 ADD PUSH2 0x1F65 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20CF DUP4 PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EBB PUSH1 0x20 DUP5 ADD PUSH2 0x1E09 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x219F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x21C5 JUMPI PUSH2 0x21C5 PUSH2 0x2146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x220B JUMPI PUSH2 0x220B PUSH2 0x2146 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2235 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1D6F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2254 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x228D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x22D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D93 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x65B DUP2 PUSH2 0x1D24 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xF9 ORIGIN CALLDATASIZE STATICCALL STATICCALL GT 0x1F 0x4B CODESIZE 0xDE DUP11 STOP 0xDC 0xCE 0x2B PUSH24 0x2FDABE0ED8C67993F39DDC5942F8864736F6C6343000818 STOP CALLER ","sourceMap":"590:282:47:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;611:14:62;;604:22;586:41;;574:2;559:18;542:165:14;;;;;;;;942:163:24;;;:::i;:::-;;;;;;;:::i;1959:146:23:-;;;;;;:::i;:::-;;:::i;:::-;;;1814:42:62;1802:55;;;1784:74;;1772:2;1757:18;1959:146:23;1638:226:62;603:137:23;;;;;;:::i;:::-;;:::i;:::-;;976:159;;;;;;:::i;:::-;;:::i;1116:257:3:-;;;;;;:::i;:::-;;:::i;1195:202:25:-;;;;;;:::i;:::-;;:::i;1169:175:23:-;;;;;;:::i;:::-;;:::i;2088:225:25:-;;;;;;:::i;:::-;;:::i;1785:140:23:-;;;;;;:::i;:::-;;:::i;1614:137::-;;;;;;:::i;:::-;;:::i;:::-;;;3952:25:62;;;3940:2;3925:18;1614:137:23;3806:177:62;1613:251:25;;;;;;:::i;:::-;;:::i;1994:124:3:-;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;2159:162:3:-;;;;;;:::i;:::-;;:::i;1147:169:24:-;;;:::i;1214:177:38:-;;;:::i;774:168:23:-;;;;;;:::i;:::-;;:::i;1378:202::-;;;;;;:::i;:::-;;:::i;2471:150:25:-;;;;;;:::i;:::-;;:::i;1358:267:24:-;;;;;;:::i;:::-;;:::i;932:46:25:-;;;;;1694:259:3;;;;;;:::i;:::-;;:::i;2139:183:23:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;942:163:24:-;1032:23;1074:24;:22;:24::i;:::-;1067:31;;942:163;:::o;1959:146:23:-;2020:16;2055:43;2090:7;2055:22;:20;:22::i;:::-;:34;;:43::i;603:137::-;676:57;734:10:45;721:2:23;725:7;676:22;:20;:22::i;:::-;:30;:57;;:30;:57::i;:::-;603:137;;:::o;976:159::-;1060:68;734:10:45;1110:4:23;1116:2;1120:7;1060:22;:20;:22::i;:::-;:35;:68;;;:35;:68::i;:::-;976:159;;;:::o;1116:257:3:-;734:10:45;1226:66:3;734:10:45;1226:33:3;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;1195:202:25:-;1265:71;1310:11;734:10:45;1323:12:25;1265:29;:27;:29::i;:::-;:44;:71;:44;:71::i;:::-;1346:44;1378:2;1382:7;1346:22;:20;:22::i;:::-;:31;:44;:31;:44::i;1169:175:23:-;1265:72;734:10:45;1319:4:23;1325:2;1329:7;1265:22;:20;:22::i;:::-;:39;:72;;;:39;:72::i;2088:225:25:-;2175:71;2220:11;734:10:45;2233:12:25;655:96:45;2175:71:25;2256:50;2293:2;2297:8;;2256:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2256:22:25;;-1:-1:-1;2256:20:25;;-1:-1:-1;;2256:22:25:i;:::-;:36;:50;:36;:50::i;1785:140:23:-;1842:18;1879:39;1910:7;1879:22;:20;:22::i;:::-;:30;;:39::i;1614:137::-;1671:15;1705:39;1738:5;1705:22;:20;:22::i;:::-;:32;;:39::i;1613:251:25:-;1708:71;1753:11;734:10:45;1766:12:25;655:96:45;1708:71:25;1789:68;734:10:45;1839:2:25;1843:7;1852:4;;1789:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1789:22:25;;-1:-1:-1;1789:20:25;;-1:-1:-1;;1789:22:25:i;:::-;:35;:68;;;:35;:68::i;:::-;1613:251;;;;:::o;1994:124:3:-;2049:62;734:10:45;2106:4:3;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;2159:162:3;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2774:13:12;2806;;;;;;;;;;;:22;;;;;;;;;;;;;;;2685:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;1147:169:24:-;1239:25;1283:26;:24;:26::i;1214:177:38:-;1273:44;1336:48;:29;:27;:29::i;:::-;2991:23:40;;;;;;2861:160;774:168:23;861:74;734:10:45;916:8:23;926;861:22;:20;:22::i;:::-;:40;:74;;:40;:74::i;1378:202::-;1495:78;734:10:45;1549:4:23;1555:2;1559:7;1568:4;;1495:22;:20;:22::i;:::-;:39;:78;;;;;:39;:78::i;:::-;1378:202;;;;;:::o;2471:150:25:-;2537:18;2574:40;2606:7;2574:22;:20;:22::i;:::-;:31;;:40::i;1358:267:24:-;1424:17;1453:39;1484:7;1453:22;:20;:22::i;:39::-;;1548:70;1603:4;1610:7;1548:29;:27;:29::i;:::-;:46;:70;:46;:70::i;1694:259:3:-;734:10:45;1805:66:3;734:10:45;1805:33:3;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;2139:183:23:-;2221:19;2259:56;2299:5;2306:8;2259:22;:20;:22::i;:::-;:39;:56;28679:18:37;;;;28641:19;28679:18;;;:11;;;;;:18;;;;;;;;:28;;;;;;;;;;;;;28541:173;864:152:4;934:75;734:10:45;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;706:130:38:-;751:23;793:36;:29;:27;:29::i;:::-;:34;:36::i;29031:174:37:-;29072:16;;1836:61;1896:1;1844:48;1836:61;:::i;27759:360::-;27838:16;27882:17;;;;;;;;;;;30661:19;;;27909:64;;27942:31;;;;;;;;3952:25:62;;;3925:18;;27942:31:37;;;;;;;;27909:64;2185:8;30940:33;;:38;27983:130;;-1:-1:-1;;28034:20:37;;;;:11;;;:20;;;;;;;;28027:27;;27983:130;28100:1;28085:17;;;;;4625:1052;4724:13;4740:17;;;;;;;;;;;30661:19;;;4767:64;;4800:31;;;;;;;;3952:25:62;;;3925:18;;4800:31:37;3806:177:62;4767:64:37;4876:5;4896:18;;;;;;;;4892:63;;4923:32;;;;;1814:42:62;1802:55;;4923:32:37;;;1784:74:62;1757:18;;4923:32:37;1638:226:62;4892:63:37;4970:38;4984:1;4987:12;5001:6;4970:13;:38::i;:::-;4965:111;;5017:59;;;;;7272:42:62;7341:15;;;5017:59:37;;;7323:34:62;7393:15;;7373:18;;;7366:43;7425:18;;;7418:34;;;7235:18;;5017:59:37;7060:398:62;4965:111:37;5090:16;;;5086:535;;2185:8;30940:33;;:38;5122:173;;5230:8;:17;;;;;;;;;;5250:30;;;5230:50;;5122:173;5086:535;;;2185:8;5356:33;;5407:29;;;5403:169;;5517:8;:17;;;;;;;;;;:40;;;5403:169;-1:-1:-1;5585:20:37;;;;:11;;;:20;;;;;:25;;;;;;;;;;5086:535;5662:7;5658:2;5635:35;;5644:12;5635:35;;;;;;;;;;;;4714:963;;4625:1052;;;;:::o;7350:956::-;7472:16;;;7468:58;;7497:29;;;;;;;;;;;;;;7468:58;7537:13;7553:17;;;;;;;;;;;30661:19;;;7580:64;;7613:31;;;;;;;;3952:25:62;;;3925:18;;7613:31:37;3806:177:62;7580:64:37;7658:26;;;7670:5;7658:26;;;7654:73;;7693:34;;;;;7667:42:62;7655:55;;7693:34:37;;;7637:74:62;7727:18;;;7720:34;;;7610:18;;7693:34:37;7463:297:62;7654:73:37;7743:30;7757:1;7760:4;7766:6;7743:13;:30::i;:::-;7738:185;;2185:8;30940:33;;:38;;7793:59;;-1:-1:-1;7832:20:37;;;;:11;;;:20;;;;;;;7822:30;;;7832:20;;7822:30;;7793:59;7789:123;;;7861:51;;;;;7272:42:62;7341:15;;;7861:51:37;;;7323:34:62;7393:15;;7373:18;;;7366:43;7425:18;;;7418:34;;;7235:18;;7861:51:37;7060:398:62;7789:123:37;7933:8;:17;;;;;;;;;;7953:20;;;;7933:40;;;;7987:10;;;7983:274;;8120:16;;;;;;;;:10;;;;:16;;;;;;8118:18;;;;;;8218:14;;;;;;;;8216:16;;;;;;;7983:274;8291:7;8287:2;8272:27;;8281:4;8272:27;;;;;;;;;;;;7458:848;7350:956;;;;;:::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1814:42:62;1802:55;;4543:25:13;;;1784:74:62;1757:18;;4543:25:13;1638:226:62;4381:174:12;4422:16;;702:67;768:1;710:54;702:67;:::i;1151:251::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1256:140;;1301:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1326:4;1301:29;;;1349:36;;7967:25:62;;;8069:18;;;8062:43;8141:15;;;8121:18;;;8114:43;;;;1349:36:12;;7955:2:62;7940:18;1349:36:12;;;;;;;;1151:251;;;;:::o;3645:170::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;3742:66;;3780:28;;;;;;;;8342:25:62;;;8415:42;8403:55;;8383:18;;;8376:83;8315:18;;3780:28:12;8168:297:62;18568:565:37;18656:16;;;18652:54;;18681:25;;;;;;;;;;;;;;18652:54;18717:13;18733:17;;;;;;;;;;;30661:19;;;;18760:60;;18792:28;;;;;;;;3952:25:62;;;3925:18;;18792:28:37;3806:177:62;18760:60:37;2379:66;30791:32;;18830:59;;18864:25;;;;;;;;3952::62;;;3925:18;;18864:25:37;3806:177:62;18830:59:37;18900:8;:17;;;;;;;;;;;18920:20;;;18900:40;;;;19053:14;;;:10;;;;:14;;;;;;19051:16;;;;;;;;19093:33;18909:7;;18900:8;19093:33;;18900:8;;19093:33;18642:491;18568:565;;;:::o;9478:277::-;9600:41;:1;9615:6;9623:4;9629:2;9633:7;9600:14;:41::i;:::-;9655:13;;;1702:19:44;:23;9651:98:37;;9686:52;9708:6;9716:4;9722:2;9726:7;9686:52;;;;;;;;;;;;:21;:52::i;21009:670::-;21112:16;;;21108:54;;21137:25;;;;;;;;;;;;;;21108:54;21190:15;;21173:14;21215:389;21235:6;21231:1;:10;21215:389;;;21262:15;21280:8;21289:1;21280:11;;;;;;;;:::i;:::-;;;;;;;;;;;;21305:13;21321:17;;;;;;;;;;;;21280:11;;-1:-1:-1;30661:19:37;;;;21352:60;;21384:28;;;;;;;;3952:25:62;;;3925:18;;21384:28:37;3806:177:62;21352:60:37;2379:66;30791:32;;21426:59;;21460:25;;;;;;;;3952::62;;;3925:18;;21460:25:37;3806:177:62;21426:59:37;21500:8;:17;;;;;;;;;;;21520:20;;;21500:40;;;;21560:33;;21509:7;;21500:8;21560:33;;21500:8;;21560:33;-1:-1:-1;;21243:3:37;;21215:389;;;-1:-1:-1;21638:14:37;;;;;;;;:10;;;;:14;;-1:-1:-1;21638:14:37;;;;:24;;;;;;;21009:670::o;27104:254::-;27179:18;27225:17;;;;;;;;;;;30661:19;;;27252:64;;27285:31;;;;;;;;3952:25:62;;;3925:18;;27285:31:37;3806:177:62;27252:64:37;27345:5;27333:18;27326:25;27104:254;-1:-1:-1;;;;27104:254:37:o;26583:203::-;26658:15;26689:19;;;26685:60;;26717:28;;;;;;;;;;;;;;26685:60;-1:-1:-1;26762:17:37;;;;;;:10;;;;;:17;;;;;;;26583:203::o;20029:268::-;20152:23;:1;20163:2;20167:7;20152:10;:23::i;:::-;20189:13;;;1702:19:44;:23;20185:106:37;;20220:60;20242:6;20258:1;20262:2;20266:7;20275:4;20220:21;:60::i;2288:213:12:-;2377:30;:1;2394:4;2400:6;2377:16;:30::i;:::-;2441:5;2417:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2461:33;;7967:25:62;;;8069:18;;;8062:43;;;8121:18;;8114:43;;;;2461:33:12;;7955:2:62;7940:18;2461:33:12;;;;;;;2288:213;;;:::o;939:136:38:-;986:25;1030:38;:29;:27;:29::i;:::-;:36;:38::i;3441:174:40:-;3482:16;;456:70;525:1;464:57;456:70;:::i;6187:290:37:-;6316:6;6304:18;;:8;:18;;;6300:63;;6331:32;;;;;1814:42:62;1802:55;;6331:32:37;;;1784:74:62;1757:18;;6331:32:37;1638:226:62;6300:63:37;6373:19;;;;;;;;:11;;;:19;;;;;;;;:29;;;;;;;;;;;;;:40;;;;;;;;;;;;;6428:42;;586:41:62;;;6428:42:37;;559:18:62;6428:42:37;;;;;;;6187:290;;;;:::o;11005:300::-;11148:41;:1;11163:6;11171:4;11177:2;11181:7;11148:14;:41::i;:::-;11203:13;;;1702:19:44;:23;11199:100:37;;11234:54;11256:6;11264:4;11270:2;11274:7;11283:4;;11234:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11234:21:37;;-1:-1:-1;;;11234:54:37:i;:::-;11005:300;;;;;;;:::o;28872:153::-;28948:18;29000:17;;;;;;;;;;;2379:66;30791:32;28985:33;30693:137;3225:210:40;3364:23;;;;:64;;;;;:23;7655:55:62;;;3364:64:40;;;7637:74:62;7727:18;;;7720:34;;;3332:13:40;;3364:23;;:40;;7610:18:62;;3364:64:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1780:252:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1886:140;;;1955:5;1930:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1979:36;;7967:25:62;;;8069:18;;;8062:43;8141:15;;;8121:18;;;8114:43;;;;1979:36:12;;7955:2:62;7940:18;1979:36:12;7765:398:62;3060:369:13;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1814:42:62;1802:55;;3243:24:13;;;1784:74:62;1757:18;;3243:24:13;1638:226:62;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3148:281;3060:369;;;:::o;2358:115:40:-;2413:23;2455:1;:11;;2448:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2358:115;;;:::o;30245:185:37:-;30340:15;30384:7;30375:16;;:5;:16;;;30374:49;;;-1:-1:-1;;30396:18:37;;;;;;;;:11;;;;;:18;;;;;;;;:27;;;;;;;;;;;;;30245:185::o;29662:270::-;29793:65;;1948:41;29793:65;;;1948:41;29793:36;;;;1948:41;;29793:65;;29830:6;;29838:4;;29844:7;;29853:4;;29793:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:84;;;29789:136;;29886:39;;;;;7667:42:62;7655:55;;29886:39:37;;;7637:74:62;7727:18;;;7720:34;;;7610:18;;29886:39:37;7463:297:62;2587:121:40;2644:25;2688:1;:13;;2681:20;;;;;:::i;14:177:62:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:62;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:62:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:62;;1453:180;-1:-1:-1;1453:180:62:o;1869:196::-;1937:20;;1997:42;1986:54;;1976:65;;1966:93;;2055:1;2052;2045:12;1966:93;1869:196;;;:::o;2070:254::-;2138:6;2146;2199:2;2187:9;2178:7;2174:23;2170:32;2167:52;;;2215:1;2212;2205:12;2167:52;2238:29;2257:9;2238:29;:::i;:::-;2228:39;2314:2;2299:18;;;;2286:32;;-1:-1:-1;;;2070:254:62:o;2329:328::-;2406:6;2414;2422;2475:2;2463:9;2454:7;2450:23;2446:32;2443:52;;;2491:1;2488;2481:12;2443:52;2514:29;2533:9;2514:29;:::i;:::-;2504:39;;2562:38;2596:2;2585:9;2581:18;2562:38;:::i;:::-;2552:48;;2647:2;2636:9;2632:18;2619:32;2609:42;;2329:328;;;;;:::o;2662:254::-;2730:6;2738;2791:2;2779:9;2770:7;2766:23;2762:32;2759:52;;;2807:1;2804;2797:12;2759:52;2843:9;2830:23;2820:33;;2872:38;2906:2;2895:9;2891:18;2872:38;:::i;:::-;2862:48;;2662:254;;;;;:::o;2921:689::-;3016:6;3024;3032;3085:2;3073:9;3064:7;3060:23;3056:32;3053:52;;;3101:1;3098;3091:12;3053:52;3124:29;3143:9;3124:29;:::i;:::-;3114:39;;3204:2;3193:9;3189:18;3176:32;3227:18;3268:2;3260:6;3257:14;3254:34;;;3284:1;3281;3274:12;3254:34;3322:6;3311:9;3307:22;3297:32;;3367:7;3360:4;3356:2;3352:13;3348:27;3338:55;;3389:1;3386;3379:12;3338:55;3429:2;3416:16;3455:2;3447:6;3444:14;3441:34;;;3471:1;3468;3461:12;3441:34;3524:7;3519:2;3509:6;3506:1;3502:14;3498:2;3494:23;3490:32;3487:45;3484:65;;;3545:1;3542;3535:12;3484:65;3576:2;3572;3568:11;3558:21;;3598:6;3588:16;;;;;2921:689;;;;;:::o;3615:186::-;3674:6;3727:2;3715:9;3706:7;3702:23;3698:32;3695:52;;;3743:1;3740;3733:12;3695:52;3766:29;3785:9;3766:29;:::i;3988:347::-;4039:8;4049:6;4103:3;4096:4;4088:6;4084:17;4080:27;4070:55;;4121:1;4118;4111:12;4070:55;-1:-1:-1;4144:20:62;;4187:18;4176:30;;4173:50;;;4219:1;4216;4209:12;4173:50;4256:4;4248:6;4244:17;4232:29;;4308:3;4301:4;4292:6;4284;4280:19;4276:30;4273:39;4270:59;;;4325:1;4322;4315:12;4270:59;3988:347;;;;;:::o;4340:551::-;4428:6;4436;4444;4452;4505:2;4493:9;4484:7;4480:23;4476:32;4473:52;;;4521:1;4518;4511:12;4473:52;4544:29;4563:9;4544:29;:::i;:::-;4534:39;;4620:2;4609:9;4605:18;4592:32;4582:42;;4675:2;4664:9;4660:18;4647:32;4702:18;4694:6;4691:30;4688:50;;;4734:1;4731;4724:12;4688:50;4773:58;4823:7;4814:6;4803:9;4799:22;4773:58;:::i;:::-;4340:551;;;;-1:-1:-1;4850:8:62;-1:-1:-1;;;;4340:551:62:o;5343:347::-;5408:6;5416;5469:2;5457:9;5448:7;5444:23;5440:32;5437:52;;;5485:1;5482;5475:12;5437:52;5508:29;5527:9;5508:29;:::i;:::-;5498:39;;5587:2;5576:9;5572:18;5559:32;5634:5;5627:13;5620:21;5613:5;5610:32;5600:60;;5656:1;5653;5646:12;5600:60;5679:5;5669:15;;;5343:347;;;;;:::o;5695:626::-;5792:6;5800;5808;5816;5824;5877:3;5865:9;5856:7;5852:23;5848:33;5845:53;;;5894:1;5891;5884:12;5845:53;5917:29;5936:9;5917:29;:::i;:::-;5907:39;;5965:38;5999:2;5988:9;5984:18;5965:38;:::i;:::-;5955:48;;6050:2;6039:9;6035:18;6022:32;6012:42;;6105:2;6094:9;6090:18;6077:32;6132:18;6124:6;6121:30;6118:50;;;6164:1;6161;6154:12;6118:50;6203:58;6253:7;6244:6;6233:9;6229:22;6203:58;:::i;:::-;5695:626;;;;-1:-1:-1;5695:626:62;;-1:-1:-1;6280:8:62;;6177:84;5695:626;-1:-1:-1;;;5695:626:62:o;6508:260::-;6576:6;6584;6637:2;6625:9;6616:7;6612:23;6608:32;6605:52;;;6653:1;6650;6643:12;6605:52;6676:29;6695:9;6676:29;:::i;:::-;6666:39;;6724:38;6758:2;6747:9;6743:18;6724:38;:::i;6773:282::-;6840:9;;;6861:11;;;6858:191;;;6905:77;6902:1;6895:88;7006:4;7003:1;6996:15;7034:4;7031:1;7024:15;8470:184;8522:77;8519:1;8512:88;8619:4;8616:1;8609:15;8643:4;8640:1;8633:15;8659:184;8711:77;8708:1;8701:88;8808:4;8805:1;8798:15;8832:4;8829:1;8822:15;8848:956;8928:6;8981:2;8969:9;8960:7;8956:23;8952:32;8949:52;;;8997:1;8994;8987:12;8949:52;9030:9;9024:16;9059:18;9100:2;9092:6;9089:14;9086:34;;;9116:1;9113;9106:12;9086:34;9154:6;9143:9;9139:22;9129:32;;9199:7;9192:4;9188:2;9184:13;9180:27;9170:55;;9221:1;9218;9211:12;9170:55;9250:2;9244:9;9272:2;9268;9265:10;9262:36;;;9278:18;;:::i;:::-;9412:2;9406:9;9474:4;9466:13;;9317:66;9462:22;;;9486:2;9458:31;9454:40;9442:53;;;9510:18;;;9530:22;;;9507:46;9504:72;;;9556:18;;:::i;:::-;9596:10;9592:2;9585:22;9631:2;9623:6;9616:18;9671:7;9666:2;9661;9657;9653:11;9649:20;9646:33;9643:53;;;9692:1;9689;9682:12;9643:53;9705:68;9770:2;9765;9757:6;9753:15;9748:2;9744;9740:11;9705:68;:::i;:::-;9792:6;8848:956;-1:-1:-1;;;;;;;8848:956:62:o;9809:437::-;9888:1;9884:12;;;;9931;;;9952:61;;10006:4;9998:6;9994:17;9984:27;;9952:61;10059:2;10051:6;10048:14;10028:18;10025:38;10022:218;;10096:77;10093:1;10086:88;10197:4;10194:1;10187:15;10225:4;10222:1;10215:15;10022:218;;9809:437;;;:::o;10251:512::-;10445:4;10474:42;10555:2;10547:6;10543:15;10532:9;10525:34;10607:2;10599:6;10595:15;10590:2;10579:9;10575:18;10568:43;;10647:6;10642:2;10631:9;10627:18;10620:34;10690:3;10685:2;10674:9;10670:18;10663:31;10711:46;10752:3;10741:9;10737:19;10729:6;10711:46;:::i;:::-;10703:54;10251:512;-1:-1:-1;;;;;;10251:512:62:o;10768:249::-;10837:6;10890:2;10878:9;10869:7;10865:23;10861:32;10858:52;;;10906:1;10903;10896:12;10858:52;10938:9;10932:16;10957:30;10981:5;10957:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1801400","executionCost":"infinite","totalCost":"infinite"},"external":{"MINTER_ROLE()":"239","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","batchMint(address,uint256[])":"infinite","getApproved(uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","metadataResolver()":"infinite","mint(address,uint256)":"infinite","name()":"infinite","owner()":"infinite","ownerOf(uint256)":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeMint(address,uint256,bytes)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","wasBurnt(uint256)":"infinite"}},"methodIdentifiers":{"MINTER_ROLE()":"d5391393","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","batchMint(address,uint256[])":"4684d7e9","getApproved(uint256)":"081812fc","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","metadataResolver()":"a0c76f62","mint(address,uint256)":"40c10f19","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeMint(address,uint256,bytes)":"8832e6e3","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","wasBurnt(uint256)":"c77c6955"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"metadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721BurntToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wasBurnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenWasBurnt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721BurntToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that has been burnt before.\"}}],\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SelfApproval(address)\":[{\"params\":{\"account\":\"The account trying to approve itself.\"}}],\"ERC721SelfApprovalForAll(address)\":[{\"params\":{\"account\":\"The account trying to approveForAll itself.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"batchMint(address,uint256[])\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"wasBurnt(uint256)\":{\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenWasBurnt\":\"Whether the token was burnt.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721BurntToken(uint256)\":[{\"notice\":\"Thrown when minting a token which has been burnt before (MintableOnce implementation).\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC721SelfApproval(address)\":[{\"notice\":\"Thrown when trying to approve oneself.\"}],\"ERC721SelfApprovalForAll(address)\":[{\"notice\":\"Thrown when trying to approveForAll oneself.\"}],\"ERC721TransferToAddressZero()\":[{\"notice\":\"Thrown when transferring a token to the zero address.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"wasBurnt(uint256)\":{\"notice\":\"Gets whether a token was burnt.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCNFT.sol\":\"BCNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x8d51efbca838009de503c3e3958bdfab15ad3b548beeb9037a53ddbc0ecb748f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x975e348e090c7f844de2c9428f8f5747ea1e3b2d7513acb5f86f33b171ff1414\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x7d60a63e39121f769f53d6132706e80be62df0805faccf1abf80947e5a7cf293\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x54eee5fa135d93ae950f24e3a76d7ca21947c49222b2075c8608f5b39cec6828\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0xa4ef6c175ebe45b413531d642b932e4075bcafcba63bc9d9da18ecfdd3a368d8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xe42d03f1b392baf2296e5ddc2f23e740e3885f0d0499535b260763988fe53c60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17f7da6f91ec0f2187162771b27d26779b7a06a5eb7ae3cf54c5a9b22bdbcffe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721Base} from \\\"./base/ERC721Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721 is ERC721Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\\n    constructor() {\\n        ERC721Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0xd5df47b537a6dec0cd4998aa1ae6a660a6a38588d4961ecb16f3ace99d9aa276\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0x8affc8678def409d5eff9a82be2deb2302ddcedd3014612ff9b4633cd24b6b43\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MintableOnceBase} from \\\"./base/ERC721MintableOnceBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721MintableOnce is ERC721MintableOnceBase, AccessControl {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    constructor() {\\n        ERC721Storage.initERC721Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xd9ecba5ba30e82585db25e7ebb39a94b893f3a1e01289cc5b595f375626008f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721Base is IERC721, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external virtual {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        ERC721Storage.layout().transferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddec388526c95c4c631794ec27915d8df67373c0be17eee950e2e09769b8990\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xeed9259228d3848a7483aac389f492923abe970217ffe10664246fe15b889b2a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MintableOnceBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC721MintableOnceBase is IERC721Mintable, Context {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function mint(address to, uint256 tokenId) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().mintOnce(to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().safeMintOnce(_msgSender(), to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721Mintable\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC721Storage.layout().batchMintOnce(to, tokenIds);\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(uint256 tokenId) external view virtual returns (bool tokenWasBurnt) {\\n        return ERC721Storage.layout().wasBurnt(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x94ffd27c4631eaf9c16567e964b3b818c8f75179f9473b9b91a990b5b16efbc5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5dbdc29fc924f0f8561878769dbcd8ed074aaf75a2a0ecc331ab2ad46e957125\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0xbc987269dc1b0c938326f912a3af2d014d2c7e90ecc69275301ad4cee31b3d3c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0x271fa29ff133cd9ab194e45b75d3e5b000dce97454ed4a99eefc0c4ff33a32a9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\",\"keccak256\":\"0xbcd37e0340c77870014b5c952be8abf771dee6acec371f2b86d468544541e6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xc2104e270986a3e96ffd30ffdb1b7c9a10f638eb86250c6b6094ac0228e35640\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x77d6a1d436b12b6418b9f84369ad5cc25c516b2580a93a040996b7fdfde9e903\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x62c5604f93648b69959d403e24dbe44fab7906d634b2e9fe5d4eb90c50fcb549\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x1b4f7cc112f984bc86d873d1b49efdc3bffbad5148402b3f31e5e567b48acf03\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0xd75316af1cb77196f89011ffbad8d9fb306d75a797d4021fc3bcc38c15ee80ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3201fb45abb3d8a15fe001d6c8c39a4ceeebfbe4f7a9315c149c99404f0f5a4a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4ebb8d458fa720d10784a7e9e2c6dfb9ca857ec9f71d430e9f8ebe6c1261425a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xd1489acc99fc085c1aab9fe7c4c025ddc5f3eae9c5fef03c30e5bddcb49d4e8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0xb5804c3bcf49195660c2bade8d2d5bb211bc4c2e6b73e760f44db5d21a9e435a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90cb5c5b4f3cfcd18b0913c68d57ea6b4a1dff7dcdbf1abec8c52c5f076ee764\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/BCNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {ERC721MintableOnce} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721MintableOnce.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\n\\ncontract BCNFT is ContractOwnership, ERC721, ERC721Metadata, ERC721MintableOnce {\\n    constructor(\\n        ITokenMetadataResolver metadataResolver\\n    ) ContractOwnership(_msgSender()) ERC721() ERC721Metadata(\\\"Bonding Curve NFT\\\", \\\"BCNFT\\\", metadataResolver) ERC721MintableOnce() {}\\n}\\n\",\"keccak256\":\"0xfa03ea3c526e4beb9f06e9e07325fa9da7e5d61abd3639e8a96afaf9eb8ad915\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721BurntToken(uint256)":[{"notice":"Thrown when minting a token which has been burnt before (MintableOnce implementation)."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"notice":"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"ERC721SelfApproval(address)":[{"notice":"Thrown when trying to approve oneself."}],"ERC721SelfApprovalForAll(address)":[{"notice":"Thrown when trying to approveForAll oneself."}],"ERC721TransferToAddressZero()":[{"notice":"Thrown when transferring a token to the zero address."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"owner()":{"notice":"Gets the address of the contract owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"wasBurnt(uint256)":{"notice":"Gets whether a token was burnt."}},"version":1}}},"contracts/BCNFTMinter.sol":{"BCNFTMinter":{"abi":[{"inputs":[{"internalType":"contract ICurve","name":"_curve","type":"address"},{"internalType":"contract IERC20","name":"_feeToken","type":"address"},{"internalType":"address","name":"_feeReceiver","type":"address"},{"internalType":"uint256","name":"maxTokenId","type":"uint256"},{"internalType":"contract IERC721Mintable","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC721MinterMaxTokenIdExceeded","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"ERC721MinterUnsupportedContractType","type":"error"},{"inputs":[],"name":"ERC721MinterZeroMaxTokenId","type":"error"},{"inputs":[],"name":"ERC721MinterZeroTokenAddress","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"curveContract","type":"address"}],"name":"InvalidCurveContractType","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"inputs":[],"name":"currentTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"curve","outputs":[{"internalType":"contract ICurve","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeReceiver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"currentTokenId()":{"returns":{"tokenId":"The current token ID."}},"maxTokenId()":{"returns":{"tokenId":"The maximum token ID."}},"mint(address)":{"params":{"to":"The address to receive the token."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4992":{"entryPoint":null,"id":4992,"parameterSlots":5,"returnSlots":0},"@_5716":{"entryPoint":null,"id":5716,"parameterSlots":2,"returnSlots":0},"@constructorInit_5950":{"entryPoint":415,"id":5950,"parameterSlots":3,"returnSlots":0},"@layout_1009":{"entryPoint":719,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_6056":{"entryPoint":361,"id":6056,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_963":{"entryPoint":767,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1001,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ICurve_$5316t_contract$_IERC20_$3965t_addresst_uint256t_contract$_IERC721Mintable_$1861_fromMemory":{"entryPoint":885,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1044,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_ICurve":{"entryPoint":860,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1889:62","nodeType":"YulBlock","src":"0:1889:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"67:86:62","nodeType":"YulBlock","src":"67:86:62","statements":[{"body":{"nativeSrc":"131:16:62","nodeType":"YulBlock","src":"131:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:62","nodeType":"YulLiteral","src":"140:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:62","nodeType":"YulLiteral","src":"143:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:62","nodeType":"YulIdentifier","src":"133:6:62"},"nativeSrc":"133:12:62","nodeType":"YulFunctionCall","src":"133:12:62"},"nativeSrc":"133:12:62","nodeType":"YulExpressionStatement","src":"133:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:62","nodeType":"YulIdentifier","src":"90:5:62"},{"arguments":[{"name":"value","nativeSrc":"101:5:62","nodeType":"YulIdentifier","src":"101:5:62"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:62","nodeType":"YulLiteral","src":"116:3:62","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:62","nodeType":"YulLiteral","src":"121:1:62","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:62","nodeType":"YulIdentifier","src":"112:3:62"},"nativeSrc":"112:11:62","nodeType":"YulFunctionCall","src":"112:11:62"},{"kind":"number","nativeSrc":"125:1:62","nodeType":"YulLiteral","src":"125:1:62","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:62","nodeType":"YulIdentifier","src":"108:3:62"},"nativeSrc":"108:19:62","nodeType":"YulFunctionCall","src":"108:19:62"}],"functionName":{"name":"and","nativeSrc":"97:3:62","nodeType":"YulIdentifier","src":"97:3:62"},"nativeSrc":"97:31:62","nodeType":"YulFunctionCall","src":"97:31:62"}],"functionName":{"name":"eq","nativeSrc":"87:2:62","nodeType":"YulIdentifier","src":"87:2:62"},"nativeSrc":"87:42:62","nodeType":"YulFunctionCall","src":"87:42:62"}],"functionName":{"name":"iszero","nativeSrc":"80:6:62","nodeType":"YulIdentifier","src":"80:6:62"},"nativeSrc":"80:50:62","nodeType":"YulFunctionCall","src":"80:50:62"},"nativeSrc":"77:70:62","nodeType":"YulIf","src":"77:70:62"}]},"name":"validator_revert_contract_ICurve","nativeSrc":"14:139:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:62","nodeType":"YulTypedName","src":"56:5:62","type":""}],"src":"14:139:62"},{"body":{"nativeSrc":"361:599:62","nodeType":"YulBlock","src":"361:599:62","statements":[{"body":{"nativeSrc":"408:16:62","nodeType":"YulBlock","src":"408:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"417:1:62","nodeType":"YulLiteral","src":"417:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"420:1:62","nodeType":"YulLiteral","src":"420:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"410:6:62","nodeType":"YulIdentifier","src":"410:6:62"},"nativeSrc":"410:12:62","nodeType":"YulFunctionCall","src":"410:12:62"},"nativeSrc":"410:12:62","nodeType":"YulExpressionStatement","src":"410:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"382:7:62","nodeType":"YulIdentifier","src":"382:7:62"},{"name":"headStart","nativeSrc":"391:9:62","nodeType":"YulIdentifier","src":"391:9:62"}],"functionName":{"name":"sub","nativeSrc":"378:3:62","nodeType":"YulIdentifier","src":"378:3:62"},"nativeSrc":"378:23:62","nodeType":"YulFunctionCall","src":"378:23:62"},{"kind":"number","nativeSrc":"403:3:62","nodeType":"YulLiteral","src":"403:3:62","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"374:3:62","nodeType":"YulIdentifier","src":"374:3:62"},"nativeSrc":"374:33:62","nodeType":"YulFunctionCall","src":"374:33:62"},"nativeSrc":"371:53:62","nodeType":"YulIf","src":"371:53:62"},{"nativeSrc":"433:29:62","nodeType":"YulVariableDeclaration","src":"433:29:62","value":{"arguments":[{"name":"headStart","nativeSrc":"452:9:62","nodeType":"YulIdentifier","src":"452:9:62"}],"functionName":{"name":"mload","nativeSrc":"446:5:62","nodeType":"YulIdentifier","src":"446:5:62"},"nativeSrc":"446:16:62","nodeType":"YulFunctionCall","src":"446:16:62"},"variables":[{"name":"value","nativeSrc":"437:5:62","nodeType":"YulTypedName","src":"437:5:62","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"504:5:62","nodeType":"YulIdentifier","src":"504:5:62"}],"functionName":{"name":"validator_revert_contract_ICurve","nativeSrc":"471:32:62","nodeType":"YulIdentifier","src":"471:32:62"},"nativeSrc":"471:39:62","nodeType":"YulFunctionCall","src":"471:39:62"},"nativeSrc":"471:39:62","nodeType":"YulExpressionStatement","src":"471:39:62"},{"nativeSrc":"519:15:62","nodeType":"YulAssignment","src":"519:15:62","value":{"name":"value","nativeSrc":"529:5:62","nodeType":"YulIdentifier","src":"529:5:62"},"variableNames":[{"name":"value0","nativeSrc":"519:6:62","nodeType":"YulIdentifier","src":"519:6:62"}]},{"nativeSrc":"543:40:62","nodeType":"YulVariableDeclaration","src":"543:40:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"568:9:62","nodeType":"YulIdentifier","src":"568:9:62"},{"kind":"number","nativeSrc":"579:2:62","nodeType":"YulLiteral","src":"579:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"564:3:62","nodeType":"YulIdentifier","src":"564:3:62"},"nativeSrc":"564:18:62","nodeType":"YulFunctionCall","src":"564:18:62"}],"functionName":{"name":"mload","nativeSrc":"558:5:62","nodeType":"YulIdentifier","src":"558:5:62"},"nativeSrc":"558:25:62","nodeType":"YulFunctionCall","src":"558:25:62"},"variables":[{"name":"value_1","nativeSrc":"547:7:62","nodeType":"YulTypedName","src":"547:7:62","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"625:7:62","nodeType":"YulIdentifier","src":"625:7:62"}],"functionName":{"name":"validator_revert_contract_ICurve","nativeSrc":"592:32:62","nodeType":"YulIdentifier","src":"592:32:62"},"nativeSrc":"592:41:62","nodeType":"YulFunctionCall","src":"592:41:62"},"nativeSrc":"592:41:62","nodeType":"YulExpressionStatement","src":"592:41:62"},{"nativeSrc":"642:17:62","nodeType":"YulAssignment","src":"642:17:62","value":{"name":"value_1","nativeSrc":"652:7:62","nodeType":"YulIdentifier","src":"652:7:62"},"variableNames":[{"name":"value1","nativeSrc":"642:6:62","nodeType":"YulIdentifier","src":"642:6:62"}]},{"nativeSrc":"668:40:62","nodeType":"YulVariableDeclaration","src":"668:40:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"693:9:62","nodeType":"YulIdentifier","src":"693:9:62"},{"kind":"number","nativeSrc":"704:2:62","nodeType":"YulLiteral","src":"704:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"689:3:62","nodeType":"YulIdentifier","src":"689:3:62"},"nativeSrc":"689:18:62","nodeType":"YulFunctionCall","src":"689:18:62"}],"functionName":{"name":"mload","nativeSrc":"683:5:62","nodeType":"YulIdentifier","src":"683:5:62"},"nativeSrc":"683:25:62","nodeType":"YulFunctionCall","src":"683:25:62"},"variables":[{"name":"value_2","nativeSrc":"672:7:62","nodeType":"YulTypedName","src":"672:7:62","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"750:7:62","nodeType":"YulIdentifier","src":"750:7:62"}],"functionName":{"name":"validator_revert_contract_ICurve","nativeSrc":"717:32:62","nodeType":"YulIdentifier","src":"717:32:62"},"nativeSrc":"717:41:62","nodeType":"YulFunctionCall","src":"717:41:62"},"nativeSrc":"717:41:62","nodeType":"YulExpressionStatement","src":"717:41:62"},{"nativeSrc":"767:17:62","nodeType":"YulAssignment","src":"767:17:62","value":{"name":"value_2","nativeSrc":"777:7:62","nodeType":"YulIdentifier","src":"777:7:62"},"variableNames":[{"name":"value2","nativeSrc":"767:6:62","nodeType":"YulIdentifier","src":"767:6:62"}]},{"nativeSrc":"793:35:62","nodeType":"YulAssignment","src":"793:35:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"813:9:62","nodeType":"YulIdentifier","src":"813:9:62"},{"kind":"number","nativeSrc":"824:2:62","nodeType":"YulLiteral","src":"824:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"809:3:62","nodeType":"YulIdentifier","src":"809:3:62"},"nativeSrc":"809:18:62","nodeType":"YulFunctionCall","src":"809:18:62"}],"functionName":{"name":"mload","nativeSrc":"803:5:62","nodeType":"YulIdentifier","src":"803:5:62"},"nativeSrc":"803:25:62","nodeType":"YulFunctionCall","src":"803:25:62"},"variableNames":[{"name":"value3","nativeSrc":"793:6:62","nodeType":"YulIdentifier","src":"793:6:62"}]},{"nativeSrc":"837:41:62","nodeType":"YulVariableDeclaration","src":"837:41:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"862:9:62","nodeType":"YulIdentifier","src":"862:9:62"},{"kind":"number","nativeSrc":"873:3:62","nodeType":"YulLiteral","src":"873:3:62","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"858:3:62","nodeType":"YulIdentifier","src":"858:3:62"},"nativeSrc":"858:19:62","nodeType":"YulFunctionCall","src":"858:19:62"}],"functionName":{"name":"mload","nativeSrc":"852:5:62","nodeType":"YulIdentifier","src":"852:5:62"},"nativeSrc":"852:26:62","nodeType":"YulFunctionCall","src":"852:26:62"},"variables":[{"name":"value_3","nativeSrc":"841:7:62","nodeType":"YulTypedName","src":"841:7:62","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"920:7:62","nodeType":"YulIdentifier","src":"920:7:62"}],"functionName":{"name":"validator_revert_contract_ICurve","nativeSrc":"887:32:62","nodeType":"YulIdentifier","src":"887:32:62"},"nativeSrc":"887:41:62","nodeType":"YulFunctionCall","src":"887:41:62"},"nativeSrc":"887:41:62","nodeType":"YulExpressionStatement","src":"887:41:62"},{"nativeSrc":"937:17:62","nodeType":"YulAssignment","src":"937:17:62","value":{"name":"value_3","nativeSrc":"947:7:62","nodeType":"YulIdentifier","src":"947:7:62"},"variableNames":[{"name":"value4","nativeSrc":"937:6:62","nodeType":"YulIdentifier","src":"937:6:62"}]}]},"name":"abi_decode_tuple_t_contract$_ICurve_$5316t_contract$_IERC20_$3965t_addresst_uint256t_contract$_IERC721Mintable_$1861_fromMemory","nativeSrc":"158:802:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"295:9:62","nodeType":"YulTypedName","src":"295:9:62","type":""},{"name":"dataEnd","nativeSrc":"306:7:62","nodeType":"YulTypedName","src":"306:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"318:6:62","nodeType":"YulTypedName","src":"318:6:62","type":""},{"name":"value1","nativeSrc":"326:6:62","nodeType":"YulTypedName","src":"326:6:62","type":""},{"name":"value2","nativeSrc":"334:6:62","nodeType":"YulTypedName","src":"334:6:62","type":""},{"name":"value3","nativeSrc":"342:6:62","nodeType":"YulTypedName","src":"342:6:62","type":""},{"name":"value4","nativeSrc":"350:6:62","nodeType":"YulTypedName","src":"350:6:62","type":""}],"src":"158:802:62"},{"body":{"nativeSrc":"1064:103:62","nodeType":"YulBlock","src":"1064:103:62","statements":[{"nativeSrc":"1074:26:62","nodeType":"YulAssignment","src":"1074:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1086:9:62","nodeType":"YulIdentifier","src":"1086:9:62"},{"kind":"number","nativeSrc":"1097:2:62","nodeType":"YulLiteral","src":"1097:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1082:3:62","nodeType":"YulIdentifier","src":"1082:3:62"},"nativeSrc":"1082:18:62","nodeType":"YulFunctionCall","src":"1082:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1074:4:62","nodeType":"YulIdentifier","src":"1074:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1116:9:62","nodeType":"YulIdentifier","src":"1116:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1131:6:62","nodeType":"YulIdentifier","src":"1131:6:62"},{"arguments":[{"kind":"number","nativeSrc":"1143:3:62","nodeType":"YulLiteral","src":"1143:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"1148:10:62","nodeType":"YulLiteral","src":"1148:10:62","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"1139:3:62","nodeType":"YulIdentifier","src":"1139:3:62"},"nativeSrc":"1139:20:62","nodeType":"YulFunctionCall","src":"1139:20:62"}],"functionName":{"name":"and","nativeSrc":"1127:3:62","nodeType":"YulIdentifier","src":"1127:3:62"},"nativeSrc":"1127:33:62","nodeType":"YulFunctionCall","src":"1127:33:62"}],"functionName":{"name":"mstore","nativeSrc":"1109:6:62","nodeType":"YulIdentifier","src":"1109:6:62"},"nativeSrc":"1109:52:62","nodeType":"YulFunctionCall","src":"1109:52:62"},"nativeSrc":"1109:52:62","nodeType":"YulExpressionStatement","src":"1109:52:62"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"965:202:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1033:9:62","nodeType":"YulTypedName","src":"1033:9:62","type":""},{"name":"value0","nativeSrc":"1044:6:62","nodeType":"YulTypedName","src":"1044:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1055:4:62","nodeType":"YulTypedName","src":"1055:4:62","type":""}],"src":"965:202:62"},{"body":{"nativeSrc":"1250:199:62","nodeType":"YulBlock","src":"1250:199:62","statements":[{"body":{"nativeSrc":"1296:16:62","nodeType":"YulBlock","src":"1296:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1305:1:62","nodeType":"YulLiteral","src":"1305:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1308:1:62","nodeType":"YulLiteral","src":"1308:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1298:6:62","nodeType":"YulIdentifier","src":"1298:6:62"},"nativeSrc":"1298:12:62","nodeType":"YulFunctionCall","src":"1298:12:62"},"nativeSrc":"1298:12:62","nodeType":"YulExpressionStatement","src":"1298:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1271:7:62","nodeType":"YulIdentifier","src":"1271:7:62"},{"name":"headStart","nativeSrc":"1280:9:62","nodeType":"YulIdentifier","src":"1280:9:62"}],"functionName":{"name":"sub","nativeSrc":"1267:3:62","nodeType":"YulIdentifier","src":"1267:3:62"},"nativeSrc":"1267:23:62","nodeType":"YulFunctionCall","src":"1267:23:62"},{"kind":"number","nativeSrc":"1292:2:62","nodeType":"YulLiteral","src":"1292:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1263:3:62","nodeType":"YulIdentifier","src":"1263:3:62"},"nativeSrc":"1263:32:62","nodeType":"YulFunctionCall","src":"1263:32:62"},"nativeSrc":"1260:52:62","nodeType":"YulIf","src":"1260:52:62"},{"nativeSrc":"1321:29:62","nodeType":"YulVariableDeclaration","src":"1321:29:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1340:9:62","nodeType":"YulIdentifier","src":"1340:9:62"}],"functionName":{"name":"mload","nativeSrc":"1334:5:62","nodeType":"YulIdentifier","src":"1334:5:62"},"nativeSrc":"1334:16:62","nodeType":"YulFunctionCall","src":"1334:16:62"},"variables":[{"name":"value","nativeSrc":"1325:5:62","nodeType":"YulTypedName","src":"1325:5:62","type":""}]},{"body":{"nativeSrc":"1403:16:62","nodeType":"YulBlock","src":"1403:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1412:1:62","nodeType":"YulLiteral","src":"1412:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1415:1:62","nodeType":"YulLiteral","src":"1415:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1405:6:62","nodeType":"YulIdentifier","src":"1405:6:62"},"nativeSrc":"1405:12:62","nodeType":"YulFunctionCall","src":"1405:12:62"},"nativeSrc":"1405:12:62","nodeType":"YulExpressionStatement","src":"1405:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1372:5:62","nodeType":"YulIdentifier","src":"1372:5:62"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1393:5:62","nodeType":"YulIdentifier","src":"1393:5:62"}],"functionName":{"name":"iszero","nativeSrc":"1386:6:62","nodeType":"YulIdentifier","src":"1386:6:62"},"nativeSrc":"1386:13:62","nodeType":"YulFunctionCall","src":"1386:13:62"}],"functionName":{"name":"iszero","nativeSrc":"1379:6:62","nodeType":"YulIdentifier","src":"1379:6:62"},"nativeSrc":"1379:21:62","nodeType":"YulFunctionCall","src":"1379:21:62"}],"functionName":{"name":"eq","nativeSrc":"1369:2:62","nodeType":"YulIdentifier","src":"1369:2:62"},"nativeSrc":"1369:32:62","nodeType":"YulFunctionCall","src":"1369:32:62"}],"functionName":{"name":"iszero","nativeSrc":"1362:6:62","nodeType":"YulIdentifier","src":"1362:6:62"},"nativeSrc":"1362:40:62","nodeType":"YulFunctionCall","src":"1362:40:62"},"nativeSrc":"1359:60:62","nodeType":"YulIf","src":"1359:60:62"},{"nativeSrc":"1428:15:62","nodeType":"YulAssignment","src":"1428:15:62","value":{"name":"value","nativeSrc":"1438:5:62","nodeType":"YulIdentifier","src":"1438:5:62"},"variableNames":[{"name":"value0","nativeSrc":"1428:6:62","nodeType":"YulIdentifier","src":"1428:6:62"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"1172:277:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1216:9:62","nodeType":"YulTypedName","src":"1216:9:62","type":""},{"name":"dataEnd","nativeSrc":"1227:7:62","nodeType":"YulTypedName","src":"1227:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1239:6:62","nodeType":"YulTypedName","src":"1239:6:62","type":""}],"src":"1172:277:62"},{"body":{"nativeSrc":"1555:102:62","nodeType":"YulBlock","src":"1555:102:62","statements":[{"nativeSrc":"1565:26:62","nodeType":"YulAssignment","src":"1565:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1577:9:62","nodeType":"YulIdentifier","src":"1577:9:62"},{"kind":"number","nativeSrc":"1588:2:62","nodeType":"YulLiteral","src":"1588:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1573:3:62","nodeType":"YulIdentifier","src":"1573:3:62"},"nativeSrc":"1573:18:62","nodeType":"YulFunctionCall","src":"1573:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1565:4:62","nodeType":"YulIdentifier","src":"1565:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1607:9:62","nodeType":"YulIdentifier","src":"1607:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1622:6:62","nodeType":"YulIdentifier","src":"1622:6:62"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1638:3:62","nodeType":"YulLiteral","src":"1638:3:62","type":"","value":"160"},{"kind":"number","nativeSrc":"1643:1:62","nodeType":"YulLiteral","src":"1643:1:62","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1634:3:62","nodeType":"YulIdentifier","src":"1634:3:62"},"nativeSrc":"1634:11:62","nodeType":"YulFunctionCall","src":"1634:11:62"},{"kind":"number","nativeSrc":"1647:1:62","nodeType":"YulLiteral","src":"1647:1:62","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1630:3:62","nodeType":"YulIdentifier","src":"1630:3:62"},"nativeSrc":"1630:19:62","nodeType":"YulFunctionCall","src":"1630:19:62"}],"functionName":{"name":"and","nativeSrc":"1618:3:62","nodeType":"YulIdentifier","src":"1618:3:62"},"nativeSrc":"1618:32:62","nodeType":"YulFunctionCall","src":"1618:32:62"}],"functionName":{"name":"mstore","nativeSrc":"1600:6:62","nodeType":"YulIdentifier","src":"1600:6:62"},"nativeSrc":"1600:51:62","nodeType":"YulFunctionCall","src":"1600:51:62"},"nativeSrc":"1600:51:62","nodeType":"YulExpressionStatement","src":"1600:51:62"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1454:203:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1524:9:62","nodeType":"YulTypedName","src":"1524:9:62","type":""},{"name":"value0","nativeSrc":"1535:6:62","nodeType":"YulTypedName","src":"1535:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1546:4:62","nodeType":"YulTypedName","src":"1546:4:62","type":""}],"src":"1454:203:62"},{"body":{"nativeSrc":"1711:176:62","nodeType":"YulBlock","src":"1711:176:62","statements":[{"nativeSrc":"1721:17:62","nodeType":"YulAssignment","src":"1721:17:62","value":{"arguments":[{"name":"x","nativeSrc":"1733:1:62","nodeType":"YulIdentifier","src":"1733:1:62"},{"name":"y","nativeSrc":"1736:1:62","nodeType":"YulIdentifier","src":"1736:1:62"}],"functionName":{"name":"sub","nativeSrc":"1729:3:62","nodeType":"YulIdentifier","src":"1729:3:62"},"nativeSrc":"1729:9:62","nodeType":"YulFunctionCall","src":"1729:9:62"},"variableNames":[{"name":"diff","nativeSrc":"1721:4:62","nodeType":"YulIdentifier","src":"1721:4:62"}]},{"body":{"nativeSrc":"1770:111:62","nodeType":"YulBlock","src":"1770:111:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1791:1:62","nodeType":"YulLiteral","src":"1791:1:62","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1798:3:62","nodeType":"YulLiteral","src":"1798:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"1803:10:62","nodeType":"YulLiteral","src":"1803:10:62","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1794:3:62","nodeType":"YulIdentifier","src":"1794:3:62"},"nativeSrc":"1794:20:62","nodeType":"YulFunctionCall","src":"1794:20:62"}],"functionName":{"name":"mstore","nativeSrc":"1784:6:62","nodeType":"YulIdentifier","src":"1784:6:62"},"nativeSrc":"1784:31:62","nodeType":"YulFunctionCall","src":"1784:31:62"},"nativeSrc":"1784:31:62","nodeType":"YulExpressionStatement","src":"1784:31:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1835:1:62","nodeType":"YulLiteral","src":"1835:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"1838:4:62","nodeType":"YulLiteral","src":"1838:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1828:6:62","nodeType":"YulIdentifier","src":"1828:6:62"},"nativeSrc":"1828:15:62","nodeType":"YulFunctionCall","src":"1828:15:62"},"nativeSrc":"1828:15:62","nodeType":"YulExpressionStatement","src":"1828:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1863:1:62","nodeType":"YulLiteral","src":"1863:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1866:4:62","nodeType":"YulLiteral","src":"1866:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1856:6:62","nodeType":"YulIdentifier","src":"1856:6:62"},"nativeSrc":"1856:15:62","nodeType":"YulFunctionCall","src":"1856:15:62"},"nativeSrc":"1856:15:62","nodeType":"YulExpressionStatement","src":"1856:15:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1753:4:62","nodeType":"YulIdentifier","src":"1753:4:62"},{"name":"x","nativeSrc":"1759:1:62","nodeType":"YulIdentifier","src":"1759:1:62"}],"functionName":{"name":"gt","nativeSrc":"1750:2:62","nodeType":"YulIdentifier","src":"1750:2:62"},"nativeSrc":"1750:11:62","nodeType":"YulFunctionCall","src":"1750:11:62"},"nativeSrc":"1747:134:62","nodeType":"YulIf","src":"1747:134:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"1662:225:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1693:1:62","nodeType":"YulTypedName","src":"1693:1:62","type":""},{"name":"y","nativeSrc":"1696:1:62","nodeType":"YulTypedName","src":"1696:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1702:4:62","nodeType":"YulTypedName","src":"1702:4:62","type":""}],"src":"1662:225:62"}]},"contents":"{\n    { }\n    function validator_revert_contract_ICurve(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_ICurve_$5316t_contract$_IERC20_$3965t_addresst_uint256t_contract$_IERC721Mintable_$1861_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_ICurve(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_ICurve(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_ICurve(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_contract_ICurve(value_3)\n        value4 := value_3\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000e9238038062000e92833981016040819052620000349162000375565b81816200004e82826200004662000169565b91906200019f565b50506040516301ffc9a760e01b815263a6413a2760e01b60048201526001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c29190620003e9565b620000f05760405163b4b6025160e01b81526001600160a01b03861660048201526024015b60405180910390fd5b600080546001600160a01b038088166001600160a01b03199283161790925560018054878416921691909117905583166200013e5760405163d92e233d60e01b815260040160405180910390fd5b5050600280546001600160a01b0319166001600160a01b039290921691909117905550620004369050565b6000806200019960017f693bcdae20ebbf8c20ad73778252483eb64f50287e6e826c8678109643b4917662000414565b92915050565b81600003620001c15760405163c14cb6f560e01b815260040160405180910390fd5b6001600160a01b038116620001e9576040516313cfdee160e31b815260040160405180910390fd5b6040516301ffc9a760e01b8152638e773e1360e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801562000235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025b9190620003e9565b6200028557604051631b794b6760e31b81526001600160a01b0382166004820152602401620000e7565b60018381018390556002840180546001600160a01b0319166001600160a01b038416179055620002ca9063fb42d24360e01b90620002c2620002cf565b9190620002ff565b505050565b6000806200019960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000414565b600160e01b6001600160e01b03198316016200032e576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146200037257600080fd5b50565b600080600080600060a086880312156200038e57600080fd5b85516200039b816200035c565b6020870151909550620003ae816200035c565b6040870151909450620003c1816200035c565b606087015160808801519194509250620003db816200035c565b809150509295509295909350565b600060208284031215620003fc57600080fd5b815180151581146200040d57600080fd5b9392505050565b818103818111156200019957634e487b7160e01b600052601160045260246000fd5b610a4c80620004466000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80636a6278421161005b5780636a627842146101045780637165485d1461011957806391ba317a14610139578063b3f006741461014157600080fd5b80629a9b7b1461008157806301ffc9a71461009c578063647846a5146100bf575b600080fd5b610089610161565b6040519081526020015b60405180910390f35b6100af6100aa366004610876565b610177565b6040519015158152602001610093565b6001546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610093565b6101176101123660046108bf565b610191565b005b6000546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b610089610271565b6002546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b600061017261016e610285565b5490565b905090565b600061018b826101856102b3565b906102e1565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff1663a6413a276101b8610161565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260016024820152604401602060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906108f5565b90506102643360025460015473ffffffffffffffffffffffffffffffffffffffff908116929116846103bb565b61026d82610456565b5050565b600061017261027e610285565b6001015490565b60008061018b60017f693bcdae20ebbf8c20ad73778252483eb64f50287e6e826c8678109643b4917661093d565b60008061018b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61093d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016103315750600061018b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016103825750600161018b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261045090859061046b565b50505050565b61046881610462610285565b90610584565b50565b60006104cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106679092919063ffffffff16565b90508051600014806104ee5750808060200190518101906104ee9190610950565b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b505050565b8154600090610594906001610972565b905082600101548111156105d4576040517f4594a70000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028301546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561064a57600080fd5b505af115801561065e573d6000803e3d6000fd5b50505092555050565b6060610676848460008561067e565b949350505050565b606082471015610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610576565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161073991906109a9565b60006040518083038185875af1925050503d8060008114610776576040519150601f19603f3d011682016040523d82523d6000602084013e61077b565b606091505b509150915061078c87838387610797565b979650505050505050565b6060831561082d5782516000036108265773ffffffffffffffffffffffffffffffffffffffff85163b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b5081610676565b61067683838151156108425781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057691906109c5565b60006020828403121561088857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108b857600080fd5b9392505050565b6000602082840312156108d157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108b857600080fd5b60006020828403121561090757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561018b5761018b61090e565b60006020828403121561096257600080fd5b815180151581146108b857600080fd5b8082018082111561018b5761018b61090e565b60005b838110156109a0578181015183820152602001610988565b50506000910152565b600082516109bb818460208701610985565b9190910192915050565b60208152600082518060208401526109e4816040850160208701610985565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122083c8140fa034202e08a0b37ad4bb713be5fc4d1ff433cfee0d47b6dd9495ff7964736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xE92 CODESIZE SUB DUP1 PUSH3 0xE92 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x375 JUMP JUMPDEST DUP2 DUP2 PUSH3 0x4E DUP3 DUP3 PUSH3 0x46 PUSH3 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x19F JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0xA6413A27 PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x9C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xC2 SWAP2 SWAP1 PUSH3 0x3E9 JUMP JUMPDEST PUSH3 0xF0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB4B60251 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP1 SLOAD DUP8 DUP5 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 AND PUSH3 0x13E JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x436 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x199 PUSH1 0x1 PUSH32 0x693BCDAE20EBBF8C20AD73778252483EB64F50287E6E826C8678109643B49176 PUSH3 0x414 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC14CB6F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x1E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x13CFDEE1 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x8E773E13 PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x235 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x25B SWAP2 SWAP1 PUSH3 0x3E9 JUMP JUMPDEST PUSH3 0x285 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1B794B67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0xE7 JUMP JUMPDEST PUSH1 0x1 DUP4 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH3 0x2CA SWAP1 PUSH4 0xFB42D243 PUSH1 0xE0 SHL SWAP1 PUSH3 0x2C2 PUSH3 0x2CF JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x2FF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x199 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x32E JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x39B DUP2 PUSH3 0x35C JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x3AE DUP2 PUSH3 0x35C JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x3C1 DUP2 PUSH3 0x35C JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH3 0x3DB DUP2 PUSH3 0x35C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x199 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xA4C DUP1 PUSH3 0x446 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6A627842 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6A627842 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x7165485D EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x91BA317A EQ PUSH2 0x139 JUMPI DUP1 PUSH4 0xB3F00674 EQ PUSH2 0x141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x647846A5 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x89 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x876 JUMP JUMPDEST PUSH2 0x177 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BF JUMP JUMPDEST PUSH2 0x191 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x89 PUSH2 0x271 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x172 PUSH2 0x16E PUSH2 0x285 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B DUP3 PUSH2 0x185 PUSH2 0x2B3 JUMP JUMPDEST SWAP1 PUSH2 0x2E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA6413A27 PUSH2 0x1B8 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x264 CALLER PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP3 SWAP2 AND DUP5 PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x26D DUP3 PUSH2 0x456 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x172 PUSH2 0x27E PUSH2 0x285 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18B PUSH1 0x1 PUSH32 0x693BCDAE20EBBF8C20AD73778252483EB64F50287E6E826C8678109643B49176 PUSH2 0x93D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x93D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x331 JUMPI POP PUSH1 0x0 PUSH2 0x18B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x382 JUMPI POP PUSH1 0x1 PUSH2 0x18B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x450 SWAP1 DUP6 SWAP1 PUSH2 0x46B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x468 DUP2 PUSH2 0x462 PUSH2 0x285 JUMP JUMPDEST SWAP1 PUSH2 0x584 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CD DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x667 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x4EE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x950 JUMP JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x594 SWAP1 PUSH1 0x1 PUSH2 0x972 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x1 ADD SLOAD DUP2 GT ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4594A70000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x676 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x67E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x739 SWAP2 SWAP1 PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x776 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x77B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x78C DUP8 DUP4 DUP4 DUP8 PUSH2 0x797 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x82D JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST POP DUP2 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x676 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x842 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x888 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x907 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x18B JUMPI PUSH2 0x18B PUSH2 0x90E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x18B JUMPI PUSH2 0x18B PUSH2 0x90E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x988 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9BB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x985 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9E4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x985 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xC8 EQ 0xF LOG0 CALLVALUE KECCAK256 0x2E ADDMOD LOG0 0xB3 PUSH27 0xD4BB713BE5FC4D1FF433CFEE0D47B6DD9495FF7964736F6C634300 ADDMOD XOR STOP CALLER ","sourceMap":"620:956:48:-:0;;;877:482;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1000:10;1012:5;1196:63:57;1000:10:48;1012:5;1196:28:57;:26;:28::i;:::-;:44;:63;:44;:63::i;:::-;-1:-1:-1;;1034:68:48::1;::::0;-1:-1:-1;;;1034:68:48;;-1:-1:-1;;;1034:68:48::1;::::0;::::1;1109:52:62::0;-1:-1:-1;;;;;1034:42:48;::::1;::::0;::::1;::::0;1082:18:62;;1034:68:48::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1029:148;;1125:41;::::0;-1:-1:-1;;;1125:41:48;;-1:-1:-1;;;;;1618:32:62;;1125:41:48::1;::::0;::::1;1600:51:62::0;1573:18;;1125:41:48::1;;;;;;;;1029:148;1186:5;:14:::0;;-1:-1:-1;;;;;1186:14:48;;::::1;-1:-1:-1::0;;;;;;1186:14:48;;::::1;;::::0;;;;1210:20;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;1244:26;::::1;1240:77;;1293:13;;-1:-1:-1::0;;;1293:13:48::1;;;;;;;;;;;1240:77;-1:-1:-1::0;;1326:11:48::1;:26:::0;;-1:-1:-1;;;;;;1326:26:48::1;-1:-1:-1::0;;;;;1326:26:48;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;620:956:48;;-1:-1:-1;620:956:48;4439:174:61;4480:16;;1153:68;1220:1;1161:55;1153:68;:::i;:::-;1145:77;4439:174;-1:-1:-1;;4439:174:61:o;2072:638::-;2181:10;2195:1;2181:15;2177:81;;2219:28;;-1:-1:-1;;;2219:28:61;;;;;;;;;;;2177:81;-1:-1:-1;;;;;2271:28:61;;2267:96;;2322:30;;-1:-1:-1;;;2322:30:61;;;;;;;;;;;2267:96;2378:76;;-1:-1:-1;;;2378:76:61;;-1:-1:-1;;;2378:76:61;;;1109:52:62;-1:-1:-1;;;;;2378:41:61;;;;;1082:18:62;;2378:76:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2373:166;;2477:51;;-1:-1:-1;;;2477:51:61;;-1:-1:-1;;;;;1618:32:62;;2477:51:61;;;1600::62;1573:18;;2477:51:61;1454:203:62;2373:166:61;2548:12;;;;:25;;;2583:7;;;:15;;-1:-1:-1;;;;;;2583:15:61;-1:-1:-1;;;;;2583:15:61;;;;;2608:95;;-1:-1:-1;;;2665:31:61;2608:34;:32;:34::i;:::-;:56;:95;:56;:95::i;:::-;2072:638;;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:139:62:-;-1:-1:-1;;;;;97:31:62;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:802::-;318:6;326;334;342;350;403:3;391:9;382:7;378:23;374:33;371:53;;;420:1;417;410:12;371:53;452:9;446:16;471:39;504:5;471:39;:::i;:::-;579:2;564:18;;558:25;529:5;;-1:-1:-1;592:41:62;558:25;592:41;:::i;:::-;704:2;689:18;;683:25;652:7;;-1:-1:-1;717:41:62;683:25;717:41;:::i;:::-;824:2;809:18;;803:25;873:3;858:19;;852:26;777:7;;-1:-1:-1;803:25:62;-1:-1:-1;887:41:62;852:26;887:41;:::i;:::-;947:7;937:17;;;158:802;;;;;;;;:::o;1172:277::-;1239:6;1292:2;1280:9;1271:7;1267:23;1263:32;1260:52;;;1308:1;1305;1298:12;1260:52;1340:9;1334:16;1393:5;1386:13;1379:21;1372:5;1369:32;1359:60;;1415:1;1412;1405:12;1359:60;1438:5;1172:277;-1:-1:-1;;;1172:277:62:o;1662:225::-;1729:9;;;1750:11;;;1747:134;;;1803:10;1798:3;1794:20;1791:1;1784:31;1838:4;1835:1;1828:15;1866:4;1863:1;1856:15;1662:225;620:956:48;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_4328":{"entryPoint":1131,"id":4328,"parameterSlots":2,"returnSlots":0},"@_msgSender_4719":{"entryPoint":null,"id":4719,"parameterSlots":0,"returnSlots":1},"@_revert_4706":{"entryPoint":null,"id":4706,"parameterSlots":2,"returnSlots":0},"@currentId_6031":{"entryPoint":null,"id":6031,"parameterSlots":1,"returnSlots":1},"@currentTokenId_5758":{"entryPoint":353,"id":5758,"parameterSlots":0,"returnSlots":1},"@curve_4915":{"entryPoint":null,"id":4915,"parameterSlots":0,"returnSlots":0},"@feeReceiver_4920":{"entryPoint":null,"id":4920,"parameterSlots":0,"returnSlots":0},"@feeToken_4918":{"entryPoint":null,"id":4918,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_4531":{"entryPoint":1662,"id":4531,"parameterSlots":4,"returnSlots":1},"@functionCall_4467":{"entryPoint":1639,"id":4467,"parameterSlots":3,"returnSlots":1},"@isContract_4395":{"entryPoint":null,"id":4395,"parameterSlots":1,"returnSlots":1},"@layout_1009":{"entryPoint":691,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_6056":{"entryPoint":645,"id":6056,"parameterSlots":0,"returnSlots":1},"@maxId_6044":{"entryPoint":null,"id":6044,"parameterSlots":1,"returnSlots":1},"@maxTokenId_5771":{"entryPoint":625,"id":5771,"parameterSlots":0,"returnSlots":1},"@mint_5023":{"entryPoint":401,"id":5023,"parameterSlots":1,"returnSlots":0},"@mint_5745":{"entryPoint":1110,"id":5745,"parameterSlots":1,"returnSlots":0},"@mint_6018":{"entryPoint":1412,"id":6018,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_4061":{"entryPoint":955,"id":4061,"parameterSlots":4,"returnSlots":0},"@supportsInterface_891":{"entryPoint":375,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":737,"id":997,"parameterSlots":2,"returnSlots":1},"@verifyCallResultFromTarget_4662":{"entryPoint":1943,"id":4662,"parameterSlots":4,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2239,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2384,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":2166,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2293,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ICurve_$5316__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3965__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2501,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2418,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2365,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2437,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x11":{"entryPoint":2318,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:5831:62","nodeType":"YulBlock","src":"0:5831:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"115:76:62","nodeType":"YulBlock","src":"115:76:62","statements":[{"nativeSrc":"125:26:62","nodeType":"YulAssignment","src":"125:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:62","nodeType":"YulIdentifier","src":"137:9:62"},{"kind":"number","nativeSrc":"148:2:62","nodeType":"YulLiteral","src":"148:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:62","nodeType":"YulIdentifier","src":"133:3:62"},"nativeSrc":"133:18:62","nodeType":"YulFunctionCall","src":"133:18:62"},"variableNames":[{"name":"tail","nativeSrc":"125:4:62","nodeType":"YulIdentifier","src":"125:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:62","nodeType":"YulIdentifier","src":"167:9:62"},{"name":"value0","nativeSrc":"178:6:62","nodeType":"YulIdentifier","src":"178:6:62"}],"functionName":{"name":"mstore","nativeSrc":"160:6:62","nodeType":"YulIdentifier","src":"160:6:62"},"nativeSrc":"160:25:62","nodeType":"YulFunctionCall","src":"160:25:62"},"nativeSrc":"160:25:62","nodeType":"YulExpressionStatement","src":"160:25:62"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"14:177:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:62","nodeType":"YulTypedName","src":"84:9:62","type":""},{"name":"value0","nativeSrc":"95:6:62","nodeType":"YulTypedName","src":"95:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:62","nodeType":"YulTypedName","src":"106:4:62","type":""}],"src":"14:177:62"},{"body":{"nativeSrc":"265:263:62","nodeType":"YulBlock","src":"265:263:62","statements":[{"body":{"nativeSrc":"311:16:62","nodeType":"YulBlock","src":"311:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:62","nodeType":"YulLiteral","src":"320:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:62","nodeType":"YulLiteral","src":"323:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:62","nodeType":"YulIdentifier","src":"313:6:62"},"nativeSrc":"313:12:62","nodeType":"YulFunctionCall","src":"313:12:62"},"nativeSrc":"313:12:62","nodeType":"YulExpressionStatement","src":"313:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"286:7:62","nodeType":"YulIdentifier","src":"286:7:62"},{"name":"headStart","nativeSrc":"295:9:62","nodeType":"YulIdentifier","src":"295:9:62"}],"functionName":{"name":"sub","nativeSrc":"282:3:62","nodeType":"YulIdentifier","src":"282:3:62"},"nativeSrc":"282:23:62","nodeType":"YulFunctionCall","src":"282:23:62"},{"kind":"number","nativeSrc":"307:2:62","nodeType":"YulLiteral","src":"307:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"278:3:62","nodeType":"YulIdentifier","src":"278:3:62"},"nativeSrc":"278:32:62","nodeType":"YulFunctionCall","src":"278:32:62"},"nativeSrc":"275:52:62","nodeType":"YulIf","src":"275:52:62"},{"nativeSrc":"336:36:62","nodeType":"YulVariableDeclaration","src":"336:36:62","value":{"arguments":[{"name":"headStart","nativeSrc":"362:9:62","nodeType":"YulIdentifier","src":"362:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"349:12:62","nodeType":"YulIdentifier","src":"349:12:62"},"nativeSrc":"349:23:62","nodeType":"YulFunctionCall","src":"349:23:62"},"variables":[{"name":"value","nativeSrc":"340:5:62","nodeType":"YulTypedName","src":"340:5:62","type":""}]},{"body":{"nativeSrc":"482:16:62","nodeType":"YulBlock","src":"482:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"491:1:62","nodeType":"YulLiteral","src":"491:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"494:1:62","nodeType":"YulLiteral","src":"494:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"484:6:62","nodeType":"YulIdentifier","src":"484:6:62"},"nativeSrc":"484:12:62","nodeType":"YulFunctionCall","src":"484:12:62"},"nativeSrc":"484:12:62","nodeType":"YulExpressionStatement","src":"484:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"394:5:62","nodeType":"YulIdentifier","src":"394:5:62"},{"arguments":[{"name":"value","nativeSrc":"405:5:62","nodeType":"YulIdentifier","src":"405:5:62"},{"kind":"number","nativeSrc":"412:66:62","nodeType":"YulLiteral","src":"412:66:62","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"401:3:62","nodeType":"YulIdentifier","src":"401:3:62"},"nativeSrc":"401:78:62","nodeType":"YulFunctionCall","src":"401:78:62"}],"functionName":{"name":"eq","nativeSrc":"391:2:62","nodeType":"YulIdentifier","src":"391:2:62"},"nativeSrc":"391:89:62","nodeType":"YulFunctionCall","src":"391:89:62"}],"functionName":{"name":"iszero","nativeSrc":"384:6:62","nodeType":"YulIdentifier","src":"384:6:62"},"nativeSrc":"384:97:62","nodeType":"YulFunctionCall","src":"384:97:62"},"nativeSrc":"381:117:62","nodeType":"YulIf","src":"381:117:62"},{"nativeSrc":"507:15:62","nodeType":"YulAssignment","src":"507:15:62","value":{"name":"value","nativeSrc":"517:5:62","nodeType":"YulIdentifier","src":"517:5:62"},"variableNames":[{"name":"value0","nativeSrc":"507:6:62","nodeType":"YulIdentifier","src":"507:6:62"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"196:332:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"231:9:62","nodeType":"YulTypedName","src":"231:9:62","type":""},{"name":"dataEnd","nativeSrc":"242:7:62","nodeType":"YulTypedName","src":"242:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"254:6:62","nodeType":"YulTypedName","src":"254:6:62","type":""}],"src":"196:332:62"},{"body":{"nativeSrc":"628:92:62","nodeType":"YulBlock","src":"628:92:62","statements":[{"nativeSrc":"638:26:62","nodeType":"YulAssignment","src":"638:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"650:9:62","nodeType":"YulIdentifier","src":"650:9:62"},{"kind":"number","nativeSrc":"661:2:62","nodeType":"YulLiteral","src":"661:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"646:3:62","nodeType":"YulIdentifier","src":"646:3:62"},"nativeSrc":"646:18:62","nodeType":"YulFunctionCall","src":"646:18:62"},"variableNames":[{"name":"tail","nativeSrc":"638:4:62","nodeType":"YulIdentifier","src":"638:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"680:9:62","nodeType":"YulIdentifier","src":"680:9:62"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"705:6:62","nodeType":"YulIdentifier","src":"705:6:62"}],"functionName":{"name":"iszero","nativeSrc":"698:6:62","nodeType":"YulIdentifier","src":"698:6:62"},"nativeSrc":"698:14:62","nodeType":"YulFunctionCall","src":"698:14:62"}],"functionName":{"name":"iszero","nativeSrc":"691:6:62","nodeType":"YulIdentifier","src":"691:6:62"},"nativeSrc":"691:22:62","nodeType":"YulFunctionCall","src":"691:22:62"}],"functionName":{"name":"mstore","nativeSrc":"673:6:62","nodeType":"YulIdentifier","src":"673:6:62"},"nativeSrc":"673:41:62","nodeType":"YulFunctionCall","src":"673:41:62"},"nativeSrc":"673:41:62","nodeType":"YulExpressionStatement","src":"673:41:62"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"533:187:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"597:9:62","nodeType":"YulTypedName","src":"597:9:62","type":""},{"name":"value0","nativeSrc":"608:6:62","nodeType":"YulTypedName","src":"608:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"619:4:62","nodeType":"YulTypedName","src":"619:4:62","type":""}],"src":"533:187:62"},{"body":{"nativeSrc":"841:125:62","nodeType":"YulBlock","src":"841:125:62","statements":[{"nativeSrc":"851:26:62","nodeType":"YulAssignment","src":"851:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"863:9:62","nodeType":"YulIdentifier","src":"863:9:62"},{"kind":"number","nativeSrc":"874:2:62","nodeType":"YulLiteral","src":"874:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"859:3:62","nodeType":"YulIdentifier","src":"859:3:62"},"nativeSrc":"859:18:62","nodeType":"YulFunctionCall","src":"859:18:62"},"variableNames":[{"name":"tail","nativeSrc":"851:4:62","nodeType":"YulIdentifier","src":"851:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"893:9:62","nodeType":"YulIdentifier","src":"893:9:62"},{"arguments":[{"name":"value0","nativeSrc":"908:6:62","nodeType":"YulIdentifier","src":"908:6:62"},{"kind":"number","nativeSrc":"916:42:62","nodeType":"YulLiteral","src":"916:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"904:3:62","nodeType":"YulIdentifier","src":"904:3:62"},"nativeSrc":"904:55:62","nodeType":"YulFunctionCall","src":"904:55:62"}],"functionName":{"name":"mstore","nativeSrc":"886:6:62","nodeType":"YulIdentifier","src":"886:6:62"},"nativeSrc":"886:74:62","nodeType":"YulFunctionCall","src":"886:74:62"},"nativeSrc":"886:74:62","nodeType":"YulExpressionStatement","src":"886:74:62"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3965__to_t_address__fromStack_reversed","nativeSrc":"725:241:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"810:9:62","nodeType":"YulTypedName","src":"810:9:62","type":""},{"name":"value0","nativeSrc":"821:6:62","nodeType":"YulTypedName","src":"821:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"832:4:62","nodeType":"YulTypedName","src":"832:4:62","type":""}],"src":"725:241:62"},{"body":{"nativeSrc":"1041:239:62","nodeType":"YulBlock","src":"1041:239:62","statements":[{"body":{"nativeSrc":"1087:16:62","nodeType":"YulBlock","src":"1087:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1096:1:62","nodeType":"YulLiteral","src":"1096:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1099:1:62","nodeType":"YulLiteral","src":"1099:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1089:6:62","nodeType":"YulIdentifier","src":"1089:6:62"},"nativeSrc":"1089:12:62","nodeType":"YulFunctionCall","src":"1089:12:62"},"nativeSrc":"1089:12:62","nodeType":"YulExpressionStatement","src":"1089:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1062:7:62","nodeType":"YulIdentifier","src":"1062:7:62"},{"name":"headStart","nativeSrc":"1071:9:62","nodeType":"YulIdentifier","src":"1071:9:62"}],"functionName":{"name":"sub","nativeSrc":"1058:3:62","nodeType":"YulIdentifier","src":"1058:3:62"},"nativeSrc":"1058:23:62","nodeType":"YulFunctionCall","src":"1058:23:62"},{"kind":"number","nativeSrc":"1083:2:62","nodeType":"YulLiteral","src":"1083:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1054:3:62","nodeType":"YulIdentifier","src":"1054:3:62"},"nativeSrc":"1054:32:62","nodeType":"YulFunctionCall","src":"1054:32:62"},"nativeSrc":"1051:52:62","nodeType":"YulIf","src":"1051:52:62"},{"nativeSrc":"1112:36:62","nodeType":"YulVariableDeclaration","src":"1112:36:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1138:9:62","nodeType":"YulIdentifier","src":"1138:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"1125:12:62","nodeType":"YulIdentifier","src":"1125:12:62"},"nativeSrc":"1125:23:62","nodeType":"YulFunctionCall","src":"1125:23:62"},"variables":[{"name":"value","nativeSrc":"1116:5:62","nodeType":"YulTypedName","src":"1116:5:62","type":""}]},{"body":{"nativeSrc":"1234:16:62","nodeType":"YulBlock","src":"1234:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1243:1:62","nodeType":"YulLiteral","src":"1243:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1246:1:62","nodeType":"YulLiteral","src":"1246:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1236:6:62","nodeType":"YulIdentifier","src":"1236:6:62"},"nativeSrc":"1236:12:62","nodeType":"YulFunctionCall","src":"1236:12:62"},"nativeSrc":"1236:12:62","nodeType":"YulExpressionStatement","src":"1236:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1170:5:62","nodeType":"YulIdentifier","src":"1170:5:62"},{"arguments":[{"name":"value","nativeSrc":"1181:5:62","nodeType":"YulIdentifier","src":"1181:5:62"},{"kind":"number","nativeSrc":"1188:42:62","nodeType":"YulLiteral","src":"1188:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1177:3:62","nodeType":"YulIdentifier","src":"1177:3:62"},"nativeSrc":"1177:54:62","nodeType":"YulFunctionCall","src":"1177:54:62"}],"functionName":{"name":"eq","nativeSrc":"1167:2:62","nodeType":"YulIdentifier","src":"1167:2:62"},"nativeSrc":"1167:65:62","nodeType":"YulFunctionCall","src":"1167:65:62"}],"functionName":{"name":"iszero","nativeSrc":"1160:6:62","nodeType":"YulIdentifier","src":"1160:6:62"},"nativeSrc":"1160:73:62","nodeType":"YulFunctionCall","src":"1160:73:62"},"nativeSrc":"1157:93:62","nodeType":"YulIf","src":"1157:93:62"},{"nativeSrc":"1259:15:62","nodeType":"YulAssignment","src":"1259:15:62","value":{"name":"value","nativeSrc":"1269:5:62","nodeType":"YulIdentifier","src":"1269:5:62"},"variableNames":[{"name":"value0","nativeSrc":"1259:6:62","nodeType":"YulIdentifier","src":"1259:6:62"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"971:309:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1007:9:62","nodeType":"YulTypedName","src":"1007:9:62","type":""},{"name":"dataEnd","nativeSrc":"1018:7:62","nodeType":"YulTypedName","src":"1018:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1030:6:62","nodeType":"YulTypedName","src":"1030:6:62","type":""}],"src":"971:309:62"},{"body":{"nativeSrc":"1401:125:62","nodeType":"YulBlock","src":"1401:125:62","statements":[{"nativeSrc":"1411:26:62","nodeType":"YulAssignment","src":"1411:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1423:9:62","nodeType":"YulIdentifier","src":"1423:9:62"},{"kind":"number","nativeSrc":"1434:2:62","nodeType":"YulLiteral","src":"1434:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1419:3:62","nodeType":"YulIdentifier","src":"1419:3:62"},"nativeSrc":"1419:18:62","nodeType":"YulFunctionCall","src":"1419:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1411:4:62","nodeType":"YulIdentifier","src":"1411:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1453:9:62","nodeType":"YulIdentifier","src":"1453:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1468:6:62","nodeType":"YulIdentifier","src":"1468:6:62"},{"kind":"number","nativeSrc":"1476:42:62","nodeType":"YulLiteral","src":"1476:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1464:3:62","nodeType":"YulIdentifier","src":"1464:3:62"},"nativeSrc":"1464:55:62","nodeType":"YulFunctionCall","src":"1464:55:62"}],"functionName":{"name":"mstore","nativeSrc":"1446:6:62","nodeType":"YulIdentifier","src":"1446:6:62"},"nativeSrc":"1446:74:62","nodeType":"YulFunctionCall","src":"1446:74:62"},"nativeSrc":"1446:74:62","nodeType":"YulExpressionStatement","src":"1446:74:62"}]},"name":"abi_encode_tuple_t_contract$_ICurve_$5316__to_t_address__fromStack_reversed","nativeSrc":"1285:241:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1370:9:62","nodeType":"YulTypedName","src":"1370:9:62","type":""},{"name":"value0","nativeSrc":"1381:6:62","nodeType":"YulTypedName","src":"1381:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1392:4:62","nodeType":"YulTypedName","src":"1392:4:62","type":""}],"src":"1285:241:62"},{"body":{"nativeSrc":"1632:125:62","nodeType":"YulBlock","src":"1632:125:62","statements":[{"nativeSrc":"1642:26:62","nodeType":"YulAssignment","src":"1642:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1654:9:62","nodeType":"YulIdentifier","src":"1654:9:62"},{"kind":"number","nativeSrc":"1665:2:62","nodeType":"YulLiteral","src":"1665:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1650:3:62","nodeType":"YulIdentifier","src":"1650:3:62"},"nativeSrc":"1650:18:62","nodeType":"YulFunctionCall","src":"1650:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1642:4:62","nodeType":"YulIdentifier","src":"1642:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1684:9:62","nodeType":"YulIdentifier","src":"1684:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1699:6:62","nodeType":"YulIdentifier","src":"1699:6:62"},{"kind":"number","nativeSrc":"1707:42:62","nodeType":"YulLiteral","src":"1707:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1695:3:62","nodeType":"YulIdentifier","src":"1695:3:62"},"nativeSrc":"1695:55:62","nodeType":"YulFunctionCall","src":"1695:55:62"}],"functionName":{"name":"mstore","nativeSrc":"1677:6:62","nodeType":"YulIdentifier","src":"1677:6:62"},"nativeSrc":"1677:74:62","nodeType":"YulFunctionCall","src":"1677:74:62"},"nativeSrc":"1677:74:62","nodeType":"YulExpressionStatement","src":"1677:74:62"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1531:226:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1601:9:62","nodeType":"YulTypedName","src":"1601:9:62","type":""},{"name":"value0","nativeSrc":"1612:6:62","nodeType":"YulTypedName","src":"1612:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1623:4:62","nodeType":"YulTypedName","src":"1623:4:62","type":""}],"src":"1531:226:62"},{"body":{"nativeSrc":"1899:119:62","nodeType":"YulBlock","src":"1899:119:62","statements":[{"nativeSrc":"1909:26:62","nodeType":"YulAssignment","src":"1909:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1921:9:62","nodeType":"YulIdentifier","src":"1921:9:62"},{"kind":"number","nativeSrc":"1932:2:62","nodeType":"YulLiteral","src":"1932:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1917:3:62","nodeType":"YulIdentifier","src":"1917:3:62"},"nativeSrc":"1917:18:62","nodeType":"YulFunctionCall","src":"1917:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1909:4:62","nodeType":"YulIdentifier","src":"1909:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1951:9:62","nodeType":"YulIdentifier","src":"1951:9:62"},{"name":"value0","nativeSrc":"1962:6:62","nodeType":"YulIdentifier","src":"1962:6:62"}],"functionName":{"name":"mstore","nativeSrc":"1944:6:62","nodeType":"YulIdentifier","src":"1944:6:62"},"nativeSrc":"1944:25:62","nodeType":"YulFunctionCall","src":"1944:25:62"},"nativeSrc":"1944:25:62","nodeType":"YulExpressionStatement","src":"1944:25:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1989:9:62","nodeType":"YulIdentifier","src":"1989:9:62"},{"kind":"number","nativeSrc":"2000:2:62","nodeType":"YulLiteral","src":"2000:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1985:3:62","nodeType":"YulIdentifier","src":"1985:3:62"},"nativeSrc":"1985:18:62","nodeType":"YulFunctionCall","src":"1985:18:62"},{"name":"value1","nativeSrc":"2005:6:62","nodeType":"YulIdentifier","src":"2005:6:62"}],"functionName":{"name":"mstore","nativeSrc":"1978:6:62","nodeType":"YulIdentifier","src":"1978:6:62"},"nativeSrc":"1978:34:62","nodeType":"YulFunctionCall","src":"1978:34:62"},"nativeSrc":"1978:34:62","nodeType":"YulExpressionStatement","src":"1978:34:62"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"1762:256:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1860:9:62","nodeType":"YulTypedName","src":"1860:9:62","type":""},{"name":"value1","nativeSrc":"1871:6:62","nodeType":"YulTypedName","src":"1871:6:62","type":""},{"name":"value0","nativeSrc":"1879:6:62","nodeType":"YulTypedName","src":"1879:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1890:4:62","nodeType":"YulTypedName","src":"1890:4:62","type":""}],"src":"1762:256:62"},{"body":{"nativeSrc":"2104:103:62","nodeType":"YulBlock","src":"2104:103:62","statements":[{"body":{"nativeSrc":"2150:16:62","nodeType":"YulBlock","src":"2150:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2159:1:62","nodeType":"YulLiteral","src":"2159:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2162:1:62","nodeType":"YulLiteral","src":"2162:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2152:6:62","nodeType":"YulIdentifier","src":"2152:6:62"},"nativeSrc":"2152:12:62","nodeType":"YulFunctionCall","src":"2152:12:62"},"nativeSrc":"2152:12:62","nodeType":"YulExpressionStatement","src":"2152:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2125:7:62","nodeType":"YulIdentifier","src":"2125:7:62"},{"name":"headStart","nativeSrc":"2134:9:62","nodeType":"YulIdentifier","src":"2134:9:62"}],"functionName":{"name":"sub","nativeSrc":"2121:3:62","nodeType":"YulIdentifier","src":"2121:3:62"},"nativeSrc":"2121:23:62","nodeType":"YulFunctionCall","src":"2121:23:62"},{"kind":"number","nativeSrc":"2146:2:62","nodeType":"YulLiteral","src":"2146:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2117:3:62","nodeType":"YulIdentifier","src":"2117:3:62"},"nativeSrc":"2117:32:62","nodeType":"YulFunctionCall","src":"2117:32:62"},"nativeSrc":"2114:52:62","nodeType":"YulIf","src":"2114:52:62"},{"nativeSrc":"2175:26:62","nodeType":"YulAssignment","src":"2175:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"2191:9:62","nodeType":"YulIdentifier","src":"2191:9:62"}],"functionName":{"name":"mload","nativeSrc":"2185:5:62","nodeType":"YulIdentifier","src":"2185:5:62"},"nativeSrc":"2185:16:62","nodeType":"YulFunctionCall","src":"2185:16:62"},"variableNames":[{"name":"value0","nativeSrc":"2175:6:62","nodeType":"YulIdentifier","src":"2175:6:62"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"2023:184:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2070:9:62","nodeType":"YulTypedName","src":"2070:9:62","type":""},{"name":"dataEnd","nativeSrc":"2081:7:62","nodeType":"YulTypedName","src":"2081:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2093:6:62","nodeType":"YulTypedName","src":"2093:6:62","type":""}],"src":"2023:184:62"},{"body":{"nativeSrc":"2244:152:62","nodeType":"YulBlock","src":"2244:152:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2261:1:62","nodeType":"YulLiteral","src":"2261:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2264:77:62","nodeType":"YulLiteral","src":"2264:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2254:6:62","nodeType":"YulIdentifier","src":"2254:6:62"},"nativeSrc":"2254:88:62","nodeType":"YulFunctionCall","src":"2254:88:62"},"nativeSrc":"2254:88:62","nodeType":"YulExpressionStatement","src":"2254:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2358:1:62","nodeType":"YulLiteral","src":"2358:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"2361:4:62","nodeType":"YulLiteral","src":"2361:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2351:6:62","nodeType":"YulIdentifier","src":"2351:6:62"},"nativeSrc":"2351:15:62","nodeType":"YulFunctionCall","src":"2351:15:62"},"nativeSrc":"2351:15:62","nodeType":"YulExpressionStatement","src":"2351:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2382:1:62","nodeType":"YulLiteral","src":"2382:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2385:4:62","nodeType":"YulLiteral","src":"2385:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2375:6:62","nodeType":"YulIdentifier","src":"2375:6:62"},"nativeSrc":"2375:15:62","nodeType":"YulFunctionCall","src":"2375:15:62"},"nativeSrc":"2375:15:62","nodeType":"YulExpressionStatement","src":"2375:15:62"}]},"name":"panic_error_0x11","nativeSrc":"2212:184:62","nodeType":"YulFunctionDefinition","src":"2212:184:62"},{"body":{"nativeSrc":"2450:79:62","nodeType":"YulBlock","src":"2450:79:62","statements":[{"nativeSrc":"2460:17:62","nodeType":"YulAssignment","src":"2460:17:62","value":{"arguments":[{"name":"x","nativeSrc":"2472:1:62","nodeType":"YulIdentifier","src":"2472:1:62"},{"name":"y","nativeSrc":"2475:1:62","nodeType":"YulIdentifier","src":"2475:1:62"}],"functionName":{"name":"sub","nativeSrc":"2468:3:62","nodeType":"YulIdentifier","src":"2468:3:62"},"nativeSrc":"2468:9:62","nodeType":"YulFunctionCall","src":"2468:9:62"},"variableNames":[{"name":"diff","nativeSrc":"2460:4:62","nodeType":"YulIdentifier","src":"2460:4:62"}]},{"body":{"nativeSrc":"2501:22:62","nodeType":"YulBlock","src":"2501:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"2503:16:62","nodeType":"YulIdentifier","src":"2503:16:62"},"nativeSrc":"2503:18:62","nodeType":"YulFunctionCall","src":"2503:18:62"},"nativeSrc":"2503:18:62","nodeType":"YulExpressionStatement","src":"2503:18:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"2492:4:62","nodeType":"YulIdentifier","src":"2492:4:62"},{"name":"x","nativeSrc":"2498:1:62","nodeType":"YulIdentifier","src":"2498:1:62"}],"functionName":{"name":"gt","nativeSrc":"2489:2:62","nodeType":"YulIdentifier","src":"2489:2:62"},"nativeSrc":"2489:11:62","nodeType":"YulFunctionCall","src":"2489:11:62"},"nativeSrc":"2486:37:62","nodeType":"YulIf","src":"2486:37:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"2401:128:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2432:1:62","nodeType":"YulTypedName","src":"2432:1:62","type":""},{"name":"y","nativeSrc":"2435:1:62","nodeType":"YulTypedName","src":"2435:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"2441:4:62","nodeType":"YulTypedName","src":"2441:4:62","type":""}],"src":"2401:128:62"},{"body":{"nativeSrc":"2691:241:62","nodeType":"YulBlock","src":"2691:241:62","statements":[{"nativeSrc":"2701:26:62","nodeType":"YulAssignment","src":"2701:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"2713:9:62","nodeType":"YulIdentifier","src":"2713:9:62"},{"kind":"number","nativeSrc":"2724:2:62","nodeType":"YulLiteral","src":"2724:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2709:3:62","nodeType":"YulIdentifier","src":"2709:3:62"},"nativeSrc":"2709:18:62","nodeType":"YulFunctionCall","src":"2709:18:62"},"variableNames":[{"name":"tail","nativeSrc":"2701:4:62","nodeType":"YulIdentifier","src":"2701:4:62"}]},{"nativeSrc":"2736:52:62","nodeType":"YulVariableDeclaration","src":"2736:52:62","value":{"kind":"number","nativeSrc":"2746:42:62","nodeType":"YulLiteral","src":"2746:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2740:2:62","nodeType":"YulTypedName","src":"2740:2:62","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2804:9:62","nodeType":"YulIdentifier","src":"2804:9:62"},{"arguments":[{"name":"value0","nativeSrc":"2819:6:62","nodeType":"YulIdentifier","src":"2819:6:62"},{"name":"_1","nativeSrc":"2827:2:62","nodeType":"YulIdentifier","src":"2827:2:62"}],"functionName":{"name":"and","nativeSrc":"2815:3:62","nodeType":"YulIdentifier","src":"2815:3:62"},"nativeSrc":"2815:15:62","nodeType":"YulFunctionCall","src":"2815:15:62"}],"functionName":{"name":"mstore","nativeSrc":"2797:6:62","nodeType":"YulIdentifier","src":"2797:6:62"},"nativeSrc":"2797:34:62","nodeType":"YulFunctionCall","src":"2797:34:62"},"nativeSrc":"2797:34:62","nodeType":"YulExpressionStatement","src":"2797:34:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2851:9:62","nodeType":"YulIdentifier","src":"2851:9:62"},{"kind":"number","nativeSrc":"2862:2:62","nodeType":"YulLiteral","src":"2862:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2847:3:62","nodeType":"YulIdentifier","src":"2847:3:62"},"nativeSrc":"2847:18:62","nodeType":"YulFunctionCall","src":"2847:18:62"},{"arguments":[{"name":"value1","nativeSrc":"2871:6:62","nodeType":"YulIdentifier","src":"2871:6:62"},{"name":"_1","nativeSrc":"2879:2:62","nodeType":"YulIdentifier","src":"2879:2:62"}],"functionName":{"name":"and","nativeSrc":"2867:3:62","nodeType":"YulIdentifier","src":"2867:3:62"},"nativeSrc":"2867:15:62","nodeType":"YulFunctionCall","src":"2867:15:62"}],"functionName":{"name":"mstore","nativeSrc":"2840:6:62","nodeType":"YulIdentifier","src":"2840:6:62"},"nativeSrc":"2840:43:62","nodeType":"YulFunctionCall","src":"2840:43:62"},"nativeSrc":"2840:43:62","nodeType":"YulExpressionStatement","src":"2840:43:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2903:9:62","nodeType":"YulIdentifier","src":"2903:9:62"},{"kind":"number","nativeSrc":"2914:2:62","nodeType":"YulLiteral","src":"2914:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2899:3:62","nodeType":"YulIdentifier","src":"2899:3:62"},"nativeSrc":"2899:18:62","nodeType":"YulFunctionCall","src":"2899:18:62"},{"name":"value2","nativeSrc":"2919:6:62","nodeType":"YulIdentifier","src":"2919:6:62"}],"functionName":{"name":"mstore","nativeSrc":"2892:6:62","nodeType":"YulIdentifier","src":"2892:6:62"},"nativeSrc":"2892:34:62","nodeType":"YulFunctionCall","src":"2892:34:62"},"nativeSrc":"2892:34:62","nodeType":"YulExpressionStatement","src":"2892:34:62"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"2534:398:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2644:9:62","nodeType":"YulTypedName","src":"2644:9:62","type":""},{"name":"value2","nativeSrc":"2655:6:62","nodeType":"YulTypedName","src":"2655:6:62","type":""},{"name":"value1","nativeSrc":"2663:6:62","nodeType":"YulTypedName","src":"2663:6:62","type":""},{"name":"value0","nativeSrc":"2671:6:62","nodeType":"YulTypedName","src":"2671:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2682:4:62","nodeType":"YulTypedName","src":"2682:4:62","type":""}],"src":"2534:398:62"},{"body":{"nativeSrc":"3015:199:62","nodeType":"YulBlock","src":"3015:199:62","statements":[{"body":{"nativeSrc":"3061:16:62","nodeType":"YulBlock","src":"3061:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3070:1:62","nodeType":"YulLiteral","src":"3070:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3073:1:62","nodeType":"YulLiteral","src":"3073:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3063:6:62","nodeType":"YulIdentifier","src":"3063:6:62"},"nativeSrc":"3063:12:62","nodeType":"YulFunctionCall","src":"3063:12:62"},"nativeSrc":"3063:12:62","nodeType":"YulExpressionStatement","src":"3063:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3036:7:62","nodeType":"YulIdentifier","src":"3036:7:62"},{"name":"headStart","nativeSrc":"3045:9:62","nodeType":"YulIdentifier","src":"3045:9:62"}],"functionName":{"name":"sub","nativeSrc":"3032:3:62","nodeType":"YulIdentifier","src":"3032:3:62"},"nativeSrc":"3032:23:62","nodeType":"YulFunctionCall","src":"3032:23:62"},{"kind":"number","nativeSrc":"3057:2:62","nodeType":"YulLiteral","src":"3057:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3028:3:62","nodeType":"YulIdentifier","src":"3028:3:62"},"nativeSrc":"3028:32:62","nodeType":"YulFunctionCall","src":"3028:32:62"},"nativeSrc":"3025:52:62","nodeType":"YulIf","src":"3025:52:62"},{"nativeSrc":"3086:29:62","nodeType":"YulVariableDeclaration","src":"3086:29:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3105:9:62","nodeType":"YulIdentifier","src":"3105:9:62"}],"functionName":{"name":"mload","nativeSrc":"3099:5:62","nodeType":"YulIdentifier","src":"3099:5:62"},"nativeSrc":"3099:16:62","nodeType":"YulFunctionCall","src":"3099:16:62"},"variables":[{"name":"value","nativeSrc":"3090:5:62","nodeType":"YulTypedName","src":"3090:5:62","type":""}]},{"body":{"nativeSrc":"3168:16:62","nodeType":"YulBlock","src":"3168:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3177:1:62","nodeType":"YulLiteral","src":"3177:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"3180:1:62","nodeType":"YulLiteral","src":"3180:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3170:6:62","nodeType":"YulIdentifier","src":"3170:6:62"},"nativeSrc":"3170:12:62","nodeType":"YulFunctionCall","src":"3170:12:62"},"nativeSrc":"3170:12:62","nodeType":"YulExpressionStatement","src":"3170:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3137:5:62","nodeType":"YulIdentifier","src":"3137:5:62"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3158:5:62","nodeType":"YulIdentifier","src":"3158:5:62"}],"functionName":{"name":"iszero","nativeSrc":"3151:6:62","nodeType":"YulIdentifier","src":"3151:6:62"},"nativeSrc":"3151:13:62","nodeType":"YulFunctionCall","src":"3151:13:62"}],"functionName":{"name":"iszero","nativeSrc":"3144:6:62","nodeType":"YulIdentifier","src":"3144:6:62"},"nativeSrc":"3144:21:62","nodeType":"YulFunctionCall","src":"3144:21:62"}],"functionName":{"name":"eq","nativeSrc":"3134:2:62","nodeType":"YulIdentifier","src":"3134:2:62"},"nativeSrc":"3134:32:62","nodeType":"YulFunctionCall","src":"3134:32:62"}],"functionName":{"name":"iszero","nativeSrc":"3127:6:62","nodeType":"YulIdentifier","src":"3127:6:62"},"nativeSrc":"3127:40:62","nodeType":"YulFunctionCall","src":"3127:40:62"},"nativeSrc":"3124:60:62","nodeType":"YulIf","src":"3124:60:62"},{"nativeSrc":"3193:15:62","nodeType":"YulAssignment","src":"3193:15:62","value":{"name":"value","nativeSrc":"3203:5:62","nodeType":"YulIdentifier","src":"3203:5:62"},"variableNames":[{"name":"value0","nativeSrc":"3193:6:62","nodeType":"YulIdentifier","src":"3193:6:62"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"2937:277:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2981:9:62","nodeType":"YulTypedName","src":"2981:9:62","type":""},{"name":"dataEnd","nativeSrc":"2992:7:62","nodeType":"YulTypedName","src":"2992:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3004:6:62","nodeType":"YulTypedName","src":"3004:6:62","type":""}],"src":"2937:277:62"},{"body":{"nativeSrc":"3393:232:62","nodeType":"YulBlock","src":"3393:232:62","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3410:9:62","nodeType":"YulIdentifier","src":"3410:9:62"},{"kind":"number","nativeSrc":"3421:2:62","nodeType":"YulLiteral","src":"3421:2:62","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3403:6:62","nodeType":"YulIdentifier","src":"3403:6:62"},"nativeSrc":"3403:21:62","nodeType":"YulFunctionCall","src":"3403:21:62"},"nativeSrc":"3403:21:62","nodeType":"YulExpressionStatement","src":"3403:21:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3444:9:62","nodeType":"YulIdentifier","src":"3444:9:62"},{"kind":"number","nativeSrc":"3455:2:62","nodeType":"YulLiteral","src":"3455:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3440:3:62","nodeType":"YulIdentifier","src":"3440:3:62"},"nativeSrc":"3440:18:62","nodeType":"YulFunctionCall","src":"3440:18:62"},{"kind":"number","nativeSrc":"3460:2:62","nodeType":"YulLiteral","src":"3460:2:62","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"3433:6:62","nodeType":"YulIdentifier","src":"3433:6:62"},"nativeSrc":"3433:30:62","nodeType":"YulFunctionCall","src":"3433:30:62"},"nativeSrc":"3433:30:62","nodeType":"YulExpressionStatement","src":"3433:30:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3483:9:62","nodeType":"YulIdentifier","src":"3483:9:62"},{"kind":"number","nativeSrc":"3494:2:62","nodeType":"YulLiteral","src":"3494:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3479:3:62","nodeType":"YulIdentifier","src":"3479:3:62"},"nativeSrc":"3479:18:62","nodeType":"YulFunctionCall","src":"3479:18:62"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"3499:34:62","nodeType":"YulLiteral","src":"3499:34:62","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"3472:6:62","nodeType":"YulIdentifier","src":"3472:6:62"},"nativeSrc":"3472:62:62","nodeType":"YulFunctionCall","src":"3472:62:62"},"nativeSrc":"3472:62:62","nodeType":"YulExpressionStatement","src":"3472:62:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3554:9:62","nodeType":"YulIdentifier","src":"3554:9:62"},{"kind":"number","nativeSrc":"3565:2:62","nodeType":"YulLiteral","src":"3565:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3550:3:62","nodeType":"YulIdentifier","src":"3550:3:62"},"nativeSrc":"3550:18:62","nodeType":"YulFunctionCall","src":"3550:18:62"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"3570:12:62","nodeType":"YulLiteral","src":"3570:12:62","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"3543:6:62","nodeType":"YulIdentifier","src":"3543:6:62"},"nativeSrc":"3543:40:62","nodeType":"YulFunctionCall","src":"3543:40:62"},"nativeSrc":"3543:40:62","nodeType":"YulExpressionStatement","src":"3543:40:62"},{"nativeSrc":"3592:27:62","nodeType":"YulAssignment","src":"3592:27:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3604:9:62","nodeType":"YulIdentifier","src":"3604:9:62"},{"kind":"number","nativeSrc":"3615:3:62","nodeType":"YulLiteral","src":"3615:3:62","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3600:3:62","nodeType":"YulIdentifier","src":"3600:3:62"},"nativeSrc":"3600:19:62","nodeType":"YulFunctionCall","src":"3600:19:62"},"variableNames":[{"name":"tail","nativeSrc":"3592:4:62","nodeType":"YulIdentifier","src":"3592:4:62"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3219:406:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3370:9:62","nodeType":"YulTypedName","src":"3370:9:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3384:4:62","nodeType":"YulTypedName","src":"3384:4:62","type":""}],"src":"3219:406:62"},{"body":{"nativeSrc":"3678:77:62","nodeType":"YulBlock","src":"3678:77:62","statements":[{"nativeSrc":"3688:16:62","nodeType":"YulAssignment","src":"3688:16:62","value":{"arguments":[{"name":"x","nativeSrc":"3699:1:62","nodeType":"YulIdentifier","src":"3699:1:62"},{"name":"y","nativeSrc":"3702:1:62","nodeType":"YulIdentifier","src":"3702:1:62"}],"functionName":{"name":"add","nativeSrc":"3695:3:62","nodeType":"YulIdentifier","src":"3695:3:62"},"nativeSrc":"3695:9:62","nodeType":"YulFunctionCall","src":"3695:9:62"},"variableNames":[{"name":"sum","nativeSrc":"3688:3:62","nodeType":"YulIdentifier","src":"3688:3:62"}]},{"body":{"nativeSrc":"3727:22:62","nodeType":"YulBlock","src":"3727:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"3729:16:62","nodeType":"YulIdentifier","src":"3729:16:62"},"nativeSrc":"3729:18:62","nodeType":"YulFunctionCall","src":"3729:18:62"},"nativeSrc":"3729:18:62","nodeType":"YulExpressionStatement","src":"3729:18:62"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"3719:1:62","nodeType":"YulIdentifier","src":"3719:1:62"},{"name":"sum","nativeSrc":"3722:3:62","nodeType":"YulIdentifier","src":"3722:3:62"}],"functionName":{"name":"gt","nativeSrc":"3716:2:62","nodeType":"YulIdentifier","src":"3716:2:62"},"nativeSrc":"3716:10:62","nodeType":"YulFunctionCall","src":"3716:10:62"},"nativeSrc":"3713:36:62","nodeType":"YulIf","src":"3713:36:62"}]},"name":"checked_add_t_uint256","nativeSrc":"3630:125:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"3661:1:62","nodeType":"YulTypedName","src":"3661:1:62","type":""},{"name":"y","nativeSrc":"3664:1:62","nodeType":"YulTypedName","src":"3664:1:62","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"3670:3:62","nodeType":"YulTypedName","src":"3670:3:62","type":""}],"src":"3630:125:62"},{"body":{"nativeSrc":"3889:168:62","nodeType":"YulBlock","src":"3889:168:62","statements":[{"nativeSrc":"3899:26:62","nodeType":"YulAssignment","src":"3899:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"3911:9:62","nodeType":"YulIdentifier","src":"3911:9:62"},{"kind":"number","nativeSrc":"3922:2:62","nodeType":"YulLiteral","src":"3922:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3907:3:62","nodeType":"YulIdentifier","src":"3907:3:62"},"nativeSrc":"3907:18:62","nodeType":"YulFunctionCall","src":"3907:18:62"},"variableNames":[{"name":"tail","nativeSrc":"3899:4:62","nodeType":"YulIdentifier","src":"3899:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3941:9:62","nodeType":"YulIdentifier","src":"3941:9:62"},{"arguments":[{"name":"value0","nativeSrc":"3956:6:62","nodeType":"YulIdentifier","src":"3956:6:62"},{"kind":"number","nativeSrc":"3964:42:62","nodeType":"YulLiteral","src":"3964:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3952:3:62","nodeType":"YulIdentifier","src":"3952:3:62"},"nativeSrc":"3952:55:62","nodeType":"YulFunctionCall","src":"3952:55:62"}],"functionName":{"name":"mstore","nativeSrc":"3934:6:62","nodeType":"YulIdentifier","src":"3934:6:62"},"nativeSrc":"3934:74:62","nodeType":"YulFunctionCall","src":"3934:74:62"},"nativeSrc":"3934:74:62","nodeType":"YulExpressionStatement","src":"3934:74:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4028:9:62","nodeType":"YulIdentifier","src":"4028:9:62"},{"kind":"number","nativeSrc":"4039:2:62","nodeType":"YulLiteral","src":"4039:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4024:3:62","nodeType":"YulIdentifier","src":"4024:3:62"},"nativeSrc":"4024:18:62","nodeType":"YulFunctionCall","src":"4024:18:62"},{"name":"value1","nativeSrc":"4044:6:62","nodeType":"YulIdentifier","src":"4044:6:62"}],"functionName":{"name":"mstore","nativeSrc":"4017:6:62","nodeType":"YulIdentifier","src":"4017:6:62"},"nativeSrc":"4017:34:62","nodeType":"YulFunctionCall","src":"4017:34:62"},"nativeSrc":"4017:34:62","nodeType":"YulExpressionStatement","src":"4017:34:62"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"3760:297:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3850:9:62","nodeType":"YulTypedName","src":"3850:9:62","type":""},{"name":"value1","nativeSrc":"3861:6:62","nodeType":"YulTypedName","src":"3861:6:62","type":""},{"name":"value0","nativeSrc":"3869:6:62","nodeType":"YulTypedName","src":"3869:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3880:4:62","nodeType":"YulTypedName","src":"3880:4:62","type":""}],"src":"3760:297:62"},{"body":{"nativeSrc":"4236:228:62","nodeType":"YulBlock","src":"4236:228:62","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4253:9:62","nodeType":"YulIdentifier","src":"4253:9:62"},{"kind":"number","nativeSrc":"4264:2:62","nodeType":"YulLiteral","src":"4264:2:62","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4246:6:62","nodeType":"YulIdentifier","src":"4246:6:62"},"nativeSrc":"4246:21:62","nodeType":"YulFunctionCall","src":"4246:21:62"},"nativeSrc":"4246:21:62","nodeType":"YulExpressionStatement","src":"4246:21:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4287:9:62","nodeType":"YulIdentifier","src":"4287:9:62"},{"kind":"number","nativeSrc":"4298:2:62","nodeType":"YulLiteral","src":"4298:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4283:3:62","nodeType":"YulIdentifier","src":"4283:3:62"},"nativeSrc":"4283:18:62","nodeType":"YulFunctionCall","src":"4283:18:62"},{"kind":"number","nativeSrc":"4303:2:62","nodeType":"YulLiteral","src":"4303:2:62","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"4276:6:62","nodeType":"YulIdentifier","src":"4276:6:62"},"nativeSrc":"4276:30:62","nodeType":"YulFunctionCall","src":"4276:30:62"},"nativeSrc":"4276:30:62","nodeType":"YulExpressionStatement","src":"4276:30:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4326:9:62","nodeType":"YulIdentifier","src":"4326:9:62"},{"kind":"number","nativeSrc":"4337:2:62","nodeType":"YulLiteral","src":"4337:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4322:3:62","nodeType":"YulIdentifier","src":"4322:3:62"},"nativeSrc":"4322:18:62","nodeType":"YulFunctionCall","src":"4322:18:62"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"4342:34:62","nodeType":"YulLiteral","src":"4342:34:62","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"4315:6:62","nodeType":"YulIdentifier","src":"4315:6:62"},"nativeSrc":"4315:62:62","nodeType":"YulFunctionCall","src":"4315:62:62"},"nativeSrc":"4315:62:62","nodeType":"YulExpressionStatement","src":"4315:62:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4397:9:62","nodeType":"YulIdentifier","src":"4397:9:62"},{"kind":"number","nativeSrc":"4408:2:62","nodeType":"YulLiteral","src":"4408:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4393:3:62","nodeType":"YulIdentifier","src":"4393:3:62"},"nativeSrc":"4393:18:62","nodeType":"YulFunctionCall","src":"4393:18:62"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"4413:8:62","nodeType":"YulLiteral","src":"4413:8:62","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"4386:6:62","nodeType":"YulIdentifier","src":"4386:6:62"},"nativeSrc":"4386:36:62","nodeType":"YulFunctionCall","src":"4386:36:62"},"nativeSrc":"4386:36:62","nodeType":"YulExpressionStatement","src":"4386:36:62"},{"nativeSrc":"4431:27:62","nodeType":"YulAssignment","src":"4431:27:62","value":{"arguments":[{"name":"headStart","nativeSrc":"4443:9:62","nodeType":"YulIdentifier","src":"4443:9:62"},{"kind":"number","nativeSrc":"4454:3:62","nodeType":"YulLiteral","src":"4454:3:62","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4439:3:62","nodeType":"YulIdentifier","src":"4439:3:62"},"nativeSrc":"4439:19:62","nodeType":"YulFunctionCall","src":"4439:19:62"},"variableNames":[{"name":"tail","nativeSrc":"4431:4:62","nodeType":"YulIdentifier","src":"4431:4:62"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4062:402:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4213:9:62","nodeType":"YulTypedName","src":"4213:9:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4227:4:62","nodeType":"YulTypedName","src":"4227:4:62","type":""}],"src":"4062:402:62"},{"body":{"nativeSrc":"4535:184:62","nodeType":"YulBlock","src":"4535:184:62","statements":[{"nativeSrc":"4545:10:62","nodeType":"YulVariableDeclaration","src":"4545:10:62","value":{"kind":"number","nativeSrc":"4554:1:62","nodeType":"YulLiteral","src":"4554:1:62","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4549:1:62","nodeType":"YulTypedName","src":"4549:1:62","type":""}]},{"body":{"nativeSrc":"4614:63:62","nodeType":"YulBlock","src":"4614:63:62","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"4639:3:62","nodeType":"YulIdentifier","src":"4639:3:62"},{"name":"i","nativeSrc":"4644:1:62","nodeType":"YulIdentifier","src":"4644:1:62"}],"functionName":{"name":"add","nativeSrc":"4635:3:62","nodeType":"YulIdentifier","src":"4635:3:62"},"nativeSrc":"4635:11:62","nodeType":"YulFunctionCall","src":"4635:11:62"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4658:3:62","nodeType":"YulIdentifier","src":"4658:3:62"},{"name":"i","nativeSrc":"4663:1:62","nodeType":"YulIdentifier","src":"4663:1:62"}],"functionName":{"name":"add","nativeSrc":"4654:3:62","nodeType":"YulIdentifier","src":"4654:3:62"},"nativeSrc":"4654:11:62","nodeType":"YulFunctionCall","src":"4654:11:62"}],"functionName":{"name":"mload","nativeSrc":"4648:5:62","nodeType":"YulIdentifier","src":"4648:5:62"},"nativeSrc":"4648:18:62","nodeType":"YulFunctionCall","src":"4648:18:62"}],"functionName":{"name":"mstore","nativeSrc":"4628:6:62","nodeType":"YulIdentifier","src":"4628:6:62"},"nativeSrc":"4628:39:62","nodeType":"YulFunctionCall","src":"4628:39:62"},"nativeSrc":"4628:39:62","nodeType":"YulExpressionStatement","src":"4628:39:62"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4575:1:62","nodeType":"YulIdentifier","src":"4575:1:62"},{"name":"length","nativeSrc":"4578:6:62","nodeType":"YulIdentifier","src":"4578:6:62"}],"functionName":{"name":"lt","nativeSrc":"4572:2:62","nodeType":"YulIdentifier","src":"4572:2:62"},"nativeSrc":"4572:13:62","nodeType":"YulFunctionCall","src":"4572:13:62"},"nativeSrc":"4564:113:62","nodeType":"YulForLoop","post":{"nativeSrc":"4586:19:62","nodeType":"YulBlock","src":"4586:19:62","statements":[{"nativeSrc":"4588:15:62","nodeType":"YulAssignment","src":"4588:15:62","value":{"arguments":[{"name":"i","nativeSrc":"4597:1:62","nodeType":"YulIdentifier","src":"4597:1:62"},{"kind":"number","nativeSrc":"4600:2:62","nodeType":"YulLiteral","src":"4600:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4593:3:62","nodeType":"YulIdentifier","src":"4593:3:62"},"nativeSrc":"4593:10:62","nodeType":"YulFunctionCall","src":"4593:10:62"},"variableNames":[{"name":"i","nativeSrc":"4588:1:62","nodeType":"YulIdentifier","src":"4588:1:62"}]}]},"pre":{"nativeSrc":"4568:3:62","nodeType":"YulBlock","src":"4568:3:62","statements":[]},"src":"4564:113:62"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"4697:3:62","nodeType":"YulIdentifier","src":"4697:3:62"},{"name":"length","nativeSrc":"4702:6:62","nodeType":"YulIdentifier","src":"4702:6:62"}],"functionName":{"name":"add","nativeSrc":"4693:3:62","nodeType":"YulIdentifier","src":"4693:3:62"},"nativeSrc":"4693:16:62","nodeType":"YulFunctionCall","src":"4693:16:62"},{"kind":"number","nativeSrc":"4711:1:62","nodeType":"YulLiteral","src":"4711:1:62","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"4686:6:62","nodeType":"YulIdentifier","src":"4686:6:62"},"nativeSrc":"4686:27:62","nodeType":"YulFunctionCall","src":"4686:27:62"},"nativeSrc":"4686:27:62","nodeType":"YulExpressionStatement","src":"4686:27:62"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"4469:250:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"4513:3:62","nodeType":"YulTypedName","src":"4513:3:62","type":""},{"name":"dst","nativeSrc":"4518:3:62","nodeType":"YulTypedName","src":"4518:3:62","type":""},{"name":"length","nativeSrc":"4523:6:62","nodeType":"YulTypedName","src":"4523:6:62","type":""}],"src":"4469:250:62"},{"body":{"nativeSrc":"4861:150:62","nodeType":"YulBlock","src":"4861:150:62","statements":[{"nativeSrc":"4871:27:62","nodeType":"YulVariableDeclaration","src":"4871:27:62","value":{"arguments":[{"name":"value0","nativeSrc":"4891:6:62","nodeType":"YulIdentifier","src":"4891:6:62"}],"functionName":{"name":"mload","nativeSrc":"4885:5:62","nodeType":"YulIdentifier","src":"4885:5:62"},"nativeSrc":"4885:13:62","nodeType":"YulFunctionCall","src":"4885:13:62"},"variables":[{"name":"length","nativeSrc":"4875:6:62","nodeType":"YulTypedName","src":"4875:6:62","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4946:6:62","nodeType":"YulIdentifier","src":"4946:6:62"},{"kind":"number","nativeSrc":"4954:4:62","nodeType":"YulLiteral","src":"4954:4:62","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4942:3:62","nodeType":"YulIdentifier","src":"4942:3:62"},"nativeSrc":"4942:17:62","nodeType":"YulFunctionCall","src":"4942:17:62"},{"name":"pos","nativeSrc":"4961:3:62","nodeType":"YulIdentifier","src":"4961:3:62"},{"name":"length","nativeSrc":"4966:6:62","nodeType":"YulIdentifier","src":"4966:6:62"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"4907:34:62","nodeType":"YulIdentifier","src":"4907:34:62"},"nativeSrc":"4907:66:62","nodeType":"YulFunctionCall","src":"4907:66:62"},"nativeSrc":"4907:66:62","nodeType":"YulExpressionStatement","src":"4907:66:62"},{"nativeSrc":"4982:23:62","nodeType":"YulAssignment","src":"4982:23:62","value":{"arguments":[{"name":"pos","nativeSrc":"4993:3:62","nodeType":"YulIdentifier","src":"4993:3:62"},{"name":"length","nativeSrc":"4998:6:62","nodeType":"YulIdentifier","src":"4998:6:62"}],"functionName":{"name":"add","nativeSrc":"4989:3:62","nodeType":"YulIdentifier","src":"4989:3:62"},"nativeSrc":"4989:16:62","nodeType":"YulFunctionCall","src":"4989:16:62"},"variableNames":[{"name":"end","nativeSrc":"4982:3:62","nodeType":"YulIdentifier","src":"4982:3:62"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"4724:287:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4837:3:62","nodeType":"YulTypedName","src":"4837:3:62","type":""},{"name":"value0","nativeSrc":"4842:6:62","nodeType":"YulTypedName","src":"4842:6:62","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4853:3:62","nodeType":"YulTypedName","src":"4853:3:62","type":""}],"src":"4724:287:62"},{"body":{"nativeSrc":"5190:179:62","nodeType":"YulBlock","src":"5190:179:62","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5207:9:62","nodeType":"YulIdentifier","src":"5207:9:62"},{"kind":"number","nativeSrc":"5218:2:62","nodeType":"YulLiteral","src":"5218:2:62","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5200:6:62","nodeType":"YulIdentifier","src":"5200:6:62"},"nativeSrc":"5200:21:62","nodeType":"YulFunctionCall","src":"5200:21:62"},"nativeSrc":"5200:21:62","nodeType":"YulExpressionStatement","src":"5200:21:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5241:9:62","nodeType":"YulIdentifier","src":"5241:9:62"},{"kind":"number","nativeSrc":"5252:2:62","nodeType":"YulLiteral","src":"5252:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5237:3:62","nodeType":"YulIdentifier","src":"5237:3:62"},"nativeSrc":"5237:18:62","nodeType":"YulFunctionCall","src":"5237:18:62"},{"kind":"number","nativeSrc":"5257:2:62","nodeType":"YulLiteral","src":"5257:2:62","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"5230:6:62","nodeType":"YulIdentifier","src":"5230:6:62"},"nativeSrc":"5230:30:62","nodeType":"YulFunctionCall","src":"5230:30:62"},"nativeSrc":"5230:30:62","nodeType":"YulExpressionStatement","src":"5230:30:62"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5280:9:62","nodeType":"YulIdentifier","src":"5280:9:62"},{"kind":"number","nativeSrc":"5291:2:62","nodeType":"YulLiteral","src":"5291:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5276:3:62","nodeType":"YulIdentifier","src":"5276:3:62"},"nativeSrc":"5276:18:62","nodeType":"YulFunctionCall","src":"5276:18:62"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"5296:31:62","nodeType":"YulLiteral","src":"5296:31:62","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"5269:6:62","nodeType":"YulIdentifier","src":"5269:6:62"},"nativeSrc":"5269:59:62","nodeType":"YulFunctionCall","src":"5269:59:62"},"nativeSrc":"5269:59:62","nodeType":"YulExpressionStatement","src":"5269:59:62"},{"nativeSrc":"5337:26:62","nodeType":"YulAssignment","src":"5337:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"5349:9:62","nodeType":"YulIdentifier","src":"5349:9:62"},{"kind":"number","nativeSrc":"5360:2:62","nodeType":"YulLiteral","src":"5360:2:62","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5345:3:62","nodeType":"YulIdentifier","src":"5345:3:62"},"nativeSrc":"5345:18:62","nodeType":"YulFunctionCall","src":"5345:18:62"},"variableNames":[{"name":"tail","nativeSrc":"5337:4:62","nodeType":"YulIdentifier","src":"5337:4:62"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"5016:353:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5167:9:62","nodeType":"YulTypedName","src":"5167:9:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5181:4:62","nodeType":"YulTypedName","src":"5181:4:62","type":""}],"src":"5016:353:62"},{"body":{"nativeSrc":"5495:334:62","nodeType":"YulBlock","src":"5495:334:62","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5512:9:62","nodeType":"YulIdentifier","src":"5512:9:62"},{"kind":"number","nativeSrc":"5523:2:62","nodeType":"YulLiteral","src":"5523:2:62","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5505:6:62","nodeType":"YulIdentifier","src":"5505:6:62"},"nativeSrc":"5505:21:62","nodeType":"YulFunctionCall","src":"5505:21:62"},"nativeSrc":"5505:21:62","nodeType":"YulExpressionStatement","src":"5505:21:62"},{"nativeSrc":"5535:27:62","nodeType":"YulVariableDeclaration","src":"5535:27:62","value":{"arguments":[{"name":"value0","nativeSrc":"5555:6:62","nodeType":"YulIdentifier","src":"5555:6:62"}],"functionName":{"name":"mload","nativeSrc":"5549:5:62","nodeType":"YulIdentifier","src":"5549:5:62"},"nativeSrc":"5549:13:62","nodeType":"YulFunctionCall","src":"5549:13:62"},"variables":[{"name":"length","nativeSrc":"5539:6:62","nodeType":"YulTypedName","src":"5539:6:62","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5582:9:62","nodeType":"YulIdentifier","src":"5582:9:62"},{"kind":"number","nativeSrc":"5593:2:62","nodeType":"YulLiteral","src":"5593:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5578:3:62","nodeType":"YulIdentifier","src":"5578:3:62"},"nativeSrc":"5578:18:62","nodeType":"YulFunctionCall","src":"5578:18:62"},{"name":"length","nativeSrc":"5598:6:62","nodeType":"YulIdentifier","src":"5598:6:62"}],"functionName":{"name":"mstore","nativeSrc":"5571:6:62","nodeType":"YulIdentifier","src":"5571:6:62"},"nativeSrc":"5571:34:62","nodeType":"YulFunctionCall","src":"5571:34:62"},"nativeSrc":"5571:34:62","nodeType":"YulExpressionStatement","src":"5571:34:62"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"5653:6:62","nodeType":"YulIdentifier","src":"5653:6:62"},{"kind":"number","nativeSrc":"5661:2:62","nodeType":"YulLiteral","src":"5661:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5649:3:62","nodeType":"YulIdentifier","src":"5649:3:62"},"nativeSrc":"5649:15:62","nodeType":"YulFunctionCall","src":"5649:15:62"},{"arguments":[{"name":"headStart","nativeSrc":"5670:9:62","nodeType":"YulIdentifier","src":"5670:9:62"},{"kind":"number","nativeSrc":"5681:2:62","nodeType":"YulLiteral","src":"5681:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5666:3:62","nodeType":"YulIdentifier","src":"5666:3:62"},"nativeSrc":"5666:18:62","nodeType":"YulFunctionCall","src":"5666:18:62"},{"name":"length","nativeSrc":"5686:6:62","nodeType":"YulIdentifier","src":"5686:6:62"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"5614:34:62","nodeType":"YulIdentifier","src":"5614:34:62"},"nativeSrc":"5614:79:62","nodeType":"YulFunctionCall","src":"5614:79:62"},"nativeSrc":"5614:79:62","nodeType":"YulExpressionStatement","src":"5614:79:62"},{"nativeSrc":"5702:121:62","nodeType":"YulAssignment","src":"5702:121:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5718:9:62","nodeType":"YulIdentifier","src":"5718:9:62"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"5737:6:62","nodeType":"YulIdentifier","src":"5737:6:62"},{"kind":"number","nativeSrc":"5745:2:62","nodeType":"YulLiteral","src":"5745:2:62","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"5733:3:62","nodeType":"YulIdentifier","src":"5733:3:62"},"nativeSrc":"5733:15:62","nodeType":"YulFunctionCall","src":"5733:15:62"},{"kind":"number","nativeSrc":"5750:66:62","nodeType":"YulLiteral","src":"5750:66:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"5729:3:62","nodeType":"YulIdentifier","src":"5729:3:62"},"nativeSrc":"5729:88:62","nodeType":"YulFunctionCall","src":"5729:88:62"}],"functionName":{"name":"add","nativeSrc":"5714:3:62","nodeType":"YulIdentifier","src":"5714:3:62"},"nativeSrc":"5714:104:62","nodeType":"YulFunctionCall","src":"5714:104:62"},{"kind":"number","nativeSrc":"5820:2:62","nodeType":"YulLiteral","src":"5820:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5710:3:62","nodeType":"YulIdentifier","src":"5710:3:62"},"nativeSrc":"5710:113:62","nodeType":"YulFunctionCall","src":"5710:113:62"},"variableNames":[{"name":"tail","nativeSrc":"5702:4:62","nodeType":"YulIdentifier","src":"5702:4:62"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"5374:455:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5464:9:62","nodeType":"YulTypedName","src":"5464:9:62","type":""},{"name":"value0","nativeSrc":"5475:6:62","nodeType":"YulTypedName","src":"5475:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5486:4:62","nodeType":"YulTypedName","src":"5486:4:62","type":""}],"src":"5374:455:62"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3965__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ICurve_$5316__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007c5760003560e01c80636a6278421161005b5780636a627842146101045780637165485d1461011957806391ba317a14610139578063b3f006741461014157600080fd5b80629a9b7b1461008157806301ffc9a71461009c578063647846a5146100bf575b600080fd5b610089610161565b6040519081526020015b60405180910390f35b6100af6100aa366004610876565b610177565b6040519015158152602001610093565b6001546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610093565b6101176101123660046108bf565b610191565b005b6000546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b610089610271565b6002546100df9073ffffffffffffffffffffffffffffffffffffffff1681565b600061017261016e610285565b5490565b905090565b600061018b826101856102b3565b906102e1565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff1663a6413a276101b8610161565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260016024820152604401602060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906108f5565b90506102643360025460015473ffffffffffffffffffffffffffffffffffffffff908116929116846103bb565b61026d82610456565b5050565b600061017261027e610285565b6001015490565b60008061018b60017f693bcdae20ebbf8c20ad73778252483eb64f50287e6e826c8678109643b4917661093d565b60008061018b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61093d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016103315750600061018b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016103825750600161018b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261045090859061046b565b50505050565b61046881610462610285565b90610584565b50565b60006104cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106679092919063ffffffff16565b90508051600014806104ee5750808060200190518101906104ee9190610950565b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b505050565b8154600090610594906001610972565b905082600101548111156105d4576040517f4594a70000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028301546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561064a57600080fd5b505af115801561065e573d6000803e3d6000fd5b50505092555050565b6060610676848460008561067e565b949350505050565b606082471015610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610576565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161073991906109a9565b60006040518083038185875af1925050503d8060008114610776576040519150601f19603f3d011682016040523d82523d6000602084013e61077b565b606091505b509150915061078c87838387610797565b979650505050505050565b6060831561082d5782516000036108265773ffffffffffffffffffffffffffffffffffffffff85163b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b5081610676565b61067683838151156108425781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057691906109c5565b60006020828403121561088857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108b857600080fd5b9392505050565b6000602082840312156108d157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108b857600080fd5b60006020828403121561090757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561018b5761018b61090e565b60006020828403121561096257600080fd5b815180151581146108b857600080fd5b8082018082111561018b5761018b61090e565b60005b838110156109a0578181015183820152602001610988565b50506000910152565b600082516109bb818460208701610985565b9190910192915050565b60208152600082518060208401526109e4816040850160208701610985565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122083c8140fa034202e08a0b37ad4bb713be5fc4d1ff433cfee0d47b6dd9495ff7964736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6A627842 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6A627842 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x7165485D EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x91BA317A EQ PUSH2 0x139 JUMPI DUP1 PUSH4 0xB3F00674 EQ PUSH2 0x141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x647846A5 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x89 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x876 JUMP JUMPDEST PUSH2 0x177 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BF JUMP JUMPDEST PUSH2 0x191 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x89 PUSH2 0x271 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xDF SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x172 PUSH2 0x16E PUSH2 0x285 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B DUP3 PUSH2 0x185 PUSH2 0x2B3 JUMP JUMPDEST SWAP1 PUSH2 0x2E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA6413A27 PUSH2 0x1B8 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP PUSH2 0x264 CALLER PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP3 SWAP2 AND DUP5 PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x26D DUP3 PUSH2 0x456 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x172 PUSH2 0x27E PUSH2 0x285 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18B PUSH1 0x1 PUSH32 0x693BCDAE20EBBF8C20AD73778252483EB64F50287E6E826C8678109643B49176 PUSH2 0x93D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x93D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x331 JUMPI POP PUSH1 0x0 PUSH2 0x18B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x382 JUMPI POP PUSH1 0x1 PUSH2 0x18B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x450 SWAP1 DUP6 SWAP1 PUSH2 0x46B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x468 DUP2 PUSH2 0x462 PUSH2 0x285 JUMP JUMPDEST SWAP1 PUSH2 0x584 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CD DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x667 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x4EE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x950 JUMP JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x594 SWAP1 PUSH1 0x1 PUSH2 0x972 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x1 ADD SLOAD DUP2 GT ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4594A70000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x676 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x67E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x710 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x739 SWAP2 SWAP1 PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x776 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x77B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x78C DUP8 DUP4 DUP4 DUP8 PUSH2 0x797 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x82D JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST POP DUP2 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x676 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x842 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x888 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x907 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x18B JUMPI PUSH2 0x18B PUSH2 0x90E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x18B JUMPI PUSH2 0x18B PUSH2 0x90E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x988 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9BB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x985 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9E4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x985 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xC8 EQ 0xF LOG0 CALLVALUE KECCAK256 0x2E ADDMOD LOG0 0xB3 PUSH27 0xD4BB713BE5FC4D1FF433CFEE0D47B6DD9495FF7964736F6C634300 ADDMOD XOR STOP CALLER ","sourceMap":"620:956:48:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;736:128:58;;;:::i;:::-;;;160:25:62;;;148:2;133:18;736:128:58;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;698:14:62;;691:22;673:41;;661:2;646:18;542:165:14;533:187:62;730:22:48;;;;;;;;;;;;916:42:62;904:55;;;886:74;;874:2;859:18;730:22:48;725:241:62;1365:209:48;;;;;;:::i;:::-;;:::i;:::-;;705:19;;;;;;;;;904:120:58;;;:::i;758:26:48:-;;;;;;;;;736:128:58;783:15;817:40;:28;:26;:28::i;:::-;4203:16:61;;4109:117;817:40:58;810:47;;736:128;:::o;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;1365:209:48:-;1417:13;1433:5;;;;:20;1454:16;:14;:16::i;:::-;1433:41;;;;;;;;;;;;;1944:25:62;;;;1472:1:48;1985:18:62;;;1978:34;1917:18;;1433:41:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1417:57;-1:-1:-1;1484:59:48;734:10:45;1524:11:48;;;1484:8;1524:11;1484:8;;;;:59;1524:11;1537:5;1484:25;:59::i;:::-;1553:14;1564:2;1553:10;:14::i;:::-;1407:167;1365:209;:::o;904:120:58:-;947:15;981:36;:28;:26;:28::i;:::-;4414:12:61;;;;4324:109;4439:174;4480:16;;1153:68;1220:1;1161:55;1153:68;:::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1355:203:43:-;1482:68;;;2746:42:62;2815:15;;;1482:68:43;;;2797:34:62;2867:15;;2847:18;;;2840:43;2899:18;;;;2892:34;;;1482:68:43;;;;;;;;;;2709:18:62;;;;1482:68:43;;;;;;;;;;1505:27;1482:68;;;1455:96;;1475:5;;1455:19;:96::i;:::-;1355:203;;;;:::o;601:95:58:-;652:37;686:2;652:28;:26;:28::i;:::-;:33;;:37::i;:::-;601:95;:::o;5196:642:43:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;3421:2:62;5720:111:43;;;3403:21:62;3460:2;3440:18;;;3433:30;3499:34;3479:18;;;3472:62;3570:12;3550:18;;;3543:40;3600:19;;5720:111:43;;;;;;;;;5266:572;5196:642;;:::o;3735:276:61:-;3815:16;;3798:14;;3815:20;;3834:1;3815:20;:::i;:::-;3798:37;;3858:1;:12;;;3849:6;:21;3845:91;;;3893:32;;;;;;;;;;;;;;3845:91;3945:7;;;;:24;;;;;:7;3952:55:62;;;3945:24:61;;;3934:74:62;4024:18;;;4017:34;;;3945:7:61;;;;:12;;3907:18:62;;3945:24:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3979:25:61;;-1:-1:-1;;3735:276:61:o;4108:223:44:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:44:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;4264:2:62;5354:81:44;;;4246:21:62;4303:2;4283:18;;;4276:30;4342:34;4322:18;;;4315:62;4413:8;4393:18;;;4386:36;4439:19;;5354:81:44;4062:402:62;5354:81:44;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:44:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;5218:2:62;8113:60:44;;;5200:21:62;5257:2;5237:18;;;5230:30;5296:31;5276:18;;;5269:59;5345:18;;8113:60:44;5016:353:62;8113:60:44;-1:-1:-1;8208:10:44;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;196:332:62:-;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;412:66;405:5;401:78;394:5;391:89;381:117;;494:1;491;484:12;381:117;517:5;196:332;-1:-1:-1;;;196:332:62:o;971:309::-;1030:6;1083:2;1071:9;1062:7;1058:23;1054:32;1051:52;;;1099:1;1096;1089:12;1051:52;1138:9;1125:23;1188:42;1181:5;1177:54;1170:5;1167:65;1157:93;;1246:1;1243;1236:12;2023:184;2093:6;2146:2;2134:9;2125:7;2121:23;2117:32;2114:52;;;2162:1;2159;2152:12;2114:52;-1:-1:-1;2185:16:62;;2023:184;-1:-1:-1;2023:184:62:o;2212:::-;2264:77;2261:1;2254:88;2361:4;2358:1;2351:15;2385:4;2382:1;2375:15;2401:128;2468:9;;;2489:11;;;2486:37;;;2503:18;;:::i;2937:277::-;3004:6;3057:2;3045:9;3036:7;3032:23;3028:32;3025:52;;;3073:1;3070;3063:12;3025:52;3105:9;3099:16;3158:5;3151:13;3144:21;3137:5;3134:32;3124:60;;3180:1;3177;3170:12;3630:125;3695:9;;;3716:10;;;3713:36;;;3729:18;;:::i;4469:250::-;4554:1;4564:113;4578:6;4575:1;4572:13;4564:113;;;4654:11;;;4648:18;4635:11;;;4628:39;4600:2;4593:10;4564:113;;;-1:-1:-1;;4711:1:62;4693:16;;4686:27;4469:250::o;4724:287::-;4853:3;4891:6;4885:13;4907:66;4966:6;4961:3;4954:4;4946:6;4942:17;4907:66;:::i;:::-;4989:16;;;;;4724:287;-1:-1:-1;;4724:287:62:o;5374:455::-;5523:2;5512:9;5505:21;5486:4;5555:6;5549:13;5598:6;5593:2;5582:9;5578:18;5571:34;5614:79;5686:6;5681:2;5670:9;5666:18;5661:2;5653:6;5649:15;5614:79;:::i;:::-;5745:2;5733:15;5750:66;5729:88;5714:104;;;;5820:2;5710:113;;5374:455;-1:-1:-1;;5374:455:62:o"},"gasEstimates":{"creation":{"codeDepositCost":"527200","executionCost":"infinite","totalCost":"infinite"},"external":{"currentTokenId()":"infinite","curve()":"2335","feeReceiver()":"2379","feeToken()":"2358","maxTokenId()":"infinite","mint(address)":"infinite","supportsInterface(bytes4)":"infinite"}},"methodIdentifiers":{"currentTokenId()":"009a9b7b","curve()":"7165485d","feeReceiver()":"b3f00674","feeToken()":"647846a5","maxTokenId()":"91ba317a","mint(address)":"6a627842","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Mintable\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721MinterMaxTokenIdExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"ERC721MinterUnsupportedContractType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MinterZeroMaxTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MinterZeroTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveContract\",\"type\":\"address\"}],\"name\":\"InvalidCurveContractType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentTokenId()\":{\"returns\":{\"tokenId\":\"The current token ID.\"}},\"maxTokenId()\":{\"returns\":{\"tokenId\":\"The maximum token ID.\"}},\"mint(address)\":{\"params\":{\"to\":\"The address to receive the token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721MinterMaxTokenIdExceeded()\":[{\"notice\":\"Thrown when the maximum token ID is exceeded.\"}],\"ERC721MinterUnsupportedContractType(address)\":[{\"notice\":\"Thrown when the token contract interface id does not supported.\"}],\"ERC721MinterZeroMaxTokenId()\":[{\"notice\":\"Thrown when the token ID is zero.\"}],\"ERC721MinterZeroTokenAddress()\":[{\"notice\":\"Thrown when the token address is zero.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"currentTokenId()\":{\"notice\":\"Returns the current token ID.\"},\"maxTokenId()\":{\"notice\":\"Returns the maximum token ID.\"},\"mint(address)\":{\"notice\":\"Mints a token to the specified address.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BCNFTMinter.sol\":\"BCNFTMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/BCNFTMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721Minter} from \\\"./lib/minter/ERC721/ERC721Minter.sol\\\";\\nimport {ICurve} from \\\"./lib/curve/interfaces/ICurve.sol\\\";\\n\\ncontract BCNFTMinter is ERC721Minter, Context {\\n    using SafeERC20 for IERC20;\\n\\n    ICurve public curve;\\n    IERC20 public feeToken;\\n    address public feeReceiver;\\n\\n    error InvalidCurveContractType(address curveContract);\\n\\n    error ZeroAddress();\\n\\n    constructor(ICurve _curve, IERC20 _feeToken, address _feeReceiver, uint256 maxTokenId, IERC721Mintable token) ERC721Minter(maxTokenId, token) {\\n        if (!IERC165(address(_curve)).supportsInterface(type(ICurve).interfaceId)) {\\n            revert InvalidCurveContractType(address(_curve));\\n        }\\n        curve = _curve;\\n        feeToken = _feeToken;\\n        if (_feeReceiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function mint(address to) public override {\\n        uint256 price = curve.calculatePrice(currentTokenId(), 1);\\n        feeToken.safeTransferFrom(_msgSender(), feeReceiver, price);\\n        super.mint(to);\\n    }\\n}\\n\",\"keccak256\":\"0x5d9030ae89d2ad6baf3da4b7cf994ca18ca7c0a1e522a779c3e0697e50ad79b6\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/ERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetection} from \\\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721MinterBase} from \\\"./base/ERC721MinterBase.sol\\\";\\nimport {ERC721MinterStorage} from \\\"./libraries/ERC721MinterStorage.sol\\\";\\n\\n/// @title ERC721 Minter contract (immutable version).\\nabstract contract ERC721Minter is ERC721MinterBase, InterfaceDetection {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    constructor(uint256 maxTokenId, IERC721Mintable token) {\\n        ERC721MinterStorage.layout().constructorInit(maxTokenId, token);\\n    }\\n}\\n\",\"keccak256\":\"0xb69d71d4d00f9bc9cc0b1d98a6ee6098694a11f986f9664d4f793f6f09e925a3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\nimport {ERC721MinterStorage} from \\\"../libraries/ERC721MinterStorage.sol\\\";\\n\\n/// @title ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721MinterBase is IERC721Minter {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n\\n    /// @inheritdoc IERC721Minter\\n    function mint(address to) public virtual {\\n        ERC721MinterStorage.layout().mint(to);\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function currentTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().currentId();\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function maxTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().maxId();\\n    }\\n}\\n\",\"keccak256\":\"0x37eb1e23835153a1cb01f2cbc9adeadb2cec50c272c28762c03265076acd2b4b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the token ID is zero.\\nerror ERC721MinterZeroMaxTokenId();\\n\\n/// @notice Thrown when the token address is zero.\\nerror ERC721MinterZeroTokenAddress();\\n\\n/// @notice Thrown when the token contract interface id does not supported.\\nerror ERC721MinterUnsupportedContractType(address tokenContract);\\n\\n/// @notice Thrown when the maximum token ID is exceeded.\\nerror ERC721MinterMaxTokenIdExceeded();\\n\",\"keccak256\":\"0x7626262f30f77f2d08fb90b9cd9e66689523fc1b6bb0f70da706949e4bf026c3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Minter interface for minting ERC721 tokens.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\\ninterface IERC721Minter {\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @param to The address to receive the token.\\n    function mint(address to) external;\\n}\\n\",\"keccak256\":\"0x5e903fc517cd0e8429fad955249edaf4d9e25a47c530872b0ab0ab1e505cc21b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721MinterZeroMaxTokenId, ERC721MinterUnsupportedContractType, ERC721MinterMaxTokenIdExceeded, ERC721MinterZeroTokenAddress} from \\\"../errors/ERC721MinterErrors.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\n\\nlibrary ERC721MinterStorage {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 currentTokenId;\\n        uint256 maxTokenId;\\n        IERC721Mintable token;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function constructorInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        if (maxTokenId == 0) {\\n            revert ERC721MinterZeroMaxTokenId();\\n        }\\n        if (address(token) == address(0)) {\\n            revert ERC721MinterZeroTokenAddress();\\n        }\\n\\n        if (!IERC165(address(token)).supportsInterface(type(IERC721Mintable).interfaceId)) {\\n            revert ERC721MinterUnsupportedContractType(address(token));\\n        }\\n        s.maxTokenId = maxTokenId;\\n        s.token = token;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Minter).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function proxyInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(maxTokenId, token);\\n    }\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\\n    /// @param to The address to which the token will be minted.\\n    function mint(Layout storage s, address to) internal {\\n        uint256 nextId = s.currentTokenId + 1;\\n        if (nextId > s.maxTokenId) {\\n            revert ERC721MinterMaxTokenIdExceeded();\\n        }\\n        s.token.mint(to, nextId);\\n        s.currentTokenId = nextId;\\n    }\\n\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.currentTokenId;\\n    }\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.maxTokenId;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeda0d8eac4ba8aa3ffd62fda5e840b18150a880f8d54b2bcc7f97589f62ff54e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4915,"contract":"contracts/BCNFTMinter.sol:BCNFTMinter","label":"curve","offset":0,"slot":"0","type":"t_contract(ICurve)5316"},{"astId":4918,"contract":"contracts/BCNFTMinter.sol:BCNFTMinter","label":"feeToken","offset":0,"slot":"1","type":"t_contract(IERC20)3965"},{"astId":4920,"contract":"contracts/BCNFTMinter.sol:BCNFTMinter","label":"feeReceiver","offset":0,"slot":"2","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ICurve)5316":{"encoding":"inplace","label":"contract ICurve","numberOfBytes":"20"},"t_contract(IERC20)3965":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"}}},"userdoc":{"errors":{"ERC721MinterMaxTokenIdExceeded()":[{"notice":"Thrown when the maximum token ID is exceeded."}],"ERC721MinterUnsupportedContractType(address)":[{"notice":"Thrown when the token contract interface id does not supported."}],"ERC721MinterZeroMaxTokenId()":[{"notice":"Thrown when the token ID is zero."}],"ERC721MinterZeroTokenAddress()":[{"notice":"Thrown when the token address is zero."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"currentTokenId()":{"notice":"Returns the current token ID."},"maxTokenId()":{"notice":"Returns the maximum token ID."},"mint(address)":{"notice":"Mints a token to the specified address."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"contracts/BondingCurve.sol":{"BondingCurve":{"abi":[{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"numerator","type":"uint256"},{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"LinearCurveZeroDenominator","type":"error"},{"inputs":[],"name":"LinearCurveZeroNumerator","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"InitialPriceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"denominator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeDenominatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"numerator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeNumeratorSet","type":"event"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"calculatePrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setInitialPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"setSlopeDenominator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"name":"setSlopeNumerator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slopeDenominator","outputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slopeNumerator","outputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"InitialPriceSet(uint256,address)":{"params":{"operator":"The address setting the initial price.","price":"The initial price."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"SlopeDenominatorSet(uint256,address)":{"params":{"denominator":"The slope denominator.","operator":"The address setting the slope denominator."}},"SlopeNumeratorSet(uint256,address)":{"params":{"numerator":"The slope numerator.","operator":"The address setting the slope numerator."}}},"kind":"dev","methods":{"calculatePrice(uint256,uint256)":{"details":"The price is calculated based on bonding curve mathematical function.","params":{"amount":"The amount of tokens to mint.","totalSupply":"The total supply of the tokens."}},"initialPrice()":{"returns":{"price":"The initial price."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setInitialPrice(uint256)":{"details":"Emits a {InitialPriceSet} event.","params":{"price":"The initial price."}},"setSlopeDenominator(uint256)":{"details":"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.","params":{"denominator":"The slope denominator."}},"setSlopeNumerator(uint256)":{"details":"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.","params":{"numerator":"The slope numerator."}},"slopeDenominator()":{"returns":{"denominator":"The slope denominator."}},"slopeNumerator()":{"returns":{"numerator":"The slope numerator."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5047":{"entryPoint":null,"id":5047,"parameterSlots":3,"returnSlots":0},"@_5097":{"entryPoint":null,"id":5097,"parameterSlots":4,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_msgSender_4719":{"entryPoint":null,"id":4719,"parameterSlots":0,"returnSlots":1},"@constructorInit_5475":{"entryPoint":346,"id":5475,"parameterSlots":5,"returnSlots":0},"@constructorInit_705":{"entryPoint":175,"id":705,"parameterSlots":2,"returnSlots":0},"@layout_1009":{"entryPoint":440,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_5677":{"entryPoint":298,"id":5677,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":121,"id":861,"parameterSlots":0,"returnSlots":1},"@setInitialPrice_5530":{"entryPoint":581,"id":5530,"parameterSlots":3,"returnSlots":0},"@setSlopeDenominator_5592":{"entryPoint":743,"id":5592,"parameterSlots":3,"returnSlots":0},"@setSlopeNumerator_5561":{"entryPoint":643,"id":5561,"parameterSlots":3,"returnSlots":0},"@setSupportedInterface_963":{"entryPoint":488,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory":{"entryPoint":843,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":890,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:552:62","nodeType":"YulBlock","src":"0:552:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"129:191:62","nodeType":"YulBlock","src":"129:191:62","statements":[{"body":{"nativeSrc":"175:16:62","nodeType":"YulBlock","src":"175:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"184:1:62","nodeType":"YulLiteral","src":"184:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"187:1:62","nodeType":"YulLiteral","src":"187:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"177:6:62","nodeType":"YulIdentifier","src":"177:6:62"},"nativeSrc":"177:12:62","nodeType":"YulFunctionCall","src":"177:12:62"},"nativeSrc":"177:12:62","nodeType":"YulExpressionStatement","src":"177:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"150:7:62","nodeType":"YulIdentifier","src":"150:7:62"},{"name":"headStart","nativeSrc":"159:9:62","nodeType":"YulIdentifier","src":"159:9:62"}],"functionName":{"name":"sub","nativeSrc":"146:3:62","nodeType":"YulIdentifier","src":"146:3:62"},"nativeSrc":"146:23:62","nodeType":"YulFunctionCall","src":"146:23:62"},{"kind":"number","nativeSrc":"171:2:62","nodeType":"YulLiteral","src":"171:2:62","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"142:3:62","nodeType":"YulIdentifier","src":"142:3:62"},"nativeSrc":"142:32:62","nodeType":"YulFunctionCall","src":"142:32:62"},"nativeSrc":"139:52:62","nodeType":"YulIf","src":"139:52:62"},{"nativeSrc":"200:26:62","nodeType":"YulAssignment","src":"200:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"216:9:62","nodeType":"YulIdentifier","src":"216:9:62"}],"functionName":{"name":"mload","nativeSrc":"210:5:62","nodeType":"YulIdentifier","src":"210:5:62"},"nativeSrc":"210:16:62","nodeType":"YulFunctionCall","src":"210:16:62"},"variableNames":[{"name":"value0","nativeSrc":"200:6:62","nodeType":"YulIdentifier","src":"200:6:62"}]},{"nativeSrc":"235:35:62","nodeType":"YulAssignment","src":"235:35:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"255:9:62","nodeType":"YulIdentifier","src":"255:9:62"},{"kind":"number","nativeSrc":"266:2:62","nodeType":"YulLiteral","src":"266:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"251:3:62","nodeType":"YulIdentifier","src":"251:3:62"},"nativeSrc":"251:18:62","nodeType":"YulFunctionCall","src":"251:18:62"}],"functionName":{"name":"mload","nativeSrc":"245:5:62","nodeType":"YulIdentifier","src":"245:5:62"},"nativeSrc":"245:25:62","nodeType":"YulFunctionCall","src":"245:25:62"},"variableNames":[{"name":"value1","nativeSrc":"235:6:62","nodeType":"YulIdentifier","src":"235:6:62"}]},{"nativeSrc":"279:35:62","nodeType":"YulAssignment","src":"279:35:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"299:9:62","nodeType":"YulIdentifier","src":"299:9:62"},{"kind":"number","nativeSrc":"310:2:62","nodeType":"YulLiteral","src":"310:2:62","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"295:3:62","nodeType":"YulIdentifier","src":"295:3:62"},"nativeSrc":"295:18:62","nodeType":"YulFunctionCall","src":"295:18:62"}],"functionName":{"name":"mload","nativeSrc":"289:5:62","nodeType":"YulIdentifier","src":"289:5:62"},"nativeSrc":"289:25:62","nodeType":"YulFunctionCall","src":"289:25:62"},"variableNames":[{"name":"value2","nativeSrc":"279:6:62","nodeType":"YulIdentifier","src":"279:6:62"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory","nativeSrc":"14:306:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"79:9:62","nodeType":"YulTypedName","src":"79:9:62","type":""},{"name":"dataEnd","nativeSrc":"90:7:62","nodeType":"YulTypedName","src":"90:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"102:6:62","nodeType":"YulTypedName","src":"102:6:62","type":""},{"name":"value1","nativeSrc":"110:6:62","nodeType":"YulTypedName","src":"110:6:62","type":""},{"name":"value2","nativeSrc":"118:6:62","nodeType":"YulTypedName","src":"118:6:62","type":""}],"src":"14:306:62"},{"body":{"nativeSrc":"374:176:62","nodeType":"YulBlock","src":"374:176:62","statements":[{"nativeSrc":"384:17:62","nodeType":"YulAssignment","src":"384:17:62","value":{"arguments":[{"name":"x","nativeSrc":"396:1:62","nodeType":"YulIdentifier","src":"396:1:62"},{"name":"y","nativeSrc":"399:1:62","nodeType":"YulIdentifier","src":"399:1:62"}],"functionName":{"name":"sub","nativeSrc":"392:3:62","nodeType":"YulIdentifier","src":"392:3:62"},"nativeSrc":"392:9:62","nodeType":"YulFunctionCall","src":"392:9:62"},"variableNames":[{"name":"diff","nativeSrc":"384:4:62","nodeType":"YulIdentifier","src":"384:4:62"}]},{"body":{"nativeSrc":"433:111:62","nodeType":"YulBlock","src":"433:111:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"454:1:62","nodeType":"YulLiteral","src":"454:1:62","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"461:3:62","nodeType":"YulLiteral","src":"461:3:62","type":"","value":"224"},{"kind":"number","nativeSrc":"466:10:62","nodeType":"YulLiteral","src":"466:10:62","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"457:3:62","nodeType":"YulIdentifier","src":"457:3:62"},"nativeSrc":"457:20:62","nodeType":"YulFunctionCall","src":"457:20:62"}],"functionName":{"name":"mstore","nativeSrc":"447:6:62","nodeType":"YulIdentifier","src":"447:6:62"},"nativeSrc":"447:31:62","nodeType":"YulFunctionCall","src":"447:31:62"},"nativeSrc":"447:31:62","nodeType":"YulExpressionStatement","src":"447:31:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"498:1:62","nodeType":"YulLiteral","src":"498:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"501:4:62","nodeType":"YulLiteral","src":"501:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"491:6:62","nodeType":"YulIdentifier","src":"491:6:62"},"nativeSrc":"491:15:62","nodeType":"YulFunctionCall","src":"491:15:62"},"nativeSrc":"491:15:62","nodeType":"YulExpressionStatement","src":"491:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"526:1:62","nodeType":"YulLiteral","src":"526:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"529:4:62","nodeType":"YulLiteral","src":"529:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"519:6:62","nodeType":"YulIdentifier","src":"519:6:62"},"nativeSrc":"519:15:62","nodeType":"YulFunctionCall","src":"519:15:62"},"nativeSrc":"519:15:62","nodeType":"YulExpressionStatement","src":"519:15:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"416:4:62","nodeType":"YulIdentifier","src":"416:4:62"},{"name":"x","nativeSrc":"422:1:62","nodeType":"YulIdentifier","src":"422:1:62"}],"functionName":{"name":"gt","nativeSrc":"413:2:62","nodeType":"YulIdentifier","src":"413:2:62"},"nativeSrc":"413:11:62","nodeType":"YulFunctionCall","src":"413:11:62"},"nativeSrc":"410:134:62","nodeType":"YulIf","src":"410:134:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"325:225:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"356:1:62","nodeType":"YulTypedName","src":"356:1:62","type":""},{"name":"y","nativeSrc":"359:1:62","nodeType":"YulTypedName","src":"359:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"365:4:62","nodeType":"YulTypedName","src":"365:4:62","type":""}],"src":"325:225:62"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000c9038038062000c9083398101604081905262000034916200034b565b33838383836200004f816200004862000079565b90620000af565b506200006c83838333620000626200012a565b939291906200015a565b505050505050506200039c565b600080620000a960017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200037a565b92915050565b6001600160a01b03811615620001065781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001266307f5828d60e41b60016200011e620001b8565b9190620001e8565b5050565b600080620000a960017f039d70c9b3f52605681bdc7fbd50a477b2d981df84c34b96fc10bf20b415c7386200037a565b6200016785858362000245565b6200017485848362000283565b62000181858383620002e7565b6200019963a6413a2760e01b60016200011e620001b8565b620001b1630704c2cb60e11b60016200011e620001b8565b5050505050565b600080620000a960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200037a565b600160e01b6001600160e01b031983160162000217576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b8183556040516001600160a01b0382169083907fc9743acbde4009119d240bc9a916fb878829a363cf97bf446e3b6ae6a942bf2e90600090a3505050565b81600003620002a557604051630dd2b83160e11b815260040160405180910390fd5b600183018290556040516001600160a01b0382169083907f57e9b94ca9a18b4ab6b4c06a7888ffbaf6d53a7902cea0c6084989d4b915544690600090a3505050565b816000036200030957604051633b61679f60e21b815260040160405180910390fd5b600283018290556040516001600160a01b0382169083907faf9c43ff06c74ca8197f8512b0129a3c1ab15740723f041fda4563e8332d7a0f90600090a3505050565b6000806000606084860312156200036157600080fd5b8351925060208401519150604084015190509250925092565b81810381811115620000a957634e487b7160e01b600052601160045260246000fd5b6108e480620003ac6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063a6413a271161005b578063a6413a2714610166578063d58ee47114610179578063f2fde38b1461018c57600080fd5b80638da5cb5b146101265780639f4ba0ee1461015357600080fd5b80631de7223b116100a75780631de7223b1461010157806321800fc31461011657806365a3ea5f1461011e57600080fd5b806301ffc9a7146100c35780631d0806ae146100eb575b600080fd5b6100d66100d1366004610754565b61019f565b60405190151581526020015b60405180910390f35b6100f36101b9565b6040519081526020016100e2565b61011461010f366004610796565b6101cf565b005b6100f36101fa565b6100f361020e565b61012e610222565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b610114610161366004610796565b610249565b6100f36101743660046107af565b61026a565b610114610187366004610796565b610287565b61011461019a3660046107d1565b6102a8565b60006101b3826101ad6102bf565b906102ed565b92915050565b60006101ca6101c66103c7565b5490565b905090565b336101e2816101dc6103f5565b90610423565b6101f682826101ef6103c7565b9190610493565b5050565b60006101ca6102076103c7565b6001015490565b60006101ca61021b6103c7565b6002015490565b60006101ca61022f6103f5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b33610256816101dc6103f5565b6101f682826102636103c7565b919061051c565b600061028083836102796103c7565b9190610567565b9392505050565b33610294816101dc6103f5565b6101f682826102a16103c7565b91906105b6565b6102bc33826102b56103f5565b919061063f565b50565b6000806101b360017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610836565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161033d575060006101b3565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161038e575060016101b3565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101b360017f039d70c9b3f52605681bdc7fbd50a477b2d981df84c34b96fc10bf20b415c738610836565b6000806101b360017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610836565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146101f6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b816000036104cd576040517f1ba5706200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830182905560405173ffffffffffffffffffffffffffffffffffffffff82169083907f57e9b94ca9a18b4ab6b4c06a7888ffbaf6d53a7902cea0c6084989d4b915544690600090a3505050565b81835560405173ffffffffffffffffffffffffffffffffffffffff82169083907fc9743acbde4009119d240bc9a916fb878829a363cf97bf446e3b6ae6a942bf2e90600090a3505050565b60008060016105768486610849565b6105809190610836565b90508460020154856001015482610597919061085c565b6105a19190610873565b85546105ad9190610849565b95945050505050565b816000036105f0576040517fed859e7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002830182905560405173ffffffffffffffffffffffffffffffffffffffff82169083907faf9c43ff06c74ca8197f8512b0129a3c1ab15740723f041fda4563e8332d7a0f90600090a3505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146106ac576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161048a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461074e5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60006020828403121561076657600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461028057600080fd5b6000602082840312156107a857600080fd5b5035919050565b600080604083850312156107c257600080fd5b50508035926020909101359150565b6000602082840312156107e357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461028057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156101b3576101b3610807565b808201808211156101b3576101b3610807565b80820281158282048414176101b3576101b3610807565b6000826108a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220b8a4fda3ed3a4a85b3951fd52fcce45689e6a1d0c33c85141243ac3ccba08e0864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xC90 CODESIZE SUB DUP1 PUSH3 0xC90 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x34B JUMP JUMPDEST CALLER DUP4 DUP4 DUP4 DUP4 PUSH3 0x4F DUP2 PUSH3 0x48 PUSH3 0x79 JUMP JUMPDEST SWAP1 PUSH3 0xAF JUMP JUMPDEST POP PUSH3 0x6C DUP4 DUP4 DUP4 CALLER PUSH3 0x62 PUSH3 0x12A JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x15A JUMP JUMPDEST POP POP POP POP POP POP POP PUSH3 0x39C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA9 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x37A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x106 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x126 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x11E PUSH3 0x1B8 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1E8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA9 PUSH1 0x1 PUSH32 0x39D70C9B3F52605681BDC7FBD50A477B2D981DF84C34B96FC10BF20B415C738 PUSH3 0x37A JUMP JUMPDEST PUSH3 0x167 DUP6 DUP6 DUP4 PUSH3 0x245 JUMP JUMPDEST PUSH3 0x174 DUP6 DUP5 DUP4 PUSH3 0x283 JUMP JUMPDEST PUSH3 0x181 DUP6 DUP4 DUP4 PUSH3 0x2E7 JUMP JUMPDEST PUSH3 0x199 PUSH4 0xA6413A27 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x11E PUSH3 0x1B8 JUMP JUMPDEST PUSH3 0x1B1 PUSH4 0x704C2CB PUSH1 0xE1 SHL PUSH1 0x1 PUSH3 0x11E PUSH3 0x1B8 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA9 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x37A JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x217 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP2 DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xC9743ACBDE4009119D240BC9A916FB878829A363CF97BF446E3B6AE6A942BF2E SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDD2B831 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0x57E9B94CA9A18B4AB6B4C06A7888FFBAF6D53A7902CEA0C6084989D4B9155446 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0x309 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B61679F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xAF9C43FF06C74CA8197F8512B0129A3C1AB15740723F041FDA4563E8332D7A0F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xA9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8E4 DUP1 PUSH3 0x3AC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xA6413A27 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA6413A27 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xD58EE471 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x9F4BA0EE EQ PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE7223B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x1DE7223B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x21800FC3 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x65A3EA5F EQ PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x1D0806AE EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x754 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF3 PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x1CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x1FA JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x20E JUMP JUMPDEST PUSH2 0x12E PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH2 0x114 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x287 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x19A CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B3 DUP3 PUSH2 0x1AD PUSH2 0x2BF JUMP JUMPDEST SWAP1 PUSH2 0x2ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x1C6 PUSH2 0x3C7 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH2 0x1E2 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST SWAP1 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x1EF PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x207 PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x21B PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x22F PUSH2 0x3F5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x256 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x263 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x51C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 DUP4 DUP4 PUSH2 0x279 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x567 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH2 0x294 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x2A1 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x2BC CALLER DUP3 PUSH2 0x2B5 PUSH2 0x3F5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x63F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x836 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x33D JUMPI POP PUSH1 0x0 PUSH2 0x1B3 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x38E JUMPI POP PUSH1 0x1 PUSH2 0x1B3 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0x39D70C9B3F52605681BDC7FBD50A477B2D981DF84C34B96FC10BF20B415C738 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x836 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x1BA5706200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0x57E9B94CA9A18B4AB6B4C06A7888FFBAF6D53A7902CEA0C6084989D4B9155446 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP2 DUP4 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xC9743ACBDE4009119D240BC9A916FB878829A363CF97BF446E3B6AE6A942BF2E SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x576 DUP5 DUP7 PUSH2 0x849 JUMP JUMPDEST PUSH2 0x580 SWAP2 SWAP1 PUSH2 0x836 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x2 ADD SLOAD DUP6 PUSH1 0x1 ADD SLOAD DUP3 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x873 JUMP JUMPDEST DUP6 SLOAD PUSH2 0x5AD SWAP2 SWAP1 PUSH2 0x849 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED859E7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xAF9C43FF06C74CA8197F8512B0129A3C1AB15740723F041FDA4563E8332D7A0F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x48A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x74E JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8A9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 LOG4 REVERT LOG3 0xED GASPRICE BLOBBASEFEE DUP6 0xB3 SWAP6 0x1F 0xD5 0x2F 0xCC 0xE4 JUMP DUP10 0xE6 LOG1 0xD0 0xC3 EXTCODECOPY DUP6 EQ SLT NUMBER 0xAC EXTCODECOPY 0xCB LOG0 DUP15 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"116:171:49:-:0;;;159:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:10:45;252:5:49;259:9;270:11;1417:12:50;1008:63:2;1417:12:50;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;1441:88:50::1;1485:5:::0;1492:9;1503:11;734:10:45;1441:27:50::1;:25;:27::i;:::-;:43:::0;:88;;;:43:::1;:88::i;:::-;1310:226:::0;;;;159:126:49;;;116:171;;5065:174:13;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:13:o;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;6198:174:56:-;6239:16;;956:60;1015:1;964:47;956:60;:::i;1878:482::-;2013:34;:1;2031:5;2038:8;2013:17;:34::i;:::-;2057:40;:1;2077:9;2088:8;2057:19;:40::i;:::-;2107:44;:1;2129:11;2142:8;2107:21;:44::i;:::-;2161:88;-1:-1:-1;;;2244:4:56;2161:34;:32;:34::i;:88::-;2259:94;-1:-1:-1;;;2348:4:56;2259:34;:32;:34::i;:94::-;1878:482;;;;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;3658:164:56:-;3753:15;;;3783:32;;-1:-1:-1;;;;;3783:32:56;;;3763:5;;3783:32;;3753:7;;3783:32;3658:164;;;:::o;4132:272::-;4237:9;4250:1;4237:14;4233:78;;4274:26;;-1:-1:-1;;;4274:26:56;;;;;;;;;;;4233:78;4321:11;;;:23;;;4359:38;;-1:-1:-1;;;;;4359:38:56;;;4335:9;;4359:38;;;;;4132:272;;;:::o;4726:288::-;4835:11;4850:1;4835:16;4831:82;;4874:28;;-1:-1:-1;;;4874:28:56;;;;;;;;;;;4831:82;4923:13;;;:27;;;4965:42;;-1:-1:-1;;;;;4965:42:56;;;4939:11;;4965:42;;;;;4726:288;;;:::o;14:306:62:-;102:6;110;118;171:2;159:9;150:7;146:23;142:32;139:52;;;187:1;184;177:12;139:52;216:9;210:16;200:26;;266:2;255:9;251:18;245:25;235:35;;310:2;299:9;295:18;289:25;279:35;;14:306;;;;;:::o;325:225::-;392:9;;;413:11;;;410:134;;;466:10;461:3;457:20;454:1;447:31;501:4;498:1;491:15;529:4;526:1;519:15;325:225;116:171:49;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_4719":{"entryPoint":null,"id":4719,"parameterSlots":0,"returnSlots":1},"@calculatePrice_5231":{"entryPoint":618,"id":5231,"parameterSlots":2,"returnSlots":1},"@calculatePrice_5626":{"entryPoint":1383,"id":5626,"parameterSlots":3,"returnSlots":1},"@enforceIsContractOwner_829":{"entryPoint":1059,"id":829,"parameterSlots":2,"returnSlots":0},"@initialPrice_5244":{"entryPoint":441,"id":5244,"parameterSlots":0,"returnSlots":1},"@initialPrice_5639":{"entryPoint":null,"id":5639,"parameterSlots":1,"returnSlots":1},"@layout_1009":{"entryPoint":703,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_5677":{"entryPoint":967,"id":5677,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":1013,"id":861,"parameterSlots":0,"returnSlots":1},"@owner_209":{"entryPoint":546,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@setInitialPrice_5154":{"entryPoint":585,"id":5154,"parameterSlots":1,"returnSlots":0},"@setInitialPrice_5530":{"entryPoint":1308,"id":5530,"parameterSlots":3,"returnSlots":0},"@setSlopeDenominator_5212":{"entryPoint":647,"id":5212,"parameterSlots":1,"returnSlots":0},"@setSlopeDenominator_5592":{"entryPoint":1462,"id":5592,"parameterSlots":3,"returnSlots":0},"@setSlopeNumerator_5183":{"entryPoint":463,"id":5183,"parameterSlots":1,"returnSlots":0},"@setSlopeNumerator_5561":{"entryPoint":1171,"id":5561,"parameterSlots":3,"returnSlots":0},"@slopeDenominator_5270":{"entryPoint":526,"id":5270,"parameterSlots":0,"returnSlots":1},"@slopeDenominator_5665":{"entryPoint":null,"id":5665,"parameterSlots":1,"returnSlots":1},"@slopeNumerator_5257":{"entryPoint":506,"id":5257,"parameterSlots":0,"returnSlots":1},"@slopeNumerator_5652":{"entryPoint":null,"id":5652,"parameterSlots":1,"returnSlots":1},"@supportsInterface_891":{"entryPoint":415,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":749,"id":997,"parameterSlots":2,"returnSlots":1},"@transferOwnership_226":{"entryPoint":680,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_769":{"entryPoint":1599,"id":769,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":2001,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":1876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":1967,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2121,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":2163,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2140,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2102,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":2055,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:2609:62","nodeType":"YulBlock","src":"0:2609:62","statements":[{"nativeSrc":"6:3:62","nodeType":"YulBlock","src":"6:3:62","statements":[]},{"body":{"nativeSrc":"83:263:62","nodeType":"YulBlock","src":"83:263:62","statements":[{"body":{"nativeSrc":"129:16:62","nodeType":"YulBlock","src":"129:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:62","nodeType":"YulLiteral","src":"138:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:62","nodeType":"YulLiteral","src":"141:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:62","nodeType":"YulIdentifier","src":"131:6:62"},"nativeSrc":"131:12:62","nodeType":"YulFunctionCall","src":"131:12:62"},"nativeSrc":"131:12:62","nodeType":"YulExpressionStatement","src":"131:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:62","nodeType":"YulIdentifier","src":"104:7:62"},{"name":"headStart","nativeSrc":"113:9:62","nodeType":"YulIdentifier","src":"113:9:62"}],"functionName":{"name":"sub","nativeSrc":"100:3:62","nodeType":"YulIdentifier","src":"100:3:62"},"nativeSrc":"100:23:62","nodeType":"YulFunctionCall","src":"100:23:62"},{"kind":"number","nativeSrc":"125:2:62","nodeType":"YulLiteral","src":"125:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:62","nodeType":"YulIdentifier","src":"96:3:62"},"nativeSrc":"96:32:62","nodeType":"YulFunctionCall","src":"96:32:62"},"nativeSrc":"93:52:62","nodeType":"YulIf","src":"93:52:62"},{"nativeSrc":"154:36:62","nodeType":"YulVariableDeclaration","src":"154:36:62","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:62","nodeType":"YulIdentifier","src":"180:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:62","nodeType":"YulIdentifier","src":"167:12:62"},"nativeSrc":"167:23:62","nodeType":"YulFunctionCall","src":"167:23:62"},"variables":[{"name":"value","nativeSrc":"158:5:62","nodeType":"YulTypedName","src":"158:5:62","type":""}]},{"body":{"nativeSrc":"300:16:62","nodeType":"YulBlock","src":"300:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:62","nodeType":"YulLiteral","src":"309:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:62","nodeType":"YulLiteral","src":"312:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:62","nodeType":"YulIdentifier","src":"302:6:62"},"nativeSrc":"302:12:62","nodeType":"YulFunctionCall","src":"302:12:62"},"nativeSrc":"302:12:62","nodeType":"YulExpressionStatement","src":"302:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:62","nodeType":"YulIdentifier","src":"212:5:62"},{"arguments":[{"name":"value","nativeSrc":"223:5:62","nodeType":"YulIdentifier","src":"223:5:62"},{"kind":"number","nativeSrc":"230:66:62","nodeType":"YulLiteral","src":"230:66:62","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:62","nodeType":"YulIdentifier","src":"219:3:62"},"nativeSrc":"219:78:62","nodeType":"YulFunctionCall","src":"219:78:62"}],"functionName":{"name":"eq","nativeSrc":"209:2:62","nodeType":"YulIdentifier","src":"209:2:62"},"nativeSrc":"209:89:62","nodeType":"YulFunctionCall","src":"209:89:62"}],"functionName":{"name":"iszero","nativeSrc":"202:6:62","nodeType":"YulIdentifier","src":"202:6:62"},"nativeSrc":"202:97:62","nodeType":"YulFunctionCall","src":"202:97:62"},"nativeSrc":"199:117:62","nodeType":"YulIf","src":"199:117:62"},{"nativeSrc":"325:15:62","nodeType":"YulAssignment","src":"325:15:62","value":{"name":"value","nativeSrc":"335:5:62","nodeType":"YulIdentifier","src":"335:5:62"},"variableNames":[{"name":"value0","nativeSrc":"325:6:62","nodeType":"YulIdentifier","src":"325:6:62"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:62","nodeType":"YulTypedName","src":"49:9:62","type":""},{"name":"dataEnd","nativeSrc":"60:7:62","nodeType":"YulTypedName","src":"60:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:62","nodeType":"YulTypedName","src":"72:6:62","type":""}],"src":"14:332:62"},{"body":{"nativeSrc":"446:92:62","nodeType":"YulBlock","src":"446:92:62","statements":[{"nativeSrc":"456:26:62","nodeType":"YulAssignment","src":"456:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:62","nodeType":"YulIdentifier","src":"468:9:62"},{"kind":"number","nativeSrc":"479:2:62","nodeType":"YulLiteral","src":"479:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:62","nodeType":"YulIdentifier","src":"464:3:62"},"nativeSrc":"464:18:62","nodeType":"YulFunctionCall","src":"464:18:62"},"variableNames":[{"name":"tail","nativeSrc":"456:4:62","nodeType":"YulIdentifier","src":"456:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:62","nodeType":"YulIdentifier","src":"498:9:62"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:62","nodeType":"YulIdentifier","src":"523:6:62"}],"functionName":{"name":"iszero","nativeSrc":"516:6:62","nodeType":"YulIdentifier","src":"516:6:62"},"nativeSrc":"516:14:62","nodeType":"YulFunctionCall","src":"516:14:62"}],"functionName":{"name":"iszero","nativeSrc":"509:6:62","nodeType":"YulIdentifier","src":"509:6:62"},"nativeSrc":"509:22:62","nodeType":"YulFunctionCall","src":"509:22:62"}],"functionName":{"name":"mstore","nativeSrc":"491:6:62","nodeType":"YulIdentifier","src":"491:6:62"},"nativeSrc":"491:41:62","nodeType":"YulFunctionCall","src":"491:41:62"},"nativeSrc":"491:41:62","nodeType":"YulExpressionStatement","src":"491:41:62"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:62","nodeType":"YulTypedName","src":"415:9:62","type":""},{"name":"value0","nativeSrc":"426:6:62","nodeType":"YulTypedName","src":"426:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:62","nodeType":"YulTypedName","src":"437:4:62","type":""}],"src":"351:187:62"},{"body":{"nativeSrc":"644:76:62","nodeType":"YulBlock","src":"644:76:62","statements":[{"nativeSrc":"654:26:62","nodeType":"YulAssignment","src":"654:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:62","nodeType":"YulIdentifier","src":"666:9:62"},{"kind":"number","nativeSrc":"677:2:62","nodeType":"YulLiteral","src":"677:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:62","nodeType":"YulIdentifier","src":"662:3:62"},"nativeSrc":"662:18:62","nodeType":"YulFunctionCall","src":"662:18:62"},"variableNames":[{"name":"tail","nativeSrc":"654:4:62","nodeType":"YulIdentifier","src":"654:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:62","nodeType":"YulIdentifier","src":"696:9:62"},{"name":"value0","nativeSrc":"707:6:62","nodeType":"YulIdentifier","src":"707:6:62"}],"functionName":{"name":"mstore","nativeSrc":"689:6:62","nodeType":"YulIdentifier","src":"689:6:62"},"nativeSrc":"689:25:62","nodeType":"YulFunctionCall","src":"689:25:62"},"nativeSrc":"689:25:62","nodeType":"YulExpressionStatement","src":"689:25:62"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:62","nodeType":"YulTypedName","src":"613:9:62","type":""},{"name":"value0","nativeSrc":"624:6:62","nodeType":"YulTypedName","src":"624:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:62","nodeType":"YulTypedName","src":"635:4:62","type":""}],"src":"543:177:62"},{"body":{"nativeSrc":"795:110:62","nodeType":"YulBlock","src":"795:110:62","statements":[{"body":{"nativeSrc":"841:16:62","nodeType":"YulBlock","src":"841:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"850:1:62","nodeType":"YulLiteral","src":"850:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"853:1:62","nodeType":"YulLiteral","src":"853:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"843:6:62","nodeType":"YulIdentifier","src":"843:6:62"},"nativeSrc":"843:12:62","nodeType":"YulFunctionCall","src":"843:12:62"},"nativeSrc":"843:12:62","nodeType":"YulExpressionStatement","src":"843:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"816:7:62","nodeType":"YulIdentifier","src":"816:7:62"},{"name":"headStart","nativeSrc":"825:9:62","nodeType":"YulIdentifier","src":"825:9:62"}],"functionName":{"name":"sub","nativeSrc":"812:3:62","nodeType":"YulIdentifier","src":"812:3:62"},"nativeSrc":"812:23:62","nodeType":"YulFunctionCall","src":"812:23:62"},{"kind":"number","nativeSrc":"837:2:62","nodeType":"YulLiteral","src":"837:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"808:3:62","nodeType":"YulIdentifier","src":"808:3:62"},"nativeSrc":"808:32:62","nodeType":"YulFunctionCall","src":"808:32:62"},"nativeSrc":"805:52:62","nodeType":"YulIf","src":"805:52:62"},{"nativeSrc":"866:33:62","nodeType":"YulAssignment","src":"866:33:62","value":{"arguments":[{"name":"headStart","nativeSrc":"889:9:62","nodeType":"YulIdentifier","src":"889:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"876:12:62","nodeType":"YulIdentifier","src":"876:12:62"},"nativeSrc":"876:23:62","nodeType":"YulFunctionCall","src":"876:23:62"},"variableNames":[{"name":"value0","nativeSrc":"866:6:62","nodeType":"YulIdentifier","src":"866:6:62"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"725:180:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"761:9:62","nodeType":"YulTypedName","src":"761:9:62","type":""},{"name":"dataEnd","nativeSrc":"772:7:62","nodeType":"YulTypedName","src":"772:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"784:6:62","nodeType":"YulTypedName","src":"784:6:62","type":""}],"src":"725:180:62"},{"body":{"nativeSrc":"1011:125:62","nodeType":"YulBlock","src":"1011:125:62","statements":[{"nativeSrc":"1021:26:62","nodeType":"YulAssignment","src":"1021:26:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1033:9:62","nodeType":"YulIdentifier","src":"1033:9:62"},{"kind":"number","nativeSrc":"1044:2:62","nodeType":"YulLiteral","src":"1044:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1029:3:62","nodeType":"YulIdentifier","src":"1029:3:62"},"nativeSrc":"1029:18:62","nodeType":"YulFunctionCall","src":"1029:18:62"},"variableNames":[{"name":"tail","nativeSrc":"1021:4:62","nodeType":"YulIdentifier","src":"1021:4:62"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1063:9:62","nodeType":"YulIdentifier","src":"1063:9:62"},{"arguments":[{"name":"value0","nativeSrc":"1078:6:62","nodeType":"YulIdentifier","src":"1078:6:62"},{"kind":"number","nativeSrc":"1086:42:62","nodeType":"YulLiteral","src":"1086:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1074:3:62","nodeType":"YulIdentifier","src":"1074:3:62"},"nativeSrc":"1074:55:62","nodeType":"YulFunctionCall","src":"1074:55:62"}],"functionName":{"name":"mstore","nativeSrc":"1056:6:62","nodeType":"YulIdentifier","src":"1056:6:62"},"nativeSrc":"1056:74:62","nodeType":"YulFunctionCall","src":"1056:74:62"},"nativeSrc":"1056:74:62","nodeType":"YulExpressionStatement","src":"1056:74:62"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"910:226:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"980:9:62","nodeType":"YulTypedName","src":"980:9:62","type":""},{"name":"value0","nativeSrc":"991:6:62","nodeType":"YulTypedName","src":"991:6:62","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1002:4:62","nodeType":"YulTypedName","src":"1002:4:62","type":""}],"src":"910:226:62"},{"body":{"nativeSrc":"1228:161:62","nodeType":"YulBlock","src":"1228:161:62","statements":[{"body":{"nativeSrc":"1274:16:62","nodeType":"YulBlock","src":"1274:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1283:1:62","nodeType":"YulLiteral","src":"1283:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1286:1:62","nodeType":"YulLiteral","src":"1286:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1276:6:62","nodeType":"YulIdentifier","src":"1276:6:62"},"nativeSrc":"1276:12:62","nodeType":"YulFunctionCall","src":"1276:12:62"},"nativeSrc":"1276:12:62","nodeType":"YulExpressionStatement","src":"1276:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1249:7:62","nodeType":"YulIdentifier","src":"1249:7:62"},{"name":"headStart","nativeSrc":"1258:9:62","nodeType":"YulIdentifier","src":"1258:9:62"}],"functionName":{"name":"sub","nativeSrc":"1245:3:62","nodeType":"YulIdentifier","src":"1245:3:62"},"nativeSrc":"1245:23:62","nodeType":"YulFunctionCall","src":"1245:23:62"},{"kind":"number","nativeSrc":"1270:2:62","nodeType":"YulLiteral","src":"1270:2:62","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1241:3:62","nodeType":"YulIdentifier","src":"1241:3:62"},"nativeSrc":"1241:32:62","nodeType":"YulFunctionCall","src":"1241:32:62"},"nativeSrc":"1238:52:62","nodeType":"YulIf","src":"1238:52:62"},{"nativeSrc":"1299:33:62","nodeType":"YulAssignment","src":"1299:33:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1322:9:62","nodeType":"YulIdentifier","src":"1322:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"1309:12:62","nodeType":"YulIdentifier","src":"1309:12:62"},"nativeSrc":"1309:23:62","nodeType":"YulFunctionCall","src":"1309:23:62"},"variableNames":[{"name":"value0","nativeSrc":"1299:6:62","nodeType":"YulIdentifier","src":"1299:6:62"}]},{"nativeSrc":"1341:42:62","nodeType":"YulAssignment","src":"1341:42:62","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1368:9:62","nodeType":"YulIdentifier","src":"1368:9:62"},{"kind":"number","nativeSrc":"1379:2:62","nodeType":"YulLiteral","src":"1379:2:62","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1364:3:62","nodeType":"YulIdentifier","src":"1364:3:62"},"nativeSrc":"1364:18:62","nodeType":"YulFunctionCall","src":"1364:18:62"}],"functionName":{"name":"calldataload","nativeSrc":"1351:12:62","nodeType":"YulIdentifier","src":"1351:12:62"},"nativeSrc":"1351:32:62","nodeType":"YulFunctionCall","src":"1351:32:62"},"variableNames":[{"name":"value1","nativeSrc":"1341:6:62","nodeType":"YulIdentifier","src":"1341:6:62"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"1141:248:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1186:9:62","nodeType":"YulTypedName","src":"1186:9:62","type":""},{"name":"dataEnd","nativeSrc":"1197:7:62","nodeType":"YulTypedName","src":"1197:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1209:6:62","nodeType":"YulTypedName","src":"1209:6:62","type":""},{"name":"value1","nativeSrc":"1217:6:62","nodeType":"YulTypedName","src":"1217:6:62","type":""}],"src":"1141:248:62"},{"body":{"nativeSrc":"1464:239:62","nodeType":"YulBlock","src":"1464:239:62","statements":[{"body":{"nativeSrc":"1510:16:62","nodeType":"YulBlock","src":"1510:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1519:1:62","nodeType":"YulLiteral","src":"1519:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1522:1:62","nodeType":"YulLiteral","src":"1522:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1512:6:62","nodeType":"YulIdentifier","src":"1512:6:62"},"nativeSrc":"1512:12:62","nodeType":"YulFunctionCall","src":"1512:12:62"},"nativeSrc":"1512:12:62","nodeType":"YulExpressionStatement","src":"1512:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1485:7:62","nodeType":"YulIdentifier","src":"1485:7:62"},{"name":"headStart","nativeSrc":"1494:9:62","nodeType":"YulIdentifier","src":"1494:9:62"}],"functionName":{"name":"sub","nativeSrc":"1481:3:62","nodeType":"YulIdentifier","src":"1481:3:62"},"nativeSrc":"1481:23:62","nodeType":"YulFunctionCall","src":"1481:23:62"},{"kind":"number","nativeSrc":"1506:2:62","nodeType":"YulLiteral","src":"1506:2:62","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1477:3:62","nodeType":"YulIdentifier","src":"1477:3:62"},"nativeSrc":"1477:32:62","nodeType":"YulFunctionCall","src":"1477:32:62"},"nativeSrc":"1474:52:62","nodeType":"YulIf","src":"1474:52:62"},{"nativeSrc":"1535:36:62","nodeType":"YulVariableDeclaration","src":"1535:36:62","value":{"arguments":[{"name":"headStart","nativeSrc":"1561:9:62","nodeType":"YulIdentifier","src":"1561:9:62"}],"functionName":{"name":"calldataload","nativeSrc":"1548:12:62","nodeType":"YulIdentifier","src":"1548:12:62"},"nativeSrc":"1548:23:62","nodeType":"YulFunctionCall","src":"1548:23:62"},"variables":[{"name":"value","nativeSrc":"1539:5:62","nodeType":"YulTypedName","src":"1539:5:62","type":""}]},{"body":{"nativeSrc":"1657:16:62","nodeType":"YulBlock","src":"1657:16:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1666:1:62","nodeType":"YulLiteral","src":"1666:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1669:1:62","nodeType":"YulLiteral","src":"1669:1:62","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1659:6:62","nodeType":"YulIdentifier","src":"1659:6:62"},"nativeSrc":"1659:12:62","nodeType":"YulFunctionCall","src":"1659:12:62"},"nativeSrc":"1659:12:62","nodeType":"YulExpressionStatement","src":"1659:12:62"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1593:5:62","nodeType":"YulIdentifier","src":"1593:5:62"},{"arguments":[{"name":"value","nativeSrc":"1604:5:62","nodeType":"YulIdentifier","src":"1604:5:62"},{"kind":"number","nativeSrc":"1611:42:62","nodeType":"YulLiteral","src":"1611:42:62","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1600:3:62","nodeType":"YulIdentifier","src":"1600:3:62"},"nativeSrc":"1600:54:62","nodeType":"YulFunctionCall","src":"1600:54:62"}],"functionName":{"name":"eq","nativeSrc":"1590:2:62","nodeType":"YulIdentifier","src":"1590:2:62"},"nativeSrc":"1590:65:62","nodeType":"YulFunctionCall","src":"1590:65:62"}],"functionName":{"name":"iszero","nativeSrc":"1583:6:62","nodeType":"YulIdentifier","src":"1583:6:62"},"nativeSrc":"1583:73:62","nodeType":"YulFunctionCall","src":"1583:73:62"},"nativeSrc":"1580:93:62","nodeType":"YulIf","src":"1580:93:62"},{"nativeSrc":"1682:15:62","nodeType":"YulAssignment","src":"1682:15:62","value":{"name":"value","nativeSrc":"1692:5:62","nodeType":"YulIdentifier","src":"1692:5:62"},"variableNames":[{"name":"value0","nativeSrc":"1682:6:62","nodeType":"YulIdentifier","src":"1682:6:62"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1394:309:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1430:9:62","nodeType":"YulTypedName","src":"1430:9:62","type":""},{"name":"dataEnd","nativeSrc":"1441:7:62","nodeType":"YulTypedName","src":"1441:7:62","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1453:6:62","nodeType":"YulTypedName","src":"1453:6:62","type":""}],"src":"1394:309:62"},{"body":{"nativeSrc":"1740:152:62","nodeType":"YulBlock","src":"1740:152:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1757:1:62","nodeType":"YulLiteral","src":"1757:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1760:77:62","nodeType":"YulLiteral","src":"1760:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1750:6:62","nodeType":"YulIdentifier","src":"1750:6:62"},"nativeSrc":"1750:88:62","nodeType":"YulFunctionCall","src":"1750:88:62"},"nativeSrc":"1750:88:62","nodeType":"YulExpressionStatement","src":"1750:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1854:1:62","nodeType":"YulLiteral","src":"1854:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"1857:4:62","nodeType":"YulLiteral","src":"1857:4:62","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1847:6:62","nodeType":"YulIdentifier","src":"1847:6:62"},"nativeSrc":"1847:15:62","nodeType":"YulFunctionCall","src":"1847:15:62"},"nativeSrc":"1847:15:62","nodeType":"YulExpressionStatement","src":"1847:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1878:1:62","nodeType":"YulLiteral","src":"1878:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"1881:4:62","nodeType":"YulLiteral","src":"1881:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1871:6:62","nodeType":"YulIdentifier","src":"1871:6:62"},"nativeSrc":"1871:15:62","nodeType":"YulFunctionCall","src":"1871:15:62"},"nativeSrc":"1871:15:62","nodeType":"YulExpressionStatement","src":"1871:15:62"}]},"name":"panic_error_0x11","nativeSrc":"1708:184:62","nodeType":"YulFunctionDefinition","src":"1708:184:62"},{"body":{"nativeSrc":"1946:79:62","nodeType":"YulBlock","src":"1946:79:62","statements":[{"nativeSrc":"1956:17:62","nodeType":"YulAssignment","src":"1956:17:62","value":{"arguments":[{"name":"x","nativeSrc":"1968:1:62","nodeType":"YulIdentifier","src":"1968:1:62"},{"name":"y","nativeSrc":"1971:1:62","nodeType":"YulIdentifier","src":"1971:1:62"}],"functionName":{"name":"sub","nativeSrc":"1964:3:62","nodeType":"YulIdentifier","src":"1964:3:62"},"nativeSrc":"1964:9:62","nodeType":"YulFunctionCall","src":"1964:9:62"},"variableNames":[{"name":"diff","nativeSrc":"1956:4:62","nodeType":"YulIdentifier","src":"1956:4:62"}]},{"body":{"nativeSrc":"1997:22:62","nodeType":"YulBlock","src":"1997:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"1999:16:62","nodeType":"YulIdentifier","src":"1999:16:62"},"nativeSrc":"1999:18:62","nodeType":"YulFunctionCall","src":"1999:18:62"},"nativeSrc":"1999:18:62","nodeType":"YulExpressionStatement","src":"1999:18:62"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1988:4:62","nodeType":"YulIdentifier","src":"1988:4:62"},{"name":"x","nativeSrc":"1994:1:62","nodeType":"YulIdentifier","src":"1994:1:62"}],"functionName":{"name":"gt","nativeSrc":"1985:2:62","nodeType":"YulIdentifier","src":"1985:2:62"},"nativeSrc":"1985:11:62","nodeType":"YulFunctionCall","src":"1985:11:62"},"nativeSrc":"1982:37:62","nodeType":"YulIf","src":"1982:37:62"}]},"name":"checked_sub_t_uint256","nativeSrc":"1897:128:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1928:1:62","nodeType":"YulTypedName","src":"1928:1:62","type":""},{"name":"y","nativeSrc":"1931:1:62","nodeType":"YulTypedName","src":"1931:1:62","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1937:4:62","nodeType":"YulTypedName","src":"1937:4:62","type":""}],"src":"1897:128:62"},{"body":{"nativeSrc":"2078:77:62","nodeType":"YulBlock","src":"2078:77:62","statements":[{"nativeSrc":"2088:16:62","nodeType":"YulAssignment","src":"2088:16:62","value":{"arguments":[{"name":"x","nativeSrc":"2099:1:62","nodeType":"YulIdentifier","src":"2099:1:62"},{"name":"y","nativeSrc":"2102:1:62","nodeType":"YulIdentifier","src":"2102:1:62"}],"functionName":{"name":"add","nativeSrc":"2095:3:62","nodeType":"YulIdentifier","src":"2095:3:62"},"nativeSrc":"2095:9:62","nodeType":"YulFunctionCall","src":"2095:9:62"},"variableNames":[{"name":"sum","nativeSrc":"2088:3:62","nodeType":"YulIdentifier","src":"2088:3:62"}]},{"body":{"nativeSrc":"2127:22:62","nodeType":"YulBlock","src":"2127:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"2129:16:62","nodeType":"YulIdentifier","src":"2129:16:62"},"nativeSrc":"2129:18:62","nodeType":"YulFunctionCall","src":"2129:18:62"},"nativeSrc":"2129:18:62","nodeType":"YulExpressionStatement","src":"2129:18:62"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"2119:1:62","nodeType":"YulIdentifier","src":"2119:1:62"},{"name":"sum","nativeSrc":"2122:3:62","nodeType":"YulIdentifier","src":"2122:3:62"}],"functionName":{"name":"gt","nativeSrc":"2116:2:62","nodeType":"YulIdentifier","src":"2116:2:62"},"nativeSrc":"2116:10:62","nodeType":"YulFunctionCall","src":"2116:10:62"},"nativeSrc":"2113:36:62","nodeType":"YulIf","src":"2113:36:62"}]},"name":"checked_add_t_uint256","nativeSrc":"2030:125:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2061:1:62","nodeType":"YulTypedName","src":"2061:1:62","type":""},{"name":"y","nativeSrc":"2064:1:62","nodeType":"YulTypedName","src":"2064:1:62","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"2070:3:62","nodeType":"YulTypedName","src":"2070:3:62","type":""}],"src":"2030:125:62"},{"body":{"nativeSrc":"2212:116:62","nodeType":"YulBlock","src":"2212:116:62","statements":[{"nativeSrc":"2222:20:62","nodeType":"YulAssignment","src":"2222:20:62","value":{"arguments":[{"name":"x","nativeSrc":"2237:1:62","nodeType":"YulIdentifier","src":"2237:1:62"},{"name":"y","nativeSrc":"2240:1:62","nodeType":"YulIdentifier","src":"2240:1:62"}],"functionName":{"name":"mul","nativeSrc":"2233:3:62","nodeType":"YulIdentifier","src":"2233:3:62"},"nativeSrc":"2233:9:62","nodeType":"YulFunctionCall","src":"2233:9:62"},"variableNames":[{"name":"product","nativeSrc":"2222:7:62","nodeType":"YulIdentifier","src":"2222:7:62"}]},{"body":{"nativeSrc":"2300:22:62","nodeType":"YulBlock","src":"2300:22:62","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"2302:16:62","nodeType":"YulIdentifier","src":"2302:16:62"},"nativeSrc":"2302:18:62","nodeType":"YulFunctionCall","src":"2302:18:62"},"nativeSrc":"2302:18:62","nodeType":"YulExpressionStatement","src":"2302:18:62"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"2271:1:62","nodeType":"YulIdentifier","src":"2271:1:62"}],"functionName":{"name":"iszero","nativeSrc":"2264:6:62","nodeType":"YulIdentifier","src":"2264:6:62"},"nativeSrc":"2264:9:62","nodeType":"YulFunctionCall","src":"2264:9:62"},{"arguments":[{"name":"y","nativeSrc":"2278:1:62","nodeType":"YulIdentifier","src":"2278:1:62"},{"arguments":[{"name":"product","nativeSrc":"2285:7:62","nodeType":"YulIdentifier","src":"2285:7:62"},{"name":"x","nativeSrc":"2294:1:62","nodeType":"YulIdentifier","src":"2294:1:62"}],"functionName":{"name":"div","nativeSrc":"2281:3:62","nodeType":"YulIdentifier","src":"2281:3:62"},"nativeSrc":"2281:15:62","nodeType":"YulFunctionCall","src":"2281:15:62"}],"functionName":{"name":"eq","nativeSrc":"2275:2:62","nodeType":"YulIdentifier","src":"2275:2:62"},"nativeSrc":"2275:22:62","nodeType":"YulFunctionCall","src":"2275:22:62"}],"functionName":{"name":"or","nativeSrc":"2261:2:62","nodeType":"YulIdentifier","src":"2261:2:62"},"nativeSrc":"2261:37:62","nodeType":"YulFunctionCall","src":"2261:37:62"}],"functionName":{"name":"iszero","nativeSrc":"2254:6:62","nodeType":"YulIdentifier","src":"2254:6:62"},"nativeSrc":"2254:45:62","nodeType":"YulFunctionCall","src":"2254:45:62"},"nativeSrc":"2251:71:62","nodeType":"YulIf","src":"2251:71:62"}]},"name":"checked_mul_t_uint256","nativeSrc":"2160:168:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2191:1:62","nodeType":"YulTypedName","src":"2191:1:62","type":""},{"name":"y","nativeSrc":"2194:1:62","nodeType":"YulTypedName","src":"2194:1:62","type":""}],"returnVariables":[{"name":"product","nativeSrc":"2200:7:62","nodeType":"YulTypedName","src":"2200:7:62","type":""}],"src":"2160:168:62"},{"body":{"nativeSrc":"2379:228:62","nodeType":"YulBlock","src":"2379:228:62","statements":[{"body":{"nativeSrc":"2410:168:62","nodeType":"YulBlock","src":"2410:168:62","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2431:1:62","nodeType":"YulLiteral","src":"2431:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2434:77:62","nodeType":"YulLiteral","src":"2434:77:62","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2424:6:62","nodeType":"YulIdentifier","src":"2424:6:62"},"nativeSrc":"2424:88:62","nodeType":"YulFunctionCall","src":"2424:88:62"},"nativeSrc":"2424:88:62","nodeType":"YulExpressionStatement","src":"2424:88:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2532:1:62","nodeType":"YulLiteral","src":"2532:1:62","type":"","value":"4"},{"kind":"number","nativeSrc":"2535:4:62","nodeType":"YulLiteral","src":"2535:4:62","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"2525:6:62","nodeType":"YulIdentifier","src":"2525:6:62"},"nativeSrc":"2525:15:62","nodeType":"YulFunctionCall","src":"2525:15:62"},"nativeSrc":"2525:15:62","nodeType":"YulExpressionStatement","src":"2525:15:62"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2560:1:62","nodeType":"YulLiteral","src":"2560:1:62","type":"","value":"0"},{"kind":"number","nativeSrc":"2563:4:62","nodeType":"YulLiteral","src":"2563:4:62","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2553:6:62","nodeType":"YulIdentifier","src":"2553:6:62"},"nativeSrc":"2553:15:62","nodeType":"YulFunctionCall","src":"2553:15:62"},"nativeSrc":"2553:15:62","nodeType":"YulExpressionStatement","src":"2553:15:62"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"2399:1:62","nodeType":"YulIdentifier","src":"2399:1:62"}],"functionName":{"name":"iszero","nativeSrc":"2392:6:62","nodeType":"YulIdentifier","src":"2392:6:62"},"nativeSrc":"2392:9:62","nodeType":"YulFunctionCall","src":"2392:9:62"},"nativeSrc":"2389:189:62","nodeType":"YulIf","src":"2389:189:62"},{"nativeSrc":"2587:14:62","nodeType":"YulAssignment","src":"2587:14:62","value":{"arguments":[{"name":"x","nativeSrc":"2596:1:62","nodeType":"YulIdentifier","src":"2596:1:62"},{"name":"y","nativeSrc":"2599:1:62","nodeType":"YulIdentifier","src":"2599:1:62"}],"functionName":{"name":"div","nativeSrc":"2592:3:62","nodeType":"YulIdentifier","src":"2592:3:62"},"nativeSrc":"2592:9:62","nodeType":"YulFunctionCall","src":"2592:9:62"},"variableNames":[{"name":"r","nativeSrc":"2587:1:62","nodeType":"YulIdentifier","src":"2587:1:62"}]}]},"name":"checked_div_t_uint256","nativeSrc":"2333:274:62","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2364:1:62","nodeType":"YulTypedName","src":"2364:1:62","type":""},{"name":"y","nativeSrc":"2367:1:62","nodeType":"YulTypedName","src":"2367:1:62","type":""}],"returnVariables":[{"name":"r","nativeSrc":"2373:1:62","nodeType":"YulTypedName","src":"2373:1:62","type":""}],"src":"2333:274:62"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}","id":62,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063a6413a271161005b578063a6413a2714610166578063d58ee47114610179578063f2fde38b1461018c57600080fd5b80638da5cb5b146101265780639f4ba0ee1461015357600080fd5b80631de7223b116100a75780631de7223b1461010157806321800fc31461011657806365a3ea5f1461011e57600080fd5b806301ffc9a7146100c35780631d0806ae146100eb575b600080fd5b6100d66100d1366004610754565b61019f565b60405190151581526020015b60405180910390f35b6100f36101b9565b6040519081526020016100e2565b61011461010f366004610796565b6101cf565b005b6100f36101fa565b6100f361020e565b61012e610222565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b610114610161366004610796565b610249565b6100f36101743660046107af565b61026a565b610114610187366004610796565b610287565b61011461019a3660046107d1565b6102a8565b60006101b3826101ad6102bf565b906102ed565b92915050565b60006101ca6101c66103c7565b5490565b905090565b336101e2816101dc6103f5565b90610423565b6101f682826101ef6103c7565b9190610493565b5050565b60006101ca6102076103c7565b6001015490565b60006101ca61021b6103c7565b6002015490565b60006101ca61022f6103f5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b33610256816101dc6103f5565b6101f682826102636103c7565b919061051c565b600061028083836102796103c7565b9190610567565b9392505050565b33610294816101dc6103f5565b6101f682826102a16103c7565b91906105b6565b6102bc33826102b56103f5565b919061063f565b50565b6000806101b360017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610836565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161033d575060006101b3565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161038e575060016101b3565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101b360017f039d70c9b3f52605681bdc7fbd50a477b2d981df84c34b96fc10bf20b415c738610836565b6000806101b360017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610836565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146101f6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b816000036104cd576040517f1ba5706200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830182905560405173ffffffffffffffffffffffffffffffffffffffff82169083907f57e9b94ca9a18b4ab6b4c06a7888ffbaf6d53a7902cea0c6084989d4b915544690600090a3505050565b81835560405173ffffffffffffffffffffffffffffffffffffffff82169083907fc9743acbde4009119d240bc9a916fb878829a363cf97bf446e3b6ae6a942bf2e90600090a3505050565b60008060016105768486610849565b6105809190610836565b90508460020154856001015482610597919061085c565b6105a19190610873565b85546105ad9190610849565b95945050505050565b816000036105f0576040517fed859e7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002830182905560405173ffffffffffffffffffffffffffffffffffffffff82169083907faf9c43ff06c74ca8197f8512b0129a3c1ab15740723f041fda4563e8332d7a0f90600090a3505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146106ac576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161048a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461074e5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60006020828403121561076657600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461028057600080fd5b6000602082840312156107a857600080fd5b5035919050565b600080604083850312156107c257600080fd5b50508035926020909101359150565b6000602082840312156107e357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461028057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156101b3576101b3610807565b808201808211156101b3576101b3610807565b80820281158282048414176101b3576101b3610807565b6000826108a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220b8a4fda3ed3a4a85b3951fd52fcce45689e6a1d0c33c85141243ac3ccba08e0864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xA6413A27 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA6413A27 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xD58EE471 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x9F4BA0EE EQ PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE7223B GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x1DE7223B EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x21800FC3 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x65A3EA5F EQ PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x1D0806AE EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x754 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF3 PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x1CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x1FA JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x20E JUMP JUMPDEST PUSH2 0x12E PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH2 0x114 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x796 JUMP JUMPDEST PUSH2 0x287 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x19A CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B3 DUP3 PUSH2 0x1AD PUSH2 0x2BF JUMP JUMPDEST SWAP1 PUSH2 0x2ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x1C6 PUSH2 0x3C7 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH2 0x1E2 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST SWAP1 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x1EF PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x207 PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x21B PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA PUSH2 0x22F PUSH2 0x3F5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x256 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x263 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x51C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 DUP4 DUP4 PUSH2 0x279 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x567 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH2 0x294 DUP2 PUSH2 0x1DC PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1F6 DUP3 DUP3 PUSH2 0x2A1 PUSH2 0x3C7 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x2BC CALLER DUP3 PUSH2 0x2B5 PUSH2 0x3F5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x63F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x836 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x33D JUMPI POP PUSH1 0x0 PUSH2 0x1B3 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x38E JUMPI POP PUSH1 0x1 PUSH2 0x1B3 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0x39D70C9B3F52605681BDC7FBD50A477B2D981DF84C34B96FC10BF20B415C738 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B3 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x836 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x1BA5706200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0x57E9B94CA9A18B4AB6B4C06A7888FFBAF6D53A7902CEA0C6084989D4B9155446 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP2 DUP4 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xC9743ACBDE4009119D240BC9A916FB878829A363CF97BF446E3B6AE6A942BF2E SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x576 DUP5 DUP7 PUSH2 0x849 JUMP JUMPDEST PUSH2 0x580 SWAP2 SWAP1 PUSH2 0x836 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x2 ADD SLOAD DUP6 PUSH1 0x1 ADD SLOAD DUP3 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x873 JUMP JUMPDEST DUP6 SLOAD PUSH2 0x5AD SWAP2 SWAP1 PUSH2 0x849 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED859E7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP4 SWAP1 PUSH32 0xAF9C43FF06C74CA8197F8512B0129A3C1AB15740723F041FDA4563E8332D7A0F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x48A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x74E JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x1B3 JUMPI PUSH2 0x1B3 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8A9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 LOG4 REVERT LOG3 0xED GASPRICE BLOBBASEFEE DUP6 0xB3 SWAP6 0x1F 0xD5 0x2F 0xCC 0xE4 JUMP DUP10 0xE6 LOG1 0xD0 0xC3 EXTCODECOPY DUP6 EQ SLT NUMBER 0xAC EXTCODECOPY 0xCB LOG0 DUP15 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"116:171:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;516:14:62;;509:22;491:41;;479:2;464:18;542:165:14;;;;;;;;2092:128:51;;;:::i;:::-;;;689:25:62;;;677:2;662:18;2092:128:51;543:177:62;1277:255:51;;;;;;:::i;:::-;;:::i;:::-;;2259:136;;;:::i;2434:142::-;;;:::i;710:120:4:-;;;:::i;:::-;;;1086:42:62;1074:55;;;1056:74;;1044:2;1029:18;710:120:4;910:226:62;995:243:51;;;;;;:::i;:::-;;:::i;1867:186::-;;;;;;:::i;:::-;;:::i;1571:263::-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;2092:128:51:-;2139:13;2171:42;:27;:25;:27::i;:::-;5706:7:56;;5611:109;2171:42:51;2164:49;;2092:128;:::o;1277:255::-;734:10:45;1383:66:51;734:10:45;1383:33:51;:31;:33::i;:::-;:56;;:66::i;:::-;1459;1505:9;1516:8;1459:27;:25;:27::i;:::-;:45;:66;:45;:66::i;:::-;1332:200;1277:255;:::o;2259:136::-;2308:17;2344:44;:27;:25;:27::i;:::-;5932:11:56;;;;5831:119;2434:142:51;2485:19;2523:46;:27;:25;:27::i;:::-;6172:13:56;;;;6067:125;710:120:4;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;995:243:51;734:10:45;1095:66:51;734:10:45;1095:33:51;:31;:33::i;:66::-;1171:60;1215:5;1222:8;1171:27;:25;:27::i;:::-;:43;:60;:43;:60::i;1867:186::-;1951:13;1983:63;2026:11;2039:6;1983:27;:25;:27::i;:::-;:42;:63;:42;:63::i;:::-;1976:70;1867:186;-1:-1:-1;;;1867:186:51:o;1571:263::-;734:10:45;1681:66:51;734:10:45;1681:33:51;:31;:33::i;:66::-;1757:70;1805:11;1818:8;1757:27;:25;:27::i;:::-;:47;:70;:47;:70::i;864:152:4:-;934:75;734:10:45;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;6198:174:56:-;6239:16;;956:60;1015:1;964:47;956:60;:::i;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1086:42:62;1074:55;;4543:25:13;;;1056:74:62;1029:18;;4543:25:13;;;;;;;;4132:272:56;4237:9;4250:1;4237:14;4233:78;;4274:26;;;;;;;;;;;;;;4233:78;4321:11;;;:23;;;4359:38;;;;;;4335:9;;4359:38;;;;;4132:272;;;:::o;3658:164::-;3753:15;;;3783:32;;;;;;3763:5;;3783:32;;3753:7;;3783:32;3658:164;;;:::o;5262:246::-;5364:13;;5432:1;5409:20;5423:6;5409:11;:20;:::i;:::-;:24;;;;:::i;:::-;5389:44;;5488:1;:13;;;5473:1;:11;;;5461:9;:23;;;;:::i;:::-;5460:41;;;;:::i;:::-;5450:7;;:51;;;;:::i;:::-;5443:58;5262:246;-1:-1:-1;;;;;5262:246:56:o;4726:288::-;4835:11;4850:1;4835:16;4831:82;;4874:28;;;;;;;;;;;;;;4831:82;4923:13;;;:27;;;4965:42;;;;;;4939:11;;4965:42;;;;;4726:288;;;:::o;3060:369:13:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1086:42:62;1074:55;;3243:24:13;;;1056:74:62;1029:18;;3243:24:13;910:226:62;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3277:146;3148:281;3060:369;;;:::o;14:332:62:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:180;784:6;837:2;825:9;816:7;812:23;808:32;805:52;;;853:1;850;843:12;805:52;-1:-1:-1;876:23:62;;725:180;-1:-1:-1;725:180:62:o;1141:248::-;1209:6;1217;1270:2;1258:9;1249:7;1245:23;1241:32;1238:52;;;1286:1;1283;1276:12;1238:52;-1:-1:-1;;1309:23:62;;;1379:2;1364:18;;;1351:32;;-1:-1:-1;1141:248:62:o;1394:309::-;1453:6;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;1561:9;1548:23;1611:42;1604:5;1600:54;1593:5;1590:65;1580:93;;1669:1;1666;1659:12;1708:184;1760:77;1757:1;1750:88;1857:4;1854:1;1847:15;1881:4;1878:1;1871:15;1897:128;1964:9;;;1985:11;;;1982:37;;;1999:18;;:::i;2030:125::-;2095:9;;;2116:10;;;2113:36;;;2129:18;;:::i;2160:168::-;2233:9;;;2264;;2281:15;;;2275:22;;2261:37;2251:71;;2302:18;;:::i;2333:274::-;2373:1;2399;2389:189;;2434:77;2431:1;2424:88;2535:4;2532:1;2525:15;2563:4;2560:1;2553:15;2389:189;-1:-1:-1;2592:9:62;;2333:274::o"},"gasEstimates":{"creation":{"codeDepositCost":"455200","executionCost":"infinite","totalCost":"infinite"},"external":{"calculatePrice(uint256,uint256)":"infinite","initialPrice()":"infinite","owner()":"infinite","setInitialPrice(uint256)":"infinite","setSlopeDenominator(uint256)":"infinite","setSlopeNumerator(uint256)":"infinite","slopeDenominator()":"infinite","slopeNumerator()":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"calculatePrice(uint256,uint256)":"a6413a27","initialPrice()":"1d0806ae","owner()":"8da5cb5b","setInitialPrice(uint256)":"9f4ba0ee","setSlopeDenominator(uint256)":"d58ee471","setSlopeNumerator(uint256)":"1de7223b","slopeDenominator()":"65a3ea5f","slopeNumerator()":"21800fc3","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinearCurveZeroDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinearCurveZeroNumerator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InitialPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeDenominatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeNumeratorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setSlopeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setSlopeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"params\":{\"operator\":\"The address setting the initial price.\",\"price\":\"The initial price.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"SlopeDenominatorSet(uint256,address)\":{\"params\":{\"denominator\":\"The slope denominator.\",\"operator\":\"The address setting the slope denominator.\"}},\"SlopeNumeratorSet(uint256,address)\":{\"params\":{\"numerator\":\"The slope numerator.\",\"operator\":\"The address setting the slope numerator.\"}}},\"kind\":\"dev\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"details\":\"The price is calculated based on bonding curve mathematical function.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"totalSupply\":\"The total supply of the tokens.\"}},\"initialPrice()\":{\"returns\":{\"price\":\"The initial price.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setInitialPrice(uint256)\":{\"details\":\"Emits a {InitialPriceSet} event.\",\"params\":{\"price\":\"The initial price.\"}},\"setSlopeDenominator(uint256)\":{\"details\":\"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.\",\"params\":{\"denominator\":\"The slope denominator.\"}},\"setSlopeNumerator(uint256)\":{\"details\":\"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.\",\"params\":{\"numerator\":\"The slope numerator.\"}},\"slopeDenominator()\":{\"returns\":{\"denominator\":\"The slope denominator.\"}},\"slopeNumerator()\":{\"returns\":{\"numerator\":\"The slope numerator.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"LinearCurveZeroDenominator()\":[{\"notice\":\"Thrown when the denominator of the linear curve is zero.\"}],\"LinearCurveZeroNumerator()\":[{\"notice\":\"Thrown when the numerator of the linear curve is zero.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"notice\":\"Emitted when the initial price of the curve is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"SlopeDenominatorSet(uint256,address)\":{\"notice\":\"Emitted when the slope denominator of the curve is set.\"},\"SlopeNumeratorSet(uint256,address)\":{\"notice\":\"Emitted when the slope numerator of the curve is set.\"}},\"kind\":\"user\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"notice\":\"Calculates the price of a token given the total supply and the amount to mint.\"},\"initialPrice()\":{\"notice\":\"Returns the initial price of the curve.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setInitialPrice(uint256)\":{\"notice\":\"Sets the initial price of the curve.\"},\"setSlopeDenominator(uint256)\":{\"notice\":\"Sets the slope denominator of the curve.\"},\"setSlopeNumerator(uint256)\":{\"notice\":\"Sets the slope numerator of the curve.\"},\"slopeDenominator()\":{\"notice\":\"Returns the slope denominator of the curve.\"},\"slopeNumerator()\":{\"notice\":\"Returns the slope numerator of the curve.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondingCurve.sol\":\"BondingCurve\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {LinearCurve} from \\\"./lib/curve/LinearCurve.sol\\\";\\n\\ncontract BondingCurve is LinearCurve {\\n    constructor(uint256 price, uint256 numerator, uint256 denominator) LinearCurve(_msgSender(), price, numerator, denominator) {}\\n}\\n\",\"keccak256\":\"0x38910ed9a6667679ef9743b0e435a9851b4647975cbc745b615e520a08e93845\",\"license\":\"MIT\"},\"contracts/lib/curve/LinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetection} from \\\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {LinearCurveBase} from \\\"./base/LinearCurveBase.sol\\\";\\nimport {LinearCurveStorage} from \\\"./libraries/LinearCurveStorage.sol\\\";\\n\\n/// @title Linear Curve contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract LinearCurve is LinearCurveBase, InterfaceDetection, ContractOwnership {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator.\\n    /// @notice Initializes the contract ownership with `initialOwner` as the initial contract owner.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param initialOwner The address to receive the contract ownership.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    constructor(address initialOwner, uint256 price, uint256 numerator, uint256 denominator) ContractOwnership(initialOwner) {\\n        LinearCurveStorage.layout().constructorInit(price, numerator, denominator, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xca721e386d789531b5e5ab0bb43f7ea83aa61e4c45c01f56ef10404c97473641\",\"license\":\"MIT\"},\"contracts/lib/curve/base/LinearCurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {LinearCurveStorage} from \\\"../libraries/LinearCurveStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n\\n/// @title Linear Curve contract for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract LinearCurveBase is ICurve, ILinearCurve, Context {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ILinearCurve\\n    function setInitialPrice(uint256 price) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setInitialPrice(price, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeNumerator(uint256 numerator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeNumerator(numerator, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeDenominator(uint256 denominator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeDenominator(denominator, operator);\\n    }\\n\\n    /// @inheritdoc ICurve\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().calculatePrice(totalSupply, amount);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function initialPrice() external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().initialPrice();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeNumerator() external view returns (uint256 numerator) {\\n        return LinearCurveStorage.layout().slopeNumerator();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeDenominator() external view returns (uint256 denominator) {\\n        return LinearCurveStorage.layout().slopeDenominator();\\n    }\\n}\\n\",\"keccak256\":\"0xd4b3f8dc1c6a3c9cb39762588f8769949f6602b14e38f4a1e2cfc538079a95a5\",\"license\":\"MIT\"},\"contracts/lib/curve/errors/LinearCurveErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the numerator of the linear curve is zero.\\nerror LinearCurveZeroNumerator();\\n\\n/// @notice Thrown when the denominator of the linear curve is zero.\\nerror LinearCurveZeroDenominator();\\n\",\"keccak256\":\"0xb2967d5cdc5945a259044954f5fcb68b175e8b6c050bb02d8aacc18a539a464b\",\"license\":\"MIT\"},\"contracts/lib/curve/events/LinearCurveEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the initial price of the curve is set.\\n/// @param price The initial price.\\n/// @param operator The address setting the initial price.\\nevent InitialPriceSet(uint256 indexed price, address indexed operator);\\n\\n/// @notice Emitted when the slope numerator of the curve is set.\\n/// @param numerator The slope numerator.\\n/// @param operator The address setting the slope numerator.\\nevent SlopeNumeratorSet(uint256 indexed numerator, address indexed operator);\\n\\n/// @notice Emitted when the slope denominator of the curve is set.\\n/// @param denominator The slope denominator.\\n/// @param operator The address setting the slope denominator.\\nevent SlopeDenominatorSet(uint256 indexed denominator, address indexed operator);\\n\",\"keccak256\":\"0x5c8ca26e380d7cc4951e694de5019853b644b2b835115564677cd25ad9595885\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ILinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Linear Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\\ninterface ILinearCurve {\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice() external view returns (uint256 price);\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator() external view returns (uint256 numerator);\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator() external view returns (uint256 denominator);\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    function setInitialPrice(uint256 price) external;\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    function setSlopeNumerator(uint256 numerator) external;\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    function setSlopeDenominator(uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0x3d9e87d447129994d8a82e5f511eae3907d7ca0c07e368b0b3be7a2cb6f60759\",\"license\":\"MIT\"},\"contracts/lib/curve/libraries/LinearCurveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {InitialPriceSet, SlopeNumeratorSet, SlopeDenominatorSet} from \\\"../events/LinearCurveEvents.sol\\\";\\nimport {LinearCurveZeroNumerator, LinearCurveZeroDenominator} from \\\"../errors/LinearCurveErrors.sol\\\";\\n\\nlibrary LinearCurveStorage {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 price;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the initialization.\\n    function constructorInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        s.setInitialPrice(price, operator);\\n        s.setSlopeNumerator(numerator, operator);\\n        s.setSlopeDenominator(denominator, operator);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ICurve).interfaceId, true);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ILinearCurve).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    function proxyInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(price, numerator, denominator, operator);\\n    }\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    /// @param operator The address of the operator performing the operation.\\n    function setInitialPrice(Layout storage s, uint256 price, address operator) internal {\\n        s.price = price;\\n        emit InitialPriceSet(price, operator);\\n    }\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeNumerator(Layout storage s, uint256 numerator, address operator) internal {\\n        if (numerator == 0) {\\n            revert LinearCurveZeroNumerator();\\n        }\\n\\n        s.numerator = numerator;\\n        emit SlopeNumeratorSet(numerator, operator);\\n    }\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeDenominator(Layout storage s, uint256 denominator, address operator) internal {\\n        if (denominator == 0) {\\n            revert LinearCurveZeroDenominator();\\n        }\\n\\n        s.denominator = denominator;\\n        emit SlopeDenominatorSet(denominator, operator);\\n    }\\n\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount to mint.\\n    /// @return price The price of the token.\\n    function calculatePrice(Layout storage s, uint256 totalSupply, uint256 amount) internal view returns (uint256 price) {\\n        uint256 newSupply = totalSupply + amount - 1;\\n        return s.price + (newSupply * s.numerator) / s.denominator;\\n    }\\n\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice(Layout storage s) internal view returns (uint256 price) {\\n        return s.price;\\n    }\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator(Layout storage s) internal view returns (uint256 numerator) {\\n        return s.numerator;\\n    }\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator(Layout storage s) internal view returns (uint256 denominator) {\\n        return s.denominator;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfbe5e2c9b5aad18438ba57410ffc2550da4a4312c84e8e5ec764577805fe4e5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"LinearCurveZeroDenominator()":[{"notice":"Thrown when the denominator of the linear curve is zero."}],"LinearCurveZeroNumerator()":[{"notice":"Thrown when the numerator of the linear curve is zero."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"InitialPriceSet(uint256,address)":{"notice":"Emitted when the initial price of the curve is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"SlopeDenominatorSet(uint256,address)":{"notice":"Emitted when the slope denominator of the curve is set."},"SlopeNumeratorSet(uint256,address)":{"notice":"Emitted when the slope numerator of the curve is set."}},"kind":"user","methods":{"calculatePrice(uint256,uint256)":{"notice":"Calculates the price of a token given the total supply and the amount to mint."},"initialPrice()":{"notice":"Returns the initial price of the curve."},"owner()":{"notice":"Gets the address of the contract owner."},"setInitialPrice(uint256)":{"notice":"Sets the initial price of the curve."},"setSlopeDenominator(uint256)":{"notice":"Sets the slope denominator of the curve."},"setSlopeNumerator(uint256)":{"notice":"Sets the slope numerator of the curve."},"slopeDenominator()":{"notice":"Returns the slope denominator of the curve."},"slopeNumerator()":{"notice":"Returns the slope numerator of the curve."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/lib/curve/LinearCurve.sol":{"LinearCurve":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"LinearCurveZeroDenominator","type":"error"},{"inputs":[],"name":"LinearCurveZeroNumerator","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"InitialPriceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"denominator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeDenominatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"numerator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeNumeratorSet","type":"event"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"calculatePrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setInitialPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"setSlopeDenominator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"name":"setSlopeNumerator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slopeDenominator","outputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slopeNumerator","outputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"InitialPriceSet(uint256,address)":{"params":{"operator":"The address setting the initial price.","price":"The initial price."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"SlopeDenominatorSet(uint256,address)":{"params":{"denominator":"The slope denominator.","operator":"The address setting the slope denominator."}},"SlopeNumeratorSet(uint256,address)":{"params":{"numerator":"The slope numerator.","operator":"The address setting the slope numerator."}}},"kind":"dev","methods":{"calculatePrice(uint256,uint256)":{"details":"The price is calculated based on bonding curve mathematical function.","params":{"amount":"The amount of tokens to mint.","totalSupply":"The total supply of the tokens."}},"constructor":{"details":"Emits an {InitialPriceSet}.Emits a {SlopeNumeratorSet} if `numerator` is not zero.Emits a {SlopeDenominatorSet} if `denominator` is not zero.","params":{"denominator":"The slope denominator.","initialOwner":"The address to receive the contract ownership.","numerator":"The slope numerator.","price":"The initial price."}},"initialPrice()":{"returns":{"price":"The initial price."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setInitialPrice(uint256)":{"details":"Emits a {InitialPriceSet} event.","params":{"price":"The initial price."}},"setSlopeDenominator(uint256)":{"details":"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.","params":{"denominator":"The slope denominator."}},"setSlopeNumerator(uint256)":{"details":"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.","params":{"numerator":"The slope numerator."}},"slopeDenominator()":{"returns":{"denominator":"The slope denominator."}},"slopeNumerator()":{"returns":{"numerator":"The slope numerator."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Linear Curve contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"calculatePrice(uint256,uint256)":"a6413a27","initialPrice()":"1d0806ae","owner()":"8da5cb5b","setInitialPrice(uint256)":"9f4ba0ee","setSlopeDenominator(uint256)":"d58ee471","setSlopeNumerator(uint256)":"1de7223b","slopeDenominator()":"65a3ea5f","slopeNumerator()":"21800fc3","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinearCurveZeroDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinearCurveZeroNumerator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InitialPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeDenominatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeNumeratorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setSlopeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setSlopeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"params\":{\"operator\":\"The address setting the initial price.\",\"price\":\"The initial price.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"SlopeDenominatorSet(uint256,address)\":{\"params\":{\"denominator\":\"The slope denominator.\",\"operator\":\"The address setting the slope denominator.\"}},\"SlopeNumeratorSet(uint256,address)\":{\"params\":{\"numerator\":\"The slope numerator.\",\"operator\":\"The address setting the slope numerator.\"}}},\"kind\":\"dev\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"details\":\"The price is calculated based on bonding curve mathematical function.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"totalSupply\":\"The total supply of the tokens.\"}},\"constructor\":{\"details\":\"Emits an {InitialPriceSet}.Emits a {SlopeNumeratorSet} if `numerator` is not zero.Emits a {SlopeDenominatorSet} if `denominator` is not zero.\",\"params\":{\"denominator\":\"The slope denominator.\",\"initialOwner\":\"The address to receive the contract ownership.\",\"numerator\":\"The slope numerator.\",\"price\":\"The initial price.\"}},\"initialPrice()\":{\"returns\":{\"price\":\"The initial price.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setInitialPrice(uint256)\":{\"details\":\"Emits a {InitialPriceSet} event.\",\"params\":{\"price\":\"The initial price.\"}},\"setSlopeDenominator(uint256)\":{\"details\":\"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.\",\"params\":{\"denominator\":\"The slope denominator.\"}},\"setSlopeNumerator(uint256)\":{\"details\":\"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.\",\"params\":{\"numerator\":\"The slope numerator.\"}},\"slopeDenominator()\":{\"returns\":{\"denominator\":\"The slope denominator.\"}},\"slopeNumerator()\":{\"returns\":{\"numerator\":\"The slope numerator.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Linear Curve contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"LinearCurveZeroDenominator()\":[{\"notice\":\"Thrown when the denominator of the linear curve is zero.\"}],\"LinearCurveZeroNumerator()\":[{\"notice\":\"Thrown when the numerator of the linear curve is zero.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"notice\":\"Emitted when the initial price of the curve is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"SlopeDenominatorSet(uint256,address)\":{\"notice\":\"Emitted when the slope denominator of the curve is set.\"},\"SlopeNumeratorSet(uint256,address)\":{\"notice\":\"Emitted when the slope numerator of the curve is set.\"}},\"kind\":\"user\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"notice\":\"Calculates the price of a token given the total supply and the amount to mint.\"},\"constructor\":{\"notice\":\"Initializes the storage with an initial price, slope numerator, and slope denominator.Initializes the contract ownership with `initialOwner` as the initial contract owner.\"},\"initialPrice()\":{\"notice\":\"Returns the initial price of the curve.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setInitialPrice(uint256)\":{\"notice\":\"Sets the initial price of the curve.\"},\"setSlopeDenominator(uint256)\":{\"notice\":\"Sets the slope denominator of the curve.\"},\"setSlopeNumerator(uint256)\":{\"notice\":\"Sets the slope numerator of the curve.\"},\"slopeDenominator()\":{\"notice\":\"Returns the slope denominator of the curve.\"},\"slopeNumerator()\":{\"notice\":\"Returns the slope numerator of the curve.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/curve/LinearCurve.sol\":\"LinearCurve\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x46429ef8432e6fa53a69bc1bd1c1a8fb4f9b5d7c15957bf16a8c633f1e28f7d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xcfab1a4c53fd90a031fa4fbe30a717084550bc19e271c2aa2c01984cce86614e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/curve/LinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetection} from \\\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {LinearCurveBase} from \\\"./base/LinearCurveBase.sol\\\";\\nimport {LinearCurveStorage} from \\\"./libraries/LinearCurveStorage.sol\\\";\\n\\n/// @title Linear Curve contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract LinearCurve is LinearCurveBase, InterfaceDetection, ContractOwnership {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator.\\n    /// @notice Initializes the contract ownership with `initialOwner` as the initial contract owner.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param initialOwner The address to receive the contract ownership.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    constructor(address initialOwner, uint256 price, uint256 numerator, uint256 denominator) ContractOwnership(initialOwner) {\\n        LinearCurveStorage.layout().constructorInit(price, numerator, denominator, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xca721e386d789531b5e5ab0bb43f7ea83aa61e4c45c01f56ef10404c97473641\",\"license\":\"MIT\"},\"contracts/lib/curve/base/LinearCurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {LinearCurveStorage} from \\\"../libraries/LinearCurveStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n\\n/// @title Linear Curve contract for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract LinearCurveBase is ICurve, ILinearCurve, Context {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ILinearCurve\\n    function setInitialPrice(uint256 price) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setInitialPrice(price, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeNumerator(uint256 numerator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeNumerator(numerator, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeDenominator(uint256 denominator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeDenominator(denominator, operator);\\n    }\\n\\n    /// @inheritdoc ICurve\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().calculatePrice(totalSupply, amount);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function initialPrice() external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().initialPrice();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeNumerator() external view returns (uint256 numerator) {\\n        return LinearCurveStorage.layout().slopeNumerator();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeDenominator() external view returns (uint256 denominator) {\\n        return LinearCurveStorage.layout().slopeDenominator();\\n    }\\n}\\n\",\"keccak256\":\"0xd4b3f8dc1c6a3c9cb39762588f8769949f6602b14e38f4a1e2cfc538079a95a5\",\"license\":\"MIT\"},\"contracts/lib/curve/errors/LinearCurveErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the numerator of the linear curve is zero.\\nerror LinearCurveZeroNumerator();\\n\\n/// @notice Thrown when the denominator of the linear curve is zero.\\nerror LinearCurveZeroDenominator();\\n\",\"keccak256\":\"0xb2967d5cdc5945a259044954f5fcb68b175e8b6c050bb02d8aacc18a539a464b\",\"license\":\"MIT\"},\"contracts/lib/curve/events/LinearCurveEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the initial price of the curve is set.\\n/// @param price The initial price.\\n/// @param operator The address setting the initial price.\\nevent InitialPriceSet(uint256 indexed price, address indexed operator);\\n\\n/// @notice Emitted when the slope numerator of the curve is set.\\n/// @param numerator The slope numerator.\\n/// @param operator The address setting the slope numerator.\\nevent SlopeNumeratorSet(uint256 indexed numerator, address indexed operator);\\n\\n/// @notice Emitted when the slope denominator of the curve is set.\\n/// @param denominator The slope denominator.\\n/// @param operator The address setting the slope denominator.\\nevent SlopeDenominatorSet(uint256 indexed denominator, address indexed operator);\\n\",\"keccak256\":\"0x5c8ca26e380d7cc4951e694de5019853b644b2b835115564677cd25ad9595885\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ILinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Linear Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\\ninterface ILinearCurve {\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice() external view returns (uint256 price);\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator() external view returns (uint256 numerator);\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator() external view returns (uint256 denominator);\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    function setInitialPrice(uint256 price) external;\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    function setSlopeNumerator(uint256 numerator) external;\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    function setSlopeDenominator(uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0x3d9e87d447129994d8a82e5f511eae3907d7ca0c07e368b0b3be7a2cb6f60759\",\"license\":\"MIT\"},\"contracts/lib/curve/libraries/LinearCurveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {InitialPriceSet, SlopeNumeratorSet, SlopeDenominatorSet} from \\\"../events/LinearCurveEvents.sol\\\";\\nimport {LinearCurveZeroNumerator, LinearCurveZeroDenominator} from \\\"../errors/LinearCurveErrors.sol\\\";\\n\\nlibrary LinearCurveStorage {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 price;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the initialization.\\n    function constructorInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        s.setInitialPrice(price, operator);\\n        s.setSlopeNumerator(numerator, operator);\\n        s.setSlopeDenominator(denominator, operator);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ICurve).interfaceId, true);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ILinearCurve).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    function proxyInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(price, numerator, denominator, operator);\\n    }\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    /// @param operator The address of the operator performing the operation.\\n    function setInitialPrice(Layout storage s, uint256 price, address operator) internal {\\n        s.price = price;\\n        emit InitialPriceSet(price, operator);\\n    }\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeNumerator(Layout storage s, uint256 numerator, address operator) internal {\\n        if (numerator == 0) {\\n            revert LinearCurveZeroNumerator();\\n        }\\n\\n        s.numerator = numerator;\\n        emit SlopeNumeratorSet(numerator, operator);\\n    }\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeDenominator(Layout storage s, uint256 denominator, address operator) internal {\\n        if (denominator == 0) {\\n            revert LinearCurveZeroDenominator();\\n        }\\n\\n        s.denominator = denominator;\\n        emit SlopeDenominatorSet(denominator, operator);\\n    }\\n\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount to mint.\\n    /// @return price The price of the token.\\n    function calculatePrice(Layout storage s, uint256 totalSupply, uint256 amount) internal view returns (uint256 price) {\\n        uint256 newSupply = totalSupply + amount - 1;\\n        return s.price + (newSupply * s.numerator) / s.denominator;\\n    }\\n\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice(Layout storage s) internal view returns (uint256 price) {\\n        return s.price;\\n    }\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator(Layout storage s) internal view returns (uint256 numerator) {\\n        return s.numerator;\\n    }\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator(Layout storage s) internal view returns (uint256 denominator) {\\n        return s.denominator;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfbe5e2c9b5aad18438ba57410ffc2550da4a4312c84e8e5ec764577805fe4e5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"LinearCurveZeroDenominator()":[{"notice":"Thrown when the denominator of the linear curve is zero."}],"LinearCurveZeroNumerator()":[{"notice":"Thrown when the numerator of the linear curve is zero."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"InitialPriceSet(uint256,address)":{"notice":"Emitted when the initial price of the curve is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"SlopeDenominatorSet(uint256,address)":{"notice":"Emitted when the slope denominator of the curve is set."},"SlopeNumeratorSet(uint256,address)":{"notice":"Emitted when the slope numerator of the curve is set."}},"kind":"user","methods":{"calculatePrice(uint256,uint256)":{"notice":"Calculates the price of a token given the total supply and the amount to mint."},"constructor":{"notice":"Initializes the storage with an initial price, slope numerator, and slope denominator.Initializes the contract ownership with `initialOwner` as the initial contract owner."},"initialPrice()":{"notice":"Returns the initial price of the curve."},"owner()":{"notice":"Gets the address of the contract owner."},"setInitialPrice(uint256)":{"notice":"Sets the initial price of the curve."},"setSlopeDenominator(uint256)":{"notice":"Sets the slope denominator of the curve."},"setSlopeNumerator(uint256)":{"notice":"Sets the slope numerator of the curve."},"slopeDenominator()":{"notice":"Returns the slope denominator of the curve."},"slopeNumerator()":{"notice":"Returns the slope numerator of the curve."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/lib/curve/base/LinearCurveBase.sol":{"LinearCurveBase":{"abi":[{"inputs":[],"name":"LinearCurveZeroDenominator","type":"error"},{"inputs":[],"name":"LinearCurveZeroNumerator","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"InitialPriceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"denominator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeDenominatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"numerator","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"SlopeNumeratorSet","type":"event"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"calculatePrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setInitialPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"setSlopeDenominator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"name":"setSlopeNumerator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slopeDenominator","outputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slopeNumerator","outputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The curve is defined by the price function `calculatePrice` in {ICurve} interface.This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"InitialPriceSet(uint256,address)":{"params":{"operator":"The address setting the initial price.","price":"The initial price."}},"SlopeDenominatorSet(uint256,address)":{"params":{"denominator":"The slope denominator.","operator":"The address setting the slope denominator."}},"SlopeNumeratorSet(uint256,address)":{"params":{"numerator":"The slope numerator.","operator":"The address setting the slope numerator."}}},"kind":"dev","methods":{"calculatePrice(uint256,uint256)":{"details":"The price is calculated based on bonding curve mathematical function.","params":{"amount":"The amount of tokens to mint.","totalSupply":"The total supply of the tokens."}},"initialPrice()":{"returns":{"price":"The initial price."}},"setInitialPrice(uint256)":{"details":"Emits a {InitialPriceSet} event.","params":{"price":"The initial price."}},"setSlopeDenominator(uint256)":{"details":"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.","params":{"denominator":"The slope denominator."}},"setSlopeNumerator(uint256)":{"details":"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.","params":{"numerator":"The slope numerator."}},"slopeDenominator()":{"returns":{"denominator":"The slope denominator."}},"slopeNumerator()":{"returns":{"numerator":"The slope numerator."}}},"title":"Linear Curve contract for calculating the price of a token.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"calculatePrice(uint256,uint256)":"a6413a27","initialPrice()":"1d0806ae","setInitialPrice(uint256)":"9f4ba0ee","setSlopeDenominator(uint256)":"d58ee471","setSlopeNumerator(uint256)":"1de7223b","slopeDenominator()":"65a3ea5f","slopeNumerator()":"21800fc3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LinearCurveZeroDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinearCurveZeroNumerator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InitialPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeDenominatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SlopeNumeratorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setSlopeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setSlopeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The curve is defined by the price function `calculatePrice` in {ICurve} interface.This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"params\":{\"operator\":\"The address setting the initial price.\",\"price\":\"The initial price.\"}},\"SlopeDenominatorSet(uint256,address)\":{\"params\":{\"denominator\":\"The slope denominator.\",\"operator\":\"The address setting the slope denominator.\"}},\"SlopeNumeratorSet(uint256,address)\":{\"params\":{\"numerator\":\"The slope numerator.\",\"operator\":\"The address setting the slope numerator.\"}}},\"kind\":\"dev\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"details\":\"The price is calculated based on bonding curve mathematical function.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"totalSupply\":\"The total supply of the tokens.\"}},\"initialPrice()\":{\"returns\":{\"price\":\"The initial price.\"}},\"setInitialPrice(uint256)\":{\"details\":\"Emits a {InitialPriceSet} event.\",\"params\":{\"price\":\"The initial price.\"}},\"setSlopeDenominator(uint256)\":{\"details\":\"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.\",\"params\":{\"denominator\":\"The slope denominator.\"}},\"setSlopeNumerator(uint256)\":{\"details\":\"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.\",\"params\":{\"numerator\":\"The slope numerator.\"}},\"slopeDenominator()\":{\"returns\":{\"denominator\":\"The slope denominator.\"}},\"slopeNumerator()\":{\"returns\":{\"numerator\":\"The slope numerator.\"}}},\"title\":\"Linear Curve contract for calculating the price of a token.\",\"version\":1},\"userdoc\":{\"errors\":{\"LinearCurveZeroDenominator()\":[{\"notice\":\"Thrown when the denominator of the linear curve is zero.\"}],\"LinearCurveZeroNumerator()\":[{\"notice\":\"Thrown when the numerator of the linear curve is zero.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"InitialPriceSet(uint256,address)\":{\"notice\":\"Emitted when the initial price of the curve is set.\"},\"SlopeDenominatorSet(uint256,address)\":{\"notice\":\"Emitted when the slope denominator of the curve is set.\"},\"SlopeNumeratorSet(uint256,address)\":{\"notice\":\"Emitted when the slope numerator of the curve is set.\"}},\"kind\":\"user\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"notice\":\"Calculates the price of a token given the total supply and the amount to mint.\"},\"initialPrice()\":{\"notice\":\"Returns the initial price of the curve.\"},\"setInitialPrice(uint256)\":{\"notice\":\"Sets the initial price of the curve.\"},\"setSlopeDenominator(uint256)\":{\"notice\":\"Sets the slope denominator of the curve.\"},\"setSlopeNumerator(uint256)\":{\"notice\":\"Sets the slope numerator of the curve.\"},\"slopeDenominator()\":{\"notice\":\"Returns the slope denominator of the curve.\"},\"slopeNumerator()\":{\"notice\":\"Returns the slope numerator of the curve.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/curve/base/LinearCurveBase.sol\":\"LinearCurveBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xe37c55bf33f7845851986f61e19748afa9f33f293a186745bae016885744c2d1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x81a6b7f4320ac243da73838ce50005a8e531dabf725f0475fefc530ab5de7709\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0x54ae2f8ebf4d1067a04e19df69d3406aabb75554f8cd24003914a6144ce70c34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x7fb931e96c9ab649e23ac41fcb2230ac5f5d6737abd5786f2dae3d30ecb37875\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf79840af277b4801c259d6298af1b9671a3d84a78e6112e7a5d3ebd8c87af213\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/curve/base/LinearCurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {LinearCurveStorage} from \\\"../libraries/LinearCurveStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n\\n/// @title Linear Curve contract for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract LinearCurveBase is ICurve, ILinearCurve, Context {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ILinearCurve\\n    function setInitialPrice(uint256 price) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setInitialPrice(price, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeNumerator(uint256 numerator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeNumerator(numerator, operator);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function setSlopeDenominator(uint256 denominator) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        LinearCurveStorage.layout().setSlopeDenominator(denominator, operator);\\n    }\\n\\n    /// @inheritdoc ICurve\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().calculatePrice(totalSupply, amount);\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function initialPrice() external view returns (uint256 price) {\\n        return LinearCurveStorage.layout().initialPrice();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeNumerator() external view returns (uint256 numerator) {\\n        return LinearCurveStorage.layout().slopeNumerator();\\n    }\\n\\n    /// @inheritdoc ILinearCurve\\n    function slopeDenominator() external view returns (uint256 denominator) {\\n        return LinearCurveStorage.layout().slopeDenominator();\\n    }\\n}\\n\",\"keccak256\":\"0xd4b3f8dc1c6a3c9cb39762588f8769949f6602b14e38f4a1e2cfc538079a95a5\",\"license\":\"MIT\"},\"contracts/lib/curve/errors/LinearCurveErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the numerator of the linear curve is zero.\\nerror LinearCurveZeroNumerator();\\n\\n/// @notice Thrown when the denominator of the linear curve is zero.\\nerror LinearCurveZeroDenominator();\\n\",\"keccak256\":\"0xb2967d5cdc5945a259044954f5fcb68b175e8b6c050bb02d8aacc18a539a464b\",\"license\":\"MIT\"},\"contracts/lib/curve/events/LinearCurveEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the initial price of the curve is set.\\n/// @param price The initial price.\\n/// @param operator The address setting the initial price.\\nevent InitialPriceSet(uint256 indexed price, address indexed operator);\\n\\n/// @notice Emitted when the slope numerator of the curve is set.\\n/// @param numerator The slope numerator.\\n/// @param operator The address setting the slope numerator.\\nevent SlopeNumeratorSet(uint256 indexed numerator, address indexed operator);\\n\\n/// @notice Emitted when the slope denominator of the curve is set.\\n/// @param denominator The slope denominator.\\n/// @param operator The address setting the slope denominator.\\nevent SlopeDenominatorSet(uint256 indexed denominator, address indexed operator);\\n\",\"keccak256\":\"0x5c8ca26e380d7cc4951e694de5019853b644b2b835115564677cd25ad9595885\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ILinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Linear Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\\ninterface ILinearCurve {\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice() external view returns (uint256 price);\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator() external view returns (uint256 numerator);\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator() external view returns (uint256 denominator);\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    function setInitialPrice(uint256 price) external;\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    function setSlopeNumerator(uint256 numerator) external;\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    function setSlopeDenominator(uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0x3d9e87d447129994d8a82e5f511eae3907d7ca0c07e368b0b3be7a2cb6f60759\",\"license\":\"MIT\"},\"contracts/lib/curve/libraries/LinearCurveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {InitialPriceSet, SlopeNumeratorSet, SlopeDenominatorSet} from \\\"../events/LinearCurveEvents.sol\\\";\\nimport {LinearCurveZeroNumerator, LinearCurveZeroDenominator} from \\\"../errors/LinearCurveErrors.sol\\\";\\n\\nlibrary LinearCurveStorage {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 price;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the initialization.\\n    function constructorInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        s.setInitialPrice(price, operator);\\n        s.setSlopeNumerator(numerator, operator);\\n        s.setSlopeDenominator(denominator, operator);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ICurve).interfaceId, true);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ILinearCurve).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    function proxyInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(price, numerator, denominator, operator);\\n    }\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    /// @param operator The address of the operator performing the operation.\\n    function setInitialPrice(Layout storage s, uint256 price, address operator) internal {\\n        s.price = price;\\n        emit InitialPriceSet(price, operator);\\n    }\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeNumerator(Layout storage s, uint256 numerator, address operator) internal {\\n        if (numerator == 0) {\\n            revert LinearCurveZeroNumerator();\\n        }\\n\\n        s.numerator = numerator;\\n        emit SlopeNumeratorSet(numerator, operator);\\n    }\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeDenominator(Layout storage s, uint256 denominator, address operator) internal {\\n        if (denominator == 0) {\\n            revert LinearCurveZeroDenominator();\\n        }\\n\\n        s.denominator = denominator;\\n        emit SlopeDenominatorSet(denominator, operator);\\n    }\\n\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount to mint.\\n    /// @return price The price of the token.\\n    function calculatePrice(Layout storage s, uint256 totalSupply, uint256 amount) internal view returns (uint256 price) {\\n        uint256 newSupply = totalSupply + amount - 1;\\n        return s.price + (newSupply * s.numerator) / s.denominator;\\n    }\\n\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice(Layout storage s) internal view returns (uint256 price) {\\n        return s.price;\\n    }\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator(Layout storage s) internal view returns (uint256 numerator) {\\n        return s.numerator;\\n    }\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator(Layout storage s) internal view returns (uint256 denominator) {\\n        return s.denominator;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfbe5e2c9b5aad18438ba57410ffc2550da4a4312c84e8e5ec764577805fe4e5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"LinearCurveZeroDenominator()":[{"notice":"Thrown when the denominator of the linear curve is zero."}],"LinearCurveZeroNumerator()":[{"notice":"Thrown when the numerator of the linear curve is zero."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"InitialPriceSet(uint256,address)":{"notice":"Emitted when the initial price of the curve is set."},"SlopeDenominatorSet(uint256,address)":{"notice":"Emitted when the slope denominator of the curve is set."},"SlopeNumeratorSet(uint256,address)":{"notice":"Emitted when the slope numerator of the curve is set."}},"kind":"user","methods":{"calculatePrice(uint256,uint256)":{"notice":"Calculates the price of a token given the total supply and the amount to mint."},"initialPrice()":{"notice":"Returns the initial price of the curve."},"setInitialPrice(uint256)":{"notice":"Sets the initial price of the curve."},"setSlopeDenominator(uint256)":{"notice":"Sets the slope denominator of the curve."},"setSlopeNumerator(uint256)":{"notice":"Sets the slope numerator of the curve."},"slopeDenominator()":{"notice":"Returns the slope denominator of the curve."},"slopeNumerator()":{"notice":"Returns the slope numerator of the curve."}},"version":1}}},"contracts/lib/curve/interfaces/ICurve.sol":{"ICurve":{"abi":[{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"calculatePrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The curve is defined by the price function `calculatePrice`.Note: The ERC-165 identifier for this interface is 0xa6413a27.","kind":"dev","methods":{"calculatePrice(uint256,uint256)":{"details":"The price is calculated based on bonding curve mathematical function.","params":{"amount":"The amount of tokens to mint.","totalSupply":"The total supply of the tokens."}}},"title":"Curve interface for calculating the price of a token.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"calculatePrice(uint256,uint256)":"a6413a27"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The curve is defined by the price function `calculatePrice`.Note: The ERC-165 identifier for this interface is 0xa6413a27.\",\"kind\":\"dev\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"details\":\"The price is calculated based on bonding curve mathematical function.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"totalSupply\":\"The total supply of the tokens.\"}}},\"title\":\"Curve interface for calculating the price of a token.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculatePrice(uint256,uint256)\":{\"notice\":\"Calculates the price of a token given the total supply and the amount to mint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/curve/interfaces/ICurve.sol\":\"ICurve\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"calculatePrice(uint256,uint256)":{"notice":"Calculates the price of a token given the total supply and the amount to mint."}},"version":1}}},"contracts/lib/curve/interfaces/ILinearCurve.sol":{"ILinearCurve":{"abi":[{"inputs":[],"name":"initialPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setInitialPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"setSlopeDenominator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"name":"setSlopeNumerator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slopeDenominator","outputs":[{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slopeNumerator","outputs":[{"internalType":"uint256","name":"numerator","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The curve is defined by the price function `calculatePrice` in {ICurve} interface.Note: The ERC-165 identifier for this interface is 0x0e098596.","kind":"dev","methods":{"initialPrice()":{"returns":{"price":"The initial price."}},"setInitialPrice(uint256)":{"details":"Emits a {InitialPriceSet} event.","params":{"price":"The initial price."}},"setSlopeDenominator(uint256)":{"details":"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.","params":{"denominator":"The slope denominator."}},"setSlopeNumerator(uint256)":{"details":"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.","params":{"numerator":"The slope numerator."}},"slopeDenominator()":{"returns":{"denominator":"The slope denominator."}},"slopeNumerator()":{"returns":{"numerator":"The slope numerator."}}},"title":"Linear Curve interface for calculating the price of a token.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"initialPrice()":"1d0806ae","setInitialPrice(uint256)":"9f4ba0ee","setSlopeDenominator(uint256)":"d58ee471","setSlopeNumerator(uint256)":"1de7223b","slopeDenominator()":"65a3ea5f","slopeNumerator()":"21800fc3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setSlopeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setSlopeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The curve is defined by the price function `calculatePrice` in {ICurve} interface.Note: The ERC-165 identifier for this interface is 0x0e098596.\",\"kind\":\"dev\",\"methods\":{\"initialPrice()\":{\"returns\":{\"price\":\"The initial price.\"}},\"setInitialPrice(uint256)\":{\"details\":\"Emits a {InitialPriceSet} event.\",\"params\":{\"price\":\"The initial price.\"}},\"setSlopeDenominator(uint256)\":{\"details\":\"Reverts if `denominator` is zero.Emits a {SlopeDenominatorSet} event.\",\"params\":{\"denominator\":\"The slope denominator.\"}},\"setSlopeNumerator(uint256)\":{\"details\":\"Reverts if `numerator` is zero.Emits a {SlopeNumeratorSet} event.\",\"params\":{\"numerator\":\"The slope numerator.\"}},\"slopeDenominator()\":{\"returns\":{\"denominator\":\"The slope denominator.\"}},\"slopeNumerator()\":{\"returns\":{\"numerator\":\"The slope numerator.\"}}},\"title\":\"Linear Curve interface for calculating the price of a token.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialPrice()\":{\"notice\":\"Returns the initial price of the curve.\"},\"setInitialPrice(uint256)\":{\"notice\":\"Sets the initial price of the curve.\"},\"setSlopeDenominator(uint256)\":{\"notice\":\"Sets the slope denominator of the curve.\"},\"setSlopeNumerator(uint256)\":{\"notice\":\"Sets the slope numerator of the curve.\"},\"slopeDenominator()\":{\"notice\":\"Returns the slope denominator of the curve.\"},\"slopeNumerator()\":{\"notice\":\"Returns the slope numerator of the curve.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/curve/interfaces/ILinearCurve.sol\":\"ILinearCurve\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/lib/curve/interfaces/ILinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Linear Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\\ninterface ILinearCurve {\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice() external view returns (uint256 price);\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator() external view returns (uint256 numerator);\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator() external view returns (uint256 denominator);\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    function setInitialPrice(uint256 price) external;\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    function setSlopeNumerator(uint256 numerator) external;\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    function setSlopeDenominator(uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0x3d9e87d447129994d8a82e5f511eae3907d7ca0c07e368b0b3be7a2cb6f60759\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"initialPrice()":{"notice":"Returns the initial price of the curve."},"setInitialPrice(uint256)":{"notice":"Sets the initial price of the curve."},"setSlopeDenominator(uint256)":{"notice":"Sets the slope denominator of the curve."},"setSlopeNumerator(uint256)":{"notice":"Sets the slope numerator of the curve."},"slopeDenominator()":{"notice":"Returns the slope denominator of the curve."},"slopeNumerator()":{"notice":"Returns the slope numerator of the curve."}},"version":1}}},"contracts/lib/curve/libraries/LinearCurveStorage.sol":{"LinearCurveStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204bdf5b54cf8e49e65c4cbf110bc1fb78f715ba3e768ff170ef43cedd56f3d14e64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B 0xDF JUMPDEST SLOAD 0xCF DUP15 BLOBHASH 0xE6 TLOAD 0x4C 0xBF GT SIGNEXTEND 0xC1 0xFB PUSH25 0xF715BA3E768FF170EF43CEDD56F3D14E64736F6C6343000818 STOP CALLER ","sourceMap":"626:5748:56:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;626:5748:56;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204bdf5b54cf8e49e65c4cbf110bc1fb78f715ba3e768ff170ef43cedd56f3d14e64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B 0xDF JUMPDEST SLOAD 0xCF DUP15 BLOBHASH 0xE6 TLOAD 0x4C 0xBF GT SIGNEXTEND 0xC1 0xFB PUSH25 0xF715BA3E768FF170EF43CEDD56F3D14E64736F6C6343000818 STOP CALLER ","sourceMap":"626:5748:56:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"calculatePrice(struct LinearCurveStorage.Layout storage pointer,uint256,uint256)":"infinite","constructorInit(struct LinearCurveStorage.Layout storage pointer,uint256,uint256,uint256,address)":"infinite","initialPrice(struct LinearCurveStorage.Layout storage pointer)":"infinite","layout()":"infinite","proxyInit(struct LinearCurveStorage.Layout storage pointer,uint256,uint256,uint256,address)":"infinite","setInitialPrice(struct LinearCurveStorage.Layout storage pointer,uint256,address)":"infinite","setSlopeDenominator(struct LinearCurveStorage.Layout storage pointer,uint256,address)":"infinite","setSlopeNumerator(struct LinearCurveStorage.Layout storage pointer,uint256,address)":"infinite","slopeDenominator(struct LinearCurveStorage.Layout storage pointer)":"infinite","slopeNumerator(struct LinearCurveStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/curve/libraries/LinearCurveStorage.sol\":\"LinearCurveStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/curve/errors/LinearCurveErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the numerator of the linear curve is zero.\\nerror LinearCurveZeroNumerator();\\n\\n/// @notice Thrown when the denominator of the linear curve is zero.\\nerror LinearCurveZeroDenominator();\\n\",\"keccak256\":\"0xb2967d5cdc5945a259044954f5fcb68b175e8b6c050bb02d8aacc18a539a464b\",\"license\":\"MIT\"},\"contracts/lib/curve/events/LinearCurveEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when the initial price of the curve is set.\\n/// @param price The initial price.\\n/// @param operator The address setting the initial price.\\nevent InitialPriceSet(uint256 indexed price, address indexed operator);\\n\\n/// @notice Emitted when the slope numerator of the curve is set.\\n/// @param numerator The slope numerator.\\n/// @param operator The address setting the slope numerator.\\nevent SlopeNumeratorSet(uint256 indexed numerator, address indexed operator);\\n\\n/// @notice Emitted when the slope denominator of the curve is set.\\n/// @param denominator The slope denominator.\\n/// @param operator The address setting the slope denominator.\\nevent SlopeDenominatorSet(uint256 indexed denominator, address indexed operator);\\n\",\"keccak256\":\"0x5c8ca26e380d7cc4951e694de5019853b644b2b835115564677cd25ad9595885\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice`.\\n/// @dev Note: The ERC-165 identifier for this interface is 0xa6413a27.\\ninterface ICurve {\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @dev The price is calculated based on bonding curve mathematical function.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function calculatePrice(uint256 totalSupply, uint256 amount) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x3044667c709c9d91ceb8efba73045fe553f28741e5c9612ffab7be0e10ae5bd8\",\"license\":\"MIT\"},\"contracts/lib/curve/interfaces/ILinearCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title Linear Curve interface for calculating the price of a token.\\n/// @dev The curve is defined by the price function `calculatePrice` in {ICurve} interface.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e098596.\\ninterface ILinearCurve {\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice() external view returns (uint256 price);\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator() external view returns (uint256 numerator);\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator() external view returns (uint256 denominator);\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    function setInitialPrice(uint256 price) external;\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    function setSlopeNumerator(uint256 numerator) external;\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    function setSlopeDenominator(uint256 denominator) external;\\n}\\n\",\"keccak256\":\"0x3d9e87d447129994d8a82e5f511eae3907d7ca0c07e368b0b3be7a2cb6f60759\",\"license\":\"MIT\"},\"contracts/lib/curve/libraries/LinearCurveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {ILinearCurve} from \\\"../interfaces/ILinearCurve.sol\\\";\\nimport {InitialPriceSet, SlopeNumeratorSet, SlopeDenominatorSet} from \\\"../events/LinearCurveEvents.sol\\\";\\nimport {LinearCurveZeroNumerator, LinearCurveZeroDenominator} from \\\"../errors/LinearCurveErrors.sol\\\";\\n\\nlibrary LinearCurveStorage {\\n    using LinearCurveStorage for LinearCurveStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 price;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.curve.LinearCurve.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the initialization.\\n    function constructorInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        s.setInitialPrice(price, operator);\\n        s.setSlopeNumerator(numerator, operator);\\n        s.setSlopeDenominator(denominator, operator);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ICurve).interfaceId, true);\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(ILinearCurve).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial price, slope numerator, and slope denominator (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ICurve, ILinearCurve.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {InitialPriceSet}.\\n    /// @dev Emits a {SlopeNumeratorSet} if `numerator` is not zero.\\n    /// @dev Emits a {SlopeDenominatorSet} if `denominator` is not zero.\\n    /// @param price The initial price.\\n    /// @param numerator The slope numerator.\\n    /// @param denominator The slope denominator.\\n    function proxyInit(Layout storage s, uint256 price, uint256 numerator, uint256 denominator, address operator) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(price, numerator, denominator, operator);\\n    }\\n\\n    /// @notice Sets the initial price of the curve.\\n    /// @dev Emits a {InitialPriceSet} event.\\n    /// @param price The initial price.\\n    /// @param operator The address of the operator performing the operation.\\n    function setInitialPrice(Layout storage s, uint256 price, address operator) internal {\\n        s.price = price;\\n        emit InitialPriceSet(price, operator);\\n    }\\n\\n    /// @notice Sets the slope numerator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroNumerator} if `numerator` is zero.\\n    /// @dev Emits a {SlopeNumeratorSet} event.\\n    /// @param numerator The slope numerator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeNumerator(Layout storage s, uint256 numerator, address operator) internal {\\n        if (numerator == 0) {\\n            revert LinearCurveZeroNumerator();\\n        }\\n\\n        s.numerator = numerator;\\n        emit SlopeNumeratorSet(numerator, operator);\\n    }\\n\\n    /// @notice Sets the slope denominator of the curve.\\n    /// @dev Reverts with {LinearCurveZeroDenominator} if `denominator` is zero.\\n    /// @dev Emits a {SlopeDenominatorSet} event.\\n    /// @param denominator The slope denominator.\\n    /// @param operator The address of the operator performing the operation.\\n    function setSlopeDenominator(Layout storage s, uint256 denominator, address operator) internal {\\n        if (denominator == 0) {\\n            revert LinearCurveZeroDenominator();\\n        }\\n\\n        s.denominator = denominator;\\n        emit SlopeDenominatorSet(denominator, operator);\\n    }\\n\\n    /// @notice Calculates the price of a token given the total supply and the amount to mint.\\n    /// @param totalSupply The total supply of the tokens.\\n    /// @param amount The amount to mint.\\n    /// @return price The price of the token.\\n    function calculatePrice(Layout storage s, uint256 totalSupply, uint256 amount) internal view returns (uint256 price) {\\n        uint256 newSupply = totalSupply + amount - 1;\\n        return s.price + (newSupply * s.numerator) / s.denominator;\\n    }\\n\\n    /// @notice Returns the initial price of the curve.\\n    /// @return price The initial price.\\n    function initialPrice(Layout storage s) internal view returns (uint256 price) {\\n        return s.price;\\n    }\\n\\n    /// @notice Returns the slope numerator of the curve.\\n    /// @return numerator The slope numerator.\\n    function slopeNumerator(Layout storage s) internal view returns (uint256 numerator) {\\n        return s.numerator;\\n    }\\n\\n    /// @notice Returns the slope denominator of the curve.\\n    /// @return denominator The slope denominator.\\n    function slopeDenominator(Layout storage s) internal view returns (uint256 denominator) {\\n        return s.denominator;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfbe5e2c9b5aad18438ba57410ffc2550da4a4312c84e8e5ec764577805fe4e5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/minter/ERC721/ERC721Minter.sol":{"ERC721Minter":{"abi":[{"inputs":[],"name":"ERC721MinterMaxTokenIdExceeded","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"ERC721MinterUnsupportedContractType","type":"error"},{"inputs":[],"name":"ERC721MinterZeroMaxTokenId","type":"error"},{"inputs":[],"name":"ERC721MinterZeroTokenAddress","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"currentTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.","params":{"maxTokenId":"The maximum token ID that can be minted.","token":"The ERC721 token contract."}},"currentTokenId()":{"returns":{"tokenId":"The current token ID."}},"maxTokenId()":{"returns":{"tokenId":"The maximum token ID."}},"mint(address)":{"params":{"to":"The address to receive the token."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC721 Minter contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"currentTokenId()":"009a9b7b","maxTokenId()":"91ba317a","mint(address)":"6a627842","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721MinterMaxTokenIdExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"ERC721MinterUnsupportedContractType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MinterZeroMaxTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MinterZeroTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\",\"params\":{\"maxTokenId\":\"The maximum token ID that can be minted.\",\"token\":\"The ERC721 token contract.\"}},\"currentTokenId()\":{\"returns\":{\"tokenId\":\"The current token ID.\"}},\"maxTokenId()\":{\"returns\":{\"tokenId\":\"The maximum token ID.\"}},\"mint(address)\":{\"params\":{\"to\":\"The address to receive the token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC721 Minter contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721MinterMaxTokenIdExceeded()\":[{\"notice\":\"Thrown when the maximum token ID is exceeded.\"}],\"ERC721MinterUnsupportedContractType(address)\":[{\"notice\":\"Thrown when the token contract interface id does not supported.\"}],\"ERC721MinterZeroMaxTokenId()\":[{\"notice\":\"Thrown when the token ID is zero.\"}],\"ERC721MinterZeroTokenAddress()\":[{\"notice\":\"Thrown when the token address is zero.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with the maximum token ID and the ERC721 token contract.\"},\"currentTokenId()\":{\"notice\":\"Returns the current token ID.\"},\"maxTokenId()\":{\"notice\":\"Returns the maximum token ID.\"},\"mint(address)\":{\"notice\":\"Mints a token to the specified address.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/minter/ERC721/ERC721Minter.sol\":\"ERC721Minter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbe995fd26786ed4617ae37f07c1f7961ac3591e2f4e89b9fa353ad60fb11ab15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/ERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InterfaceDetection} from \\\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ERC721MinterBase} from \\\"./base/ERC721MinterBase.sol\\\";\\nimport {ERC721MinterStorage} from \\\"./libraries/ERC721MinterStorage.sol\\\";\\n\\n/// @title ERC721 Minter contract (immutable version).\\nabstract contract ERC721Minter is ERC721MinterBase, InterfaceDetection {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    constructor(uint256 maxTokenId, IERC721Mintable token) {\\n        ERC721MinterStorage.layout().constructorInit(maxTokenId, token);\\n    }\\n}\\n\",\"keccak256\":\"0xb69d71d4d00f9bc9cc0b1d98a6ee6098694a11f986f9664d4f793f6f09e925a3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\nimport {ERC721MinterStorage} from \\\"../libraries/ERC721MinterStorage.sol\\\";\\n\\n/// @title ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721MinterBase is IERC721Minter {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n\\n    /// @inheritdoc IERC721Minter\\n    function mint(address to) public virtual {\\n        ERC721MinterStorage.layout().mint(to);\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function currentTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().currentId();\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function maxTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().maxId();\\n    }\\n}\\n\",\"keccak256\":\"0x37eb1e23835153a1cb01f2cbc9adeadb2cec50c272c28762c03265076acd2b4b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the token ID is zero.\\nerror ERC721MinterZeroMaxTokenId();\\n\\n/// @notice Thrown when the token address is zero.\\nerror ERC721MinterZeroTokenAddress();\\n\\n/// @notice Thrown when the token contract interface id does not supported.\\nerror ERC721MinterUnsupportedContractType(address tokenContract);\\n\\n/// @notice Thrown when the maximum token ID is exceeded.\\nerror ERC721MinterMaxTokenIdExceeded();\\n\",\"keccak256\":\"0x7626262f30f77f2d08fb90b9cd9e66689523fc1b6bb0f70da706949e4bf026c3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Minter interface for minting ERC721 tokens.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\\ninterface IERC721Minter {\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @param to The address to receive the token.\\n    function mint(address to) external;\\n}\\n\",\"keccak256\":\"0x5e903fc517cd0e8429fad955249edaf4d9e25a47c530872b0ab0ab1e505cc21b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721MinterZeroMaxTokenId, ERC721MinterUnsupportedContractType, ERC721MinterMaxTokenIdExceeded, ERC721MinterZeroTokenAddress} from \\\"../errors/ERC721MinterErrors.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\n\\nlibrary ERC721MinterStorage {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 currentTokenId;\\n        uint256 maxTokenId;\\n        IERC721Mintable token;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function constructorInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        if (maxTokenId == 0) {\\n            revert ERC721MinterZeroMaxTokenId();\\n        }\\n        if (address(token) == address(0)) {\\n            revert ERC721MinterZeroTokenAddress();\\n        }\\n\\n        if (!IERC165(address(token)).supportsInterface(type(IERC721Mintable).interfaceId)) {\\n            revert ERC721MinterUnsupportedContractType(address(token));\\n        }\\n        s.maxTokenId = maxTokenId;\\n        s.token = token;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Minter).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function proxyInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(maxTokenId, token);\\n    }\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\\n    /// @param to The address to which the token will be minted.\\n    function mint(Layout storage s, address to) internal {\\n        uint256 nextId = s.currentTokenId + 1;\\n        if (nextId > s.maxTokenId) {\\n            revert ERC721MinterMaxTokenIdExceeded();\\n        }\\n        s.token.mint(to, nextId);\\n        s.currentTokenId = nextId;\\n    }\\n\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.currentTokenId;\\n    }\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.maxTokenId;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeda0d8eac4ba8aa3ffd62fda5e840b18150a880f8d54b2bcc7f97589f62ff54e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721MinterMaxTokenIdExceeded()":[{"notice":"Thrown when the maximum token ID is exceeded."}],"ERC721MinterUnsupportedContractType(address)":[{"notice":"Thrown when the token contract interface id does not supported."}],"ERC721MinterZeroMaxTokenId()":[{"notice":"Thrown when the token ID is zero."}],"ERC721MinterZeroTokenAddress()":[{"notice":"Thrown when the token address is zero."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with the maximum token ID and the ERC721 token contract."},"currentTokenId()":{"notice":"Returns the current token ID."},"maxTokenId()":{"notice":"Returns the maximum token ID."},"mint(address)":{"notice":"Mints a token to the specified address."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol":{"ERC721MinterBase":{"abi":[{"inputs":[],"name":"ERC721MinterMaxTokenIdExceeded","type":"error"},{"inputs":[],"name":"currentTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","kind":"dev","methods":{"currentTokenId()":{"returns":{"tokenId":"The current token ID."}},"maxTokenId()":{"returns":{"tokenId":"The maximum token ID."}},"mint(address)":{"params":{"to":"The address to receive the token."}}},"title":"ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"currentTokenId()":"009a9b7b","maxTokenId()":"91ba317a","mint(address)":"6a627842"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721MinterMaxTokenIdExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"currentTokenId()\":{\"returns\":{\"tokenId\":\"The current token ID.\"}},\"maxTokenId()\":{\"returns\":{\"tokenId\":\"The maximum token ID.\"}},\"mint(address)\":{\"params\":{\"to\":\"The address to receive the token.\"}}},\"title\":\"ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721MinterMaxTokenIdExceeded()\":[{\"notice\":\"Thrown when the maximum token ID is exceeded.\"}]},\"kind\":\"user\",\"methods\":{\"currentTokenId()\":{\"notice\":\"Returns the current token ID.\"},\"maxTokenId()\":{\"notice\":\"Returns the maximum token ID.\"},\"mint(address)\":{\"notice\":\"Mints a token to the specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol\":\"ERC721MinterBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/base/ERC721MinterBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\nimport {ERC721MinterStorage} from \\\"../libraries/ERC721MinterStorage.sol\\\";\\n\\n/// @title ERC721 Minter contract for minting ERC721 tokens with a maximum token ID limit.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC721MinterBase is IERC721Minter {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n\\n    /// @inheritdoc IERC721Minter\\n    function mint(address to) public virtual {\\n        ERC721MinterStorage.layout().mint(to);\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function currentTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().currentId();\\n    }\\n\\n    /// @inheritdoc IERC721Minter\\n    function maxTokenId() public view returns (uint256 tokenId) {\\n        return ERC721MinterStorage.layout().maxId();\\n    }\\n}\\n\",\"keccak256\":\"0x37eb1e23835153a1cb01f2cbc9adeadb2cec50c272c28762c03265076acd2b4b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the token ID is zero.\\nerror ERC721MinterZeroMaxTokenId();\\n\\n/// @notice Thrown when the token address is zero.\\nerror ERC721MinterZeroTokenAddress();\\n\\n/// @notice Thrown when the token contract interface id does not supported.\\nerror ERC721MinterUnsupportedContractType(address tokenContract);\\n\\n/// @notice Thrown when the maximum token ID is exceeded.\\nerror ERC721MinterMaxTokenIdExceeded();\\n\",\"keccak256\":\"0x7626262f30f77f2d08fb90b9cd9e66689523fc1b6bb0f70da706949e4bf026c3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Minter interface for minting ERC721 tokens.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\\ninterface IERC721Minter {\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @param to The address to receive the token.\\n    function mint(address to) external;\\n}\\n\",\"keccak256\":\"0x5e903fc517cd0e8429fad955249edaf4d9e25a47c530872b0ab0ab1e505cc21b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721MinterZeroMaxTokenId, ERC721MinterUnsupportedContractType, ERC721MinterMaxTokenIdExceeded, ERC721MinterZeroTokenAddress} from \\\"../errors/ERC721MinterErrors.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\n\\nlibrary ERC721MinterStorage {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 currentTokenId;\\n        uint256 maxTokenId;\\n        IERC721Mintable token;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function constructorInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        if (maxTokenId == 0) {\\n            revert ERC721MinterZeroMaxTokenId();\\n        }\\n        if (address(token) == address(0)) {\\n            revert ERC721MinterZeroTokenAddress();\\n        }\\n\\n        if (!IERC165(address(token)).supportsInterface(type(IERC721Mintable).interfaceId)) {\\n            revert ERC721MinterUnsupportedContractType(address(token));\\n        }\\n        s.maxTokenId = maxTokenId;\\n        s.token = token;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Minter).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function proxyInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(maxTokenId, token);\\n    }\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\\n    /// @param to The address to which the token will be minted.\\n    function mint(Layout storage s, address to) internal {\\n        uint256 nextId = s.currentTokenId + 1;\\n        if (nextId > s.maxTokenId) {\\n            revert ERC721MinterMaxTokenIdExceeded();\\n        }\\n        s.token.mint(to, nextId);\\n        s.currentTokenId = nextId;\\n    }\\n\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.currentTokenId;\\n    }\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.maxTokenId;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeda0d8eac4ba8aa3ffd62fda5e840b18150a880f8d54b2bcc7f97589f62ff54e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721MinterMaxTokenIdExceeded()":[{"notice":"Thrown when the maximum token ID is exceeded."}]},"kind":"user","methods":{"currentTokenId()":{"notice":"Returns the current token ID."},"maxTokenId()":{"notice":"Returns the maximum token ID."},"mint(address)":{"notice":"Mints a token to the specified address."}},"version":1}}},"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol":{"IERC721Minter":{"abi":[{"inputs":[],"name":"currentTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Note: The ERC-165 identifier for this interface is 0x4f859546.","kind":"dev","methods":{"currentTokenId()":{"returns":{"tokenId":"The current token ID."}},"maxTokenId()":{"returns":{"tokenId":"The maximum token ID."}},"mint(address)":{"params":{"to":"The address to receive the token."}}},"title":"ERC721 Minter interface for minting ERC721 tokens.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"currentTokenId()":"009a9b7b","maxTokenId()":"91ba317a","mint(address)":"6a627842"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Note: The ERC-165 identifier for this interface is 0x4f859546.\",\"kind\":\"dev\",\"methods\":{\"currentTokenId()\":{\"returns\":{\"tokenId\":\"The current token ID.\"}},\"maxTokenId()\":{\"returns\":{\"tokenId\":\"The maximum token ID.\"}},\"mint(address)\":{\"params\":{\"to\":\"The address to receive the token.\"}}},\"title\":\"ERC721 Minter interface for minting ERC721 tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentTokenId()\":{\"notice\":\"Returns the current token ID.\"},\"maxTokenId()\":{\"notice\":\"Returns the maximum token ID.\"},\"mint(address)\":{\"notice\":\"Mints a token to the specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":\"IERC721Minter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Minter interface for minting ERC721 tokens.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\\ninterface IERC721Minter {\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @param to The address to receive the token.\\n    function mint(address to) external;\\n}\\n\",\"keccak256\":\"0x5e903fc517cd0e8429fad955249edaf4d9e25a47c530872b0ab0ab1e505cc21b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"currentTokenId()":{"notice":"Returns the current token ID."},"maxTokenId()":{"notice":"Returns the maximum token ID."},"mint(address)":{"notice":"Mints a token to the specified address."}},"version":1}}},"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol":{"ERC721MinterStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef08e7a3d86c9b2ba41eab4d28266252a2f240822832ad486dff6cd2f252863d64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF ADDMOD 0xE7 LOG3 0xD8 PUSH13 0x9B2BA41EAB4D28266252A2F240 DUP3 0x28 ORIGIN 0xAD BASEFEE PUSH14 0xFF6CD2F252863D64736F6C634300 ADDMOD XOR STOP CALLER ","sourceMap":"808:3807:61:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;808:3807:61;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef08e7a3d86c9b2ba41eab4d28266252a2f240822832ad486dff6cd2f252863d64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF ADDMOD 0xE7 LOG3 0xD8 PUSH13 0x9B2BA41EAB4D28266252A2F240 DUP3 0x28 ORIGIN 0xAD BASEFEE PUSH14 0xFF6CD2F252863D64736F6C634300 ADDMOD XOR STOP CALLER ","sourceMap":"808:3807:61:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ERC721MinterStorage.Layout storage pointer,uint256,contract IERC721Mintable)":"infinite","currentId(struct ERC721MinterStorage.Layout storage pointer)":"infinite","layout()":"infinite","maxId(struct ERC721MinterStorage.Layout storage pointer)":"infinite","mint(struct ERC721MinterStorage.Layout storage pointer,address)":"infinite","proxyInit(struct ERC721MinterStorage.Layout storage pointer,uint256,contract IERC721Mintable)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol\":\"ERC721MinterStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0xfc30a58bec3f7c1dd1c1b4604d668082c7c01696bb9cbf181a7812e9d0d318d5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x569c0a59305d5e0eb9ea3ef6b9376f4771895caca1db902ca6397fa085ab82b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87944ecb71a120095067c66e9ab703ea25460e83f1f39ba0f9bd49a3481ad4dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x04fd98d85db9c4a6947a8f33369455f9317f68fa9fccdc7ec7556a10cb2a1716\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf72b121964b5122b12048165c8f6ef84cf2232015c52632539548c261f6e7d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x4636f14283fd145c15f085e968fd274df5b808738da83bc46ce98b360dec7dfb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/errors/ERC721MinterErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Thrown when the token ID is zero.\\nerror ERC721MinterZeroMaxTokenId();\\n\\n/// @notice Thrown when the token address is zero.\\nerror ERC721MinterZeroTokenAddress();\\n\\n/// @notice Thrown when the token contract interface id does not supported.\\nerror ERC721MinterUnsupportedContractType(address tokenContract);\\n\\n/// @notice Thrown when the maximum token ID is exceeded.\\nerror ERC721MinterMaxTokenIdExceeded();\\n\",\"keccak256\":\"0x7626262f30f77f2d08fb90b9cd9e66689523fc1b6bb0f70da706949e4bf026c3\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/interfaces/IERC721Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title ERC721 Minter interface for minting ERC721 tokens.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4f859546.\\ninterface IERC721Minter {\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxTokenId() external view returns (uint256 tokenId);\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @param to The address to receive the token.\\n    function mint(address to) external;\\n}\\n\",\"keccak256\":\"0x5e903fc517cd0e8429fad955249edaf4d9e25a47c530872b0ab0ab1e505cc21b\",\"license\":\"MIT\"},\"contracts/lib/minter/ERC721/libraries/ERC721MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721MinterZeroMaxTokenId, ERC721MinterUnsupportedContractType, ERC721MinterMaxTokenIdExceeded, ERC721MinterZeroTokenAddress} from \\\"../errors/ERC721MinterErrors.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\\\";\\nimport {IERC721Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\\\";\\nimport {ProxyInitialization} from \\\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\\\";\\nimport {IERC721Minter} from \\\"../interfaces/IERC721Minter.sol\\\";\\n\\nlibrary ERC721MinterStorage {\\n    using ERC721MinterStorage for ERC721MinterStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        uint256 currentTokenId;\\n        uint256 maxTokenId;\\n        IERC721Mintable token;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"yura2100.token.ERC721.ERC721Minter.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ERC721MinterZeroMaxTokenId} if the `maxTokenId` is zero.\\n    /// @dev Reverts with {ERC721MinterZeroTokenAddress} if the `token` is the zero address.\\n    /// @dev Reverts with {ERC721MinterUnsupportedContractType} if the `token` does not support the IERC721Mintable interface.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function constructorInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        if (maxTokenId == 0) {\\n            revert ERC721MinterZeroMaxTokenId();\\n        }\\n        if (address(token) == address(0)) {\\n            revert ERC721MinterZeroTokenAddress();\\n        }\\n\\n        if (!IERC165(address(token)).supportsInterface(type(IERC721Mintable).interfaceId)) {\\n            revert ERC721MinterUnsupportedContractType(address(token));\\n        }\\n        s.maxTokenId = maxTokenId;\\n        s.token = token;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Minter).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the maximum token ID and the ERC721 token contract.\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Minter.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param maxTokenId The maximum token ID that can be minted.\\n    /// @param token The ERC721 token contract.\\n    function proxyInit(Layout storage s, uint256 maxTokenId, IERC721Mintable token) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(maxTokenId, token);\\n    }\\n\\n    /// @notice Mints a token to the specified address.\\n    /// @dev Reverts with {ERC721MinterMaxTokenIdExceeded} if the current token ID exceeds the maximum token ID.\\n    /// @param to The address to which the token will be minted.\\n    function mint(Layout storage s, address to) internal {\\n        uint256 nextId = s.currentTokenId + 1;\\n        if (nextId > s.maxTokenId) {\\n            revert ERC721MinterMaxTokenIdExceeded();\\n        }\\n        s.token.mint(to, nextId);\\n        s.currentTokenId = nextId;\\n    }\\n\\n    /// @notice Returns the current token ID.\\n    /// @return tokenId The current token ID.\\n    function currentId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.currentTokenId;\\n    }\\n\\n    /// @notice Returns the maximum token ID.\\n    /// @return tokenId The maximum token ID.\\n    function maxId(Layout storage s) internal view returns (uint256 tokenId) {\\n        return s.maxTokenId;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeda0d8eac4ba8aa3ffd62fda5e840b18150a880f8d54b2bcc7f97589f62ff54e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}